;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/9/2017 5:59:47 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x158A      	BSF        PCLATH, 3
0x0001	0x2800      	GOTO       2048
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00E2      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00E3      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;demo_simple_8.c,142 :: 		void interrupt(){
;demo_simple_8.c,143 :: 		if (TMR2IF_bit){
0x000D	0x1C8C      	BTFSS      TMR2IF_bit, 1
0x000E	0x2865      	GOTO       L_interrupt0
;demo_simple_8.c,144 :: 		if (mode == mode_inverter){
0x000F	0x0842      	MOVF       _mode, 0
0x0010	0x3A00      	XORLW      0
0x0011	0x1D03      	BTFSS      STATUS, 2
0x0012	0x284A      	GOTO       L_interrupt1
;demo_simple_8.c,145 :: 		if (MOSdriveState){
0x0013	0x082A      	MOVF       _MOSdriveState, 0
0x0014	0x1903      	BTFSC      STATUS, 2
0x0015	0x2847      	GOTO       L_interrupt2
;demo_simple_8.c,147 :: 		if (MOSdriveState == drvMOS1){
0x0016	0x082A      	MOVF       _MOSdriveState, 0
0x0017	0x3A01      	XORLW      1
0x0018	0x1D03      	BTFSS      STATUS, 2
0x0019	0x281C      	GOTO       L_interrupt3
;demo_simple_8.c,148 :: 		duty = duty_buffer;
0x001A	0x0829      	MOVF       _duty_buffer, 0
0x001B	0x00AB      	MOVWF      _duty
;demo_simple_8.c,149 :: 		}
L_interrupt3:
;demo_simple_8.c,151 :: 		dutyCounter++;
0x001C	0x0A27      	INCF       _dutyCounter, 0
0x001D	0x00F0      	MOVWF      R0
0x001E	0x0870      	MOVF       R0, 0
0x001F	0x00A7      	MOVWF      _dutyCounter
;demo_simple_8.c,153 :: 		if (dutyCounter == duty){
0x0020	0x0827      	MOVF       _dutyCounter, 0
0x0021	0x062B      	XORWF      _duty, 0
0x0022	0x1D03      	BTFSS      STATUS, 2
0x0023	0x2826      	GOTO       L_interrupt4
;demo_simple_8.c,154 :: 		MOS1 = 0;
0x0024	0x1307      	BCF        RC6_bit, 6
;demo_simple_8.c,155 :: 		MOS2 = 0;
0x0025	0x1287      	BCF        RC5_bit, 5
;demo_simple_8.c,156 :: 		}
L_interrupt4:
;demo_simple_8.c,158 :: 		if (dutyCounter == period){
0x0026	0x0827      	MOVF       _dutyCounter, 0
0x0027	0x0628      	XORWF      _period, 0
0x0028	0x1D03      	BTFSS      STATUS, 2
0x0029	0x2846      	GOTO       L_interrupt5
;demo_simple_8.c,159 :: 		dutyCounter = 0;
0x002A	0x01A7      	CLRF       _dutyCounter
;demo_simple_8.c,160 :: 		if (MOSdriveState == drvMOS1){
0x002B	0x082A      	MOVF       _MOSdriveState, 0
0x002C	0x3A01      	XORLW      1
0x002D	0x1D03      	BTFSS      STATUS, 2
0x002E	0x2839      	GOTO       L_interrupt6
;demo_simple_8.c,161 :: 		MOS2 = 0;
0x002F	0x1287      	BCF        RC5_bit, 5
;demo_simple_8.c,162 :: 		delay_us(1);
0x0030	0x0000      	NOP
0x0031	0x0000      	NOP
0x0032	0x0000      	NOP
0x0033	0x0000      	NOP
0x0034	0x0000      	NOP
;demo_simple_8.c,163 :: 		MOS1 = 1;
0x0035	0x1707      	BSF        RC6_bit, 6
;demo_simple_8.c,165 :: 		MOSdriveState = drvMOS2;
0x0036	0x3002      	MOVLW      2
0x0037	0x00AA      	MOVWF      _MOSdriveState
;demo_simple_8.c,167 :: 		}
0x0038	0x2846      	GOTO       L_interrupt7
L_interrupt6:
;demo_simple_8.c,168 :: 		else if (MOSdriveState == drvMOS2){
0x0039	0x082A      	MOVF       _MOSdriveState, 0
0x003A	0x3A02      	XORLW      2
0x003B	0x1D03      	BTFSS      STATUS, 2
0x003C	0x2846      	GOTO       L_interrupt8
;demo_simple_8.c,169 :: 		MOS1 = 0;
0x003D	0x1307      	BCF        RC6_bit, 6
;demo_simple_8.c,170 :: 		delay_us(1);
0x003E	0x0000      	NOP
0x003F	0x0000      	NOP
0x0040	0x0000      	NOP
0x0041	0x0000      	NOP
0x0042	0x0000      	NOP
;demo_simple_8.c,171 :: 		MOS2 = 1;
0x0043	0x1687      	BSF        RC5_bit, 5
;demo_simple_8.c,173 :: 		MOSdriveState = drvMOS1;
0x0044	0x3001      	MOVLW      1
0x0045	0x00AA      	MOVWF      _MOSdriveState
;demo_simple_8.c,174 :: 		}
L_interrupt8:
L_interrupt7:
;demo_simple_8.c,175 :: 		}
L_interrupt5:
;demo_simple_8.c,177 :: 		}
0x0046	0x2849      	GOTO       L_interrupt9
L_interrupt2:
;demo_simple_8.c,179 :: 		MOS1 = 0;
0x0047	0x1307      	BCF        RC6_bit, 6
;demo_simple_8.c,180 :: 		MOS2 = 0;
0x0048	0x1287      	BCF        RC5_bit, 5
;demo_simple_8.c,181 :: 		}
L_interrupt9:
;demo_simple_8.c,183 :: 		}
0x0049	0x2863      	GOTO       L_interrupt10
L_interrupt1:
;demo_simple_8.c,186 :: 		cdCounter++;
0x004A	0x0A34      	INCF       _cdCounter, 0
0x004B	0x00F0      	MOVWF      R0
0x004C	0x0870      	MOVF       R0, 0
0x004D	0x00B4      	MOVWF      _cdCounter
;demo_simple_8.c,187 :: 		if (cdCounter == chargingDuty){
0x004E	0x0834      	MOVF       _cdCounter, 0
0x004F	0x062E      	XORWF      _chargingDuty, 0
0x0050	0x1D03      	BTFSS      STATUS, 2
0x0051	0x2862      	GOTO       L_interrupt11
;demo_simple_8.c,188 :: 		if ((hicutreached == 0) && (chargingEnabled == 1)){
0x0052	0x083D      	MOVF       _hicutreached, 0
0x0053	0x3A00      	XORLW      0
0x0054	0x1D03      	BTFSS      STATUS, 2
0x0055	0x2860      	GOTO       L_interrupt14
0x0056	0x3000      	MOVLW      0
0x0057	0x0623      	XORWF      _chargingEnabled+1, 0
0x0058	0x1D03      	BTFSS      STATUS, 2
0x0059	0x285C      	GOTO       L__interrupt175
0x005A	0x3001      	MOVLW      1
0x005B	0x0622      	XORWF      _chargingEnabled, 0
L__interrupt175:
0x005C	0x1D03      	BTFSS      STATUS, 2
0x005D	0x2860      	GOTO       L_interrupt14
L__interrupt173:
;demo_simple_8.c,189 :: 		Triac = 1;       // fire Triac
0x005E	0x1586      	BSF        RB3_bit, 3
;demo_simple_8.c,190 :: 		}
0x005F	0x2861      	GOTO       L_interrupt15
L_interrupt14:
;demo_simple_8.c,192 :: 		Triac = 0;
0x0060	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,193 :: 		}
L_interrupt15:
;demo_simple_8.c,194 :: 		}
0x0061	0x2863      	GOTO       L_interrupt16
L_interrupt11:
;demo_simple_8.c,196 :: 		Triac = 0;      // ensure Triac is off
0x0062	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,197 :: 		}
L_interrupt16:
;demo_simple_8.c,200 :: 		}
L_interrupt10:
;demo_simple_8.c,201 :: 		TMR2 = 0;
0x0063	0x0191      	CLRF       TMR2
;demo_simple_8.c,202 :: 		TMR2IF_bit = 0;
0x0064	0x108C      	BCF        TMR2IF_bit, 1
;demo_simple_8.c,203 :: 		}
L_interrupt0:
;demo_simple_8.c,205 :: 		if (INTF_bit){
0x0065	0x1C8B      	BTFSS      INTF_bit, 1
0x0066	0x2876      	GOTO       L_interrupt17
;demo_simple_8.c,206 :: 		cdCounter = 0;
0x0067	0x01B4      	CLRF       _cdCounter
;demo_simple_8.c,207 :: 		INTF_bit = 0;
0x0068	0x108B      	BCF        INTF_bit, 1
;demo_simple_8.c,208 :: 		TMR2 = 0; TMR2IF_bit = 0;
0x0069	0x0191      	CLRF       TMR2
0x006A	0x108C      	BCF        TMR2IF_bit, 1
;demo_simple_8.c,209 :: 		pulseCounter++;
0x006B	0x0A4A      	INCF       _pulseCounter, 0
0x006C	0x00F0      	MOVWF      R0
0x006D	0x0870      	MOVF       R0, 0
0x006E	0x00CA      	MOVWF      _pulseCounter
;demo_simple_8.c,210 :: 		if (pulseCounter == 4){
0x006F	0x084A      	MOVF       _pulseCounter, 0
0x0070	0x3A04      	XORLW      4
0x0071	0x1D03      	BTFSS      STATUS, 2
0x0072	0x2876      	GOTO       L_interrupt18
;demo_simple_8.c,211 :: 		pulseCounter = 0;
0x0073	0x01CA      	CLRF       _pulseCounter
;demo_simple_8.c,212 :: 		chargingDuty = firing;
0x0074	0x082F      	MOVF       _firing, 0
0x0075	0x00AE      	MOVWF      _chargingDuty
;demo_simple_8.c,213 :: 		}
L_interrupt18:
;demo_simple_8.c,214 :: 		}
L_interrupt17:
;demo_simple_8.c,215 :: 		}
L__interrupt174:
0x0076	0x0820      	MOVF       32, 0
0x0077	0x00F0      	MOVWF      R0
0x0078	0x0863      	MOVF       ___savePCLATH, 0
0x0079	0x008A      	MOVWF      PCLATH
0x007A	0x0E62      	SWAPF      ___saveSTATUS, 0
0x007B	0x0083      	MOVWF      STATUS
0x007C	0x0EFF      	SWAPF      R15, 1
0x007D	0x0E7F      	SWAPF      R15, 0
0x007E	0x0009      	RETFIE
; end of _interrupt
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x007F	0x0000      	NOP
0x0080	0x0000      	NOP
0x0081	0x0000      	NOP
0x0082	0x0000      	NOP
0x0083	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
0x0084	0x0008      	RETURN
; end of _Delay_1us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0085	0x3024      	MOVLW      36
0x0086	0x1283      	BCF        STATUS, 5
0x0087	0x1303      	BCF        STATUS, 6
0x0088	0x00FC      	MOVWF      R12
0x0089	0x30B5      	MOVLW      181
0x008A	0x00FD      	MOVWF      R13
L_Delay_5500us5:
0x008B	0x0BFD      	DECFSZ     R13, 1
0x008C	0x288B      	GOTO       L_Delay_5500us5
0x008D	0x0BFC      	DECFSZ     R12, 1
0x008E	0x288B      	GOTO       L_Delay_5500us5
0x008F	0x0000      	NOP
0x0090	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
0x0091	0x0008      	RETURN
; end of _Delay_5500us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x0092	0x3053      	MOVLW      83
0x0093	0x1283      	BCF        STATUS, 5
0x0094	0x1303      	BCF        STATUS, 6
0x0095	0x00FD      	MOVWF      R13
L_Delay_50us2:
0x0096	0x0BFD      	DECFSZ     R13, 1
0x0097	0x2896      	GOTO       L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
0x0098	0x0008      	RETURN
; end of _Delay_50us
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x0099	0x3024      	MOVLW      36
0x009A	0x1283      	BCF        STATUS, 5
0x009B	0x1303      	BCF        STATUS, 6
0x009C	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x009D	0x0BFD      	DECFSZ     R13, 1
0x009E	0x289D      	GOTO       L_Delay_22us1
0x009F	0x0000      	NOP
;__Lib_Delays.c,17 :: 		}
0x00A0	0x0008      	RETURN
; end of _Delay_22us
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x00A1	0x1283      	BCF        STATUS, 5
0x00A2	0x1303      	BCF        STATUS, 6
0x00A3	0x1BEC      	BTFSC      FARG_Lcd_Cmd_out_char, 7
0x00A4	0x28A7      	GOTO       L__Lcd_Cmd20
0x00A5	0x1007      	BCF        LCD_D7, BitPos(LCD_D7+0)
0x00A6	0x28A8      	GOTO       L__Lcd_Cmd21
L__Lcd_Cmd20:
0x00A7	0x1407      	BSF        LCD_D7, BitPos(LCD_D7+0)
L__Lcd_Cmd21:
;__Lib_Lcd.c,21 :: 		
0x00A8	0x1B6C      	BTFSC      FARG_Lcd_Cmd_out_char, 6
0x00A9	0x28AC      	GOTO       L__Lcd_Cmd22
0x00AA	0x1087      	BCF        LCD_D6, BitPos(LCD_D6+0)
0x00AB	0x28AD      	GOTO       L__Lcd_Cmd23
L__Lcd_Cmd22:
0x00AC	0x1487      	BSF        LCD_D6, BitPos(LCD_D6+0)
L__Lcd_Cmd23:
;__Lib_Lcd.c,22 :: 		
0x00AD	0x1AEC      	BTFSC      FARG_Lcd_Cmd_out_char, 5
0x00AE	0x28B1      	GOTO       L__Lcd_Cmd24
0x00AF	0x1107      	BCF        LCD_D5, BitPos(LCD_D5+0)
0x00B0	0x28B2      	GOTO       L__Lcd_Cmd25
L__Lcd_Cmd24:
0x00B1	0x1507      	BSF        LCD_D5, BitPos(LCD_D5+0)
L__Lcd_Cmd25:
;__Lib_Lcd.c,23 :: 		
0x00B2	0x1A6C      	BTFSC      FARG_Lcd_Cmd_out_char, 4
0x00B3	0x28B6      	GOTO       L__Lcd_Cmd26
0x00B4	0x1187      	BCF        LCD_D4, BitPos(LCD_D4+0)
0x00B5	0x28B7      	GOTO       L__Lcd_Cmd27
L__Lcd_Cmd26:
0x00B6	0x1587      	BSF        LCD_D4, BitPos(LCD_D4+0)
L__Lcd_Cmd27:
;__Lib_Lcd.c,25 :: 		
0x00B7	0x1850      	BTFSC      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x00B8	0x28BB      	GOTO       L__Lcd_Cmd28
0x00B9	0x1607      	BSF        LCD_RS, BitPos(LCD_RS+0)
0x00BA	0x28BC      	GOTO       L__Lcd_Cmd29
L__Lcd_Cmd28:
0x00BB	0x1207      	BCF        LCD_RS, BitPos(LCD_RS+0)
L__Lcd_Cmd29:
;__Lib_Lcd.c,28 :: 		
0x00BC	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,29 :: 		
0x00BD	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x00BE	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,33 :: 		
0x00BF	0x19EC      	BTFSC      FARG_Lcd_Cmd_out_char, 3
0x00C0	0x28C3      	GOTO       L__Lcd_Cmd30
0x00C1	0x1007      	BCF        LCD_D7, BitPos(LCD_D7+0)
0x00C2	0x28C4      	GOTO       L__Lcd_Cmd31
L__Lcd_Cmd30:
0x00C3	0x1407      	BSF        LCD_D7, BitPos(LCD_D7+0)
L__Lcd_Cmd31:
;__Lib_Lcd.c,34 :: 		
0x00C4	0x196C      	BTFSC      FARG_Lcd_Cmd_out_char, 2
0x00C5	0x28C8      	GOTO       L__Lcd_Cmd32
0x00C6	0x1087      	BCF        LCD_D6, BitPos(LCD_D6+0)
0x00C7	0x28C9      	GOTO       L__Lcd_Cmd33
L__Lcd_Cmd32:
0x00C8	0x1487      	BSF        LCD_D6, BitPos(LCD_D6+0)
L__Lcd_Cmd33:
;__Lib_Lcd.c,35 :: 		
0x00C9	0x18EC      	BTFSC      FARG_Lcd_Cmd_out_char, 1
0x00CA	0x28CD      	GOTO       L__Lcd_Cmd34
0x00CB	0x1107      	BCF        LCD_D5, BitPos(LCD_D5+0)
0x00CC	0x28CE      	GOTO       L__Lcd_Cmd35
L__Lcd_Cmd34:
0x00CD	0x1507      	BSF        LCD_D5, BitPos(LCD_D5+0)
L__Lcd_Cmd35:
;__Lib_Lcd.c,36 :: 		
0x00CE	0x186C      	BTFSC      FARG_Lcd_Cmd_out_char, 0
0x00CF	0x28D2      	GOTO       L__Lcd_Cmd36
0x00D0	0x1187      	BCF        LCD_D4, BitPos(LCD_D4+0)
0x00D1	0x28D3      	GOTO       L__Lcd_Cmd37
L__Lcd_Cmd36:
0x00D2	0x1587      	BSF        LCD_D4, BitPos(LCD_D4+0)
L__Lcd_Cmd37:
;__Lib_Lcd.c,38 :: 		
0x00D3	0x1850      	BTFSC      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x00D4	0x28D7      	GOTO       L__Lcd_Cmd38
0x00D5	0x1607      	BSF        LCD_RS, BitPos(LCD_RS+0)
0x00D6	0x28D8      	GOTO       L__Lcd_Cmd39
L__Lcd_Cmd38:
0x00D7	0x1207      	BCF        LCD_RS, BitPos(LCD_RS+0)
L__Lcd_Cmd39:
;__Lib_Lcd.c,40 :: 		
0x00D8	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,41 :: 		
0x00D9	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x00DA	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,44 :: 		
0x00DB	0x1C50      	BTFSS      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x00DC	0x28DF      	GOTO       L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x00DD	0x2085      	CALL       _Delay_5500us
0x00DE	0x28E0      	GOTO       L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x00DF	0x2092      	CALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
0x00E0	0x0008      	RETURN
; end of _Lcd_Cmd
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x00E1	0x1283      	BCF        STATUS, 5
0x00E2	0x1303      	BCF        STATUS, 6
0x00E3	0x1050      	BCF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,53 :: 		
0x00E4	0x0869      	MOVF       FARG_Lcd_Chr_CP_out_char, 0
0x00E5	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x00E6	0x20A1      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x00E7	0x1450      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,55 :: 		
0x00E8	0x0008      	RETURN
; end of _Lcd_Chr_CP
_ADC_Init:
;__Lib_ADC_A_A.c,8 :: 		
;__Lib_ADC_A_A.c,9 :: 		
0x00E9	0x3058      	MOVLW      _ADC_Get_Sample
0x00EA	0x1283      	BCF        STATUS, 5
0x00EB	0x1303      	BCF        STATUS, 6
0x00EC	0x00CD      	MOVWF      _ADC_Get_Sample_Ptr
0x00ED	0x3001      	MOVLW      hi_addr(_ADC_Get_Sample)
0x00EE	0x00CE      	MOVWF      _ADC_Get_Sample_Ptr+1
0x00EF	0x3021      	MOVLW      FARG_ADC_Get_Sample_channel
0x00F0	0x00CF      	MOVWF      _ADC_Get_Sample_Ptr+2
0x00F1	0x3000      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
;__Lib_ADC_A_A.c,11 :: 		
0x00F2	0x019F      	CLRF       ADCON0
;__Lib_ADC_A_A.c,12 :: 		
0x00F3	0x30C0      	MOVLW      192
0x00F4	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_A_A.c,13 :: 		
0x00F5	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_A_A.c,14 :: 		
0x00F6	0x0008      	RETURN
; end of _ADC_Init
_Lcd_Chr:
;__Lib_Lcd.c,65 :: 		
;__Lib_Lcd.c,66 :: 		
0x00F7	0x2909      	GOTO       L_Lcd_Chr4
;__Lib_Lcd.c,67 :: 		
L_Lcd_Chr6:
0x00F8	0x3080      	MOVLW      128
0x00F9	0x1283      	BCF        STATUS, 5
0x00FA	0x1303      	BCF        STATUS, 6
0x00FB	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x00FC	0x291C      	GOTO       L_Lcd_Chr5
;__Lib_Lcd.c,68 :: 		
L_Lcd_Chr7:
0x00FD	0x30C0      	MOVLW      192
0x00FE	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x00FF	0x291C      	GOTO       L_Lcd_Chr5
;__Lib_Lcd.c,69 :: 		
L_Lcd_Chr8:
0x0100	0x3094      	MOVLW      148
0x0101	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0102	0x291C      	GOTO       L_Lcd_Chr5
;__Lib_Lcd.c,70 :: 		
L_Lcd_Chr9:
0x0103	0x30D4      	MOVLW      212
0x0104	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0105	0x291C      	GOTO       L_Lcd_Chr5
;__Lib_Lcd.c,71 :: 		
L_Lcd_Chr10:
0x0106	0x3080      	MOVLW      128
0x0107	0x00E9      	MOVWF      FARG_Lcd_Chr_row
;__Lib_Lcd.c,72 :: 		
0x0108	0x291C      	GOTO       L_Lcd_Chr5
L_Lcd_Chr4:
0x0109	0x1283      	BCF        STATUS, 5
0x010A	0x1303      	BCF        STATUS, 6
0x010B	0x0869      	MOVF       FARG_Lcd_Chr_row, 0
0x010C	0x3A01      	XORLW      1
0x010D	0x1903      	BTFSC      STATUS, 2
0x010E	0x28F8      	GOTO       L_Lcd_Chr6
0x010F	0x0869      	MOVF       FARG_Lcd_Chr_row, 0
0x0110	0x3A02      	XORLW      2
0x0111	0x1903      	BTFSC      STATUS, 2
0x0112	0x28FD      	GOTO       L_Lcd_Chr7
0x0113	0x0869      	MOVF       FARG_Lcd_Chr_row, 0
0x0114	0x3A03      	XORLW      3
0x0115	0x1903      	BTFSC      STATUS, 2
0x0116	0x2900      	GOTO       L_Lcd_Chr8
0x0117	0x0869      	MOVF       FARG_Lcd_Chr_row, 0
0x0118	0x3A04      	XORLW      4
0x0119	0x1903      	BTFSC      STATUS, 2
0x011A	0x2903      	GOTO       L_Lcd_Chr9
0x011B	0x2906      	GOTO       L_Lcd_Chr10
L_Lcd_Chr5:
;__Lib_Lcd.c,74 :: 		
0x011C	0x036A      	DECF       FARG_Lcd_Chr_column, 0
0x011D	0x00F0      	MOVWF      R0
0x011E	0x0869      	MOVF       FARG_Lcd_Chr_row, 0
0x011F	0x07F0      	ADDWF      R0, 1
0x0120	0x0870      	MOVF       R0, 0
0x0121	0x00E9      	MOVWF      FARG_Lcd_Chr_row
;__Lib_Lcd.c,76 :: 		
0x0122	0x1450      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,77 :: 		
0x0123	0x0870      	MOVF       R0, 0
0x0124	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0125	0x20A1      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,79 :: 		
0x0126	0x1050      	BCF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,80 :: 		
0x0127	0x086B      	MOVF       FARG_Lcd_Chr_out_char, 0
0x0128	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0129	0x20A1      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,81 :: 		
0x012A	0x1450      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,82 :: 		
0x012B	0x0008      	RETURN
; end of _Lcd_Chr
_Div_16x16_S_L:
;__Lib_Math.c,420 :: 		
;__Lib_Math.c,426 :: 		
0x012C	0x0D71      	RLF        R1, 0
;__Lib_Math.c,427 :: 		
0x012D	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,428 :: 		
0x012E	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,429 :: 		
0x012F	0x0874      	MOVF       R4, 0
;__Lib_Math.c,430 :: 		
0x0130	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,431 :: 		
0x0131	0x0875      	MOVF       R5, 0
;__Lib_Math.c,432 :: 		
0x0132	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,433 :: 		
0x0133	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,434 :: 		
0x0134	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,435 :: 		
0x0135	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,436 :: 		
0x0136	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,438 :: 		
0x0137	0x300F      	MOVLW      15
;__Lib_Math.c,439 :: 		
0x0138	0x00FC      	MOVWF      R12
;__Lib_Math.c,441 :: 		
0x0139	0x0D71      	RLF        R1, 0
;__Lib_Math.c,442 :: 		
0x013A	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,443 :: 		
0x013B	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,444 :: 		
0x013C	0x0874      	MOVF       R4, 0
;__Lib_Math.c,446 :: 		
0x013D	0x1C70      	BTFSS      R0, 0
;__Lib_Math.c,447 :: 		
0x013E	0x2945      	GOTO       $+7
;__Lib_Math.c,448 :: 		
0x013F	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,449 :: 		
0x0140	0x0875      	MOVF       R5, 0
;__Lib_Math.c,450 :: 		
0x0141	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,451 :: 		
0x0142	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,452 :: 		
0x0143	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,453 :: 		
0x0144	0x294A      	GOTO       $+6
;__Lib_Math.c,455 :: 		
0x0145	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,456 :: 		
0x0146	0x0875      	MOVF       R5, 0
;__Lib_Math.c,457 :: 		
0x0147	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,458 :: 		
0x0148	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,459 :: 		
0x0149	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,461 :: 		
0x014A	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,462 :: 		
0x014B	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,464 :: 		
0x014C	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,465 :: 		
0x014D	0x2939      	GOTO       $-20
;__Lib_Math.c,467 :: 		
0x014E	0x1870      	BTFSC      R0, 0
;__Lib_Math.c,468 :: 		
0x014F	0x2956      	GOTO       $+7
;__Lib_Math.c,469 :: 		
0x0150	0x0874      	MOVF       R4, 0
;__Lib_Math.c,470 :: 		
0x0151	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,471 :: 		
0x0152	0x0875      	MOVF       R5, 0
;__Lib_Math.c,472 :: 		
0x0153	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,473 :: 		
0x0154	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,474 :: 		
0x0155	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,475 :: 		
0x0156	0x0000      	NOP
;__Lib_Math.c,477 :: 		
0x0157	0x0008      	RETURN
; end of _Div_16x16_S_L
_ADC_Get_Sample:
;__Lib_ADC_A_A.c,17 :: 		
;__Lib_ADC_A_A.c,19 :: 		
0x0158	0x1283      	BCF        STATUS, 5
0x0159	0x1303      	BCF        STATUS, 6
0x015A	0x0821      	MOVF       FARG_ADC_Get_Sample_channel, 0
0x015B	0x00F0      	MOVWF      R0
0x015C	0x0DF0      	RLF        R0, 1
0x015D	0x1070      	BCF        R0, 0
0x015E	0x0DF0      	RLF        R0, 1
0x015F	0x1070      	BCF        R0, 0
0x0160	0x0DF0      	RLF        R0, 1
0x0161	0x1070      	BCF        R0, 0
0x0162	0x0870      	MOVF       R0, 0
0x0163	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_A_A.c,22 :: 		
0x0164	0x2099      	CALL       _Delay_22us
;__Lib_ADC_A_A.c,25 :: 		
0x0165	0x151F      	BSF        ADCON0, 2
;__Lib_ADC_A_A.c,28 :: 		
L_ADC_Get_Sample0:
0x0166	0x1D1F      	BTFSS      ADCON0, 2
0x0167	0x296A      	GOTO       L_ADC_Get_Sample1
;__Lib_ADC_A_A.c,29 :: 		
0x0168	0x0000      	NOP
0x0169	0x2966      	GOTO       L_ADC_Get_Sample0
L_ADC_Get_Sample1:
;__Lib_ADC_A_A.c,33 :: 		
0x016A	0x081E      	MOVF       ADRES, 0
0x016B	0x00F0      	MOVWF      R0
0x016C	0x01F1      	CLRF       R0+1
;__Lib_ADC_A_A.c,35 :: 		
0x016D	0x0008      	RETURN
; end of _ADC_Get_Sample
_Mul_16x16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x016E	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,144 :: 		
0x016F	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,145 :: 		
0x0170	0x01FB      	CLRF       R11
;__Lib_Math.c,146 :: 		
0x0171	0x01FA      	CLRF       R10
;__Lib_Math.c,147 :: 		
0x0172	0x01F9      	CLRF       R9
;__Lib_Math.c,148 :: 		
0x0173	0x3080      	MOVLW      128
;__Lib_Math.c,149 :: 		
0x0174	0x00F8      	MOVWF      R8
;__Lib_Math.c,150 :: 		
0x0175	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,151 :: 		
0x0176	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,152 :: 		
0x0177	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,153 :: 		
0x0178	0x2982      	GOTO       $+10
;__Lib_Math.c,154 :: 		
0x0179	0x0874      	MOVF       R4, 0
;__Lib_Math.c,155 :: 		
0x017A	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,156 :: 		
0x017B	0x0875      	MOVF       R5, 0
;__Lib_Math.c,157 :: 		
0x017C	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,158 :: 		
0x017D	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,159 :: 		
0x017E	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,160 :: 		
0x017F	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,161 :: 		
0x0180	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,162 :: 		
0x0181	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,163 :: 		
0x0182	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,164 :: 		
0x0183	0x298A      	GOTO       $+7
;__Lib_Math.c,165 :: 		
0x0184	0x0874      	MOVF       R4, 0
;__Lib_Math.c,166 :: 		
0x0185	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,167 :: 		
0x0186	0x0875      	MOVF       R5, 0
;__Lib_Math.c,168 :: 		
0x0187	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,169 :: 		
0x0188	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,170 :: 		
0x0189	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,171 :: 		
0x018A	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,172 :: 		
0x018B	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,173 :: 		
0x018C	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,174 :: 		
0x018D	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,175 :: 		
0x018E	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,176 :: 		
0x018F	0x2975      	GOTO       $-26
;__Lib_Math.c,177 :: 		
0x0190	0x087B      	MOVF       R11, 0
;__Lib_Math.c,178 :: 		
0x0191	0x00F3      	MOVWF      R3
;__Lib_Math.c,179 :: 		
0x0192	0x087A      	MOVF       R10, 0
;__Lib_Math.c,180 :: 		
0x0193	0x00F2      	MOVWF      R2
;__Lib_Math.c,181 :: 		
0x0194	0x0879      	MOVF       R9, 0
;__Lib_Math.c,182 :: 		
0x0195	0x00F1      	MOVWF      R1
;__Lib_Math.c,183 :: 		
0x0196	0x0878      	MOVF       R8, 0
;__Lib_Math.c,184 :: 		
0x0197	0x00F0      	MOVWF      R0
;__Lib_Math.c,187 :: 		
0x0198	0x0008      	RETURN
; end of _Mul_16x16_U
_Div_16x16_U:
;__Lib_Math.c,215 :: 		
;__Lib_Math.c,222 :: 		
0x0199	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,223 :: 		
0x019A	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,224 :: 		
0x019B	0x01F8      	CLRF       R8
;__Lib_Math.c,225 :: 		
0x019C	0x01F9      	CLRF       R9
;__Lib_Math.c,226 :: 		
0x019D	0x3010      	MOVLW      16
;__Lib_Math.c,227 :: 		
0x019E	0x00FC      	MOVWF      R12
;__Lib_Math.c,228 :: 		
0x019F	0x0D71      	RLF        R1, 0
;__Lib_Math.c,229 :: 		
0x01A0	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,230 :: 		
0x01A1	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,231 :: 		
0x01A2	0x0874      	MOVF       R4, 0
;__Lib_Math.c,232 :: 		
0x01A3	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,233 :: 		
0x01A4	0x0875      	MOVF       R5, 0
;__Lib_Math.c,234 :: 		
0x01A5	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,235 :: 		
0x01A6	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,236 :: 		
0x01A7	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,237 :: 		
0x01A8	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,238 :: 		
0x01A9	0x29B1      	GOTO       $+8
;__Lib_Math.c,239 :: 		
0x01AA	0x0874      	MOVF       R4, 0
;__Lib_Math.c,240 :: 		
0x01AB	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,241 :: 		
0x01AC	0x0875      	MOVF       R5, 0
;__Lib_Math.c,242 :: 		
0x01AD	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,243 :: 		
0x01AE	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,244 :: 		
0x01AF	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,245 :: 		
0x01B0	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,246 :: 		
0x01B1	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,247 :: 		
0x01B2	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,248 :: 		
0x01B3	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,249 :: 		
0x01B4	0x299F      	GOTO       $-21
;__Lib_Math.c,251 :: 		
0x01B5	0x0008      	RETURN
; end of _Div_16x16_U
_initializePWM:
;demo_simple_8.c,251 :: 		void initializePWM(){
;demo_simple_8.c,252 :: 		T2CON = 5; // prescaler 1:4, t2 on
0x01B6	0x3005      	MOVLW      5
0x01B7	0x1283      	BCF        STATUS, 5
0x01B8	0x1303      	BCF        STATUS, 6
0x01B9	0x0092      	MOVWF      T2CON
;demo_simple_8.c,253 :: 		PR2 = 249; // period = 10ms / 50 (50 steps to 10ms)
0x01BA	0x30F9      	MOVLW      249
0x01BB	0x1683      	BSF        STATUS, 5
0x01BC	0x0092      	MOVWF      PR2
;demo_simple_8.c,254 :: 		TMR2IF_bit = 0;
0x01BD	0x1283      	BCF        STATUS, 5
0x01BE	0x108C      	BCF        TMR2IF_bit, 1
;demo_simple_8.c,255 :: 		TMR2IE_bit = 1;
0x01BF	0x1683      	BSF        STATUS, 5
0x01C0	0x148C      	BSF        TMR2IE_bit, 1
;demo_simple_8.c,257 :: 		T1CON = 0x11; // period = 23.2ms, t1 on
0x01C1	0x3011      	MOVLW      17
0x01C2	0x1283      	BCF        STATUS, 5
0x01C3	0x0090      	MOVWF      T1CON
;demo_simple_8.c,259 :: 		MOSdriveState = drvMOS1;
0x01C4	0x3001      	MOVLW      1
0x01C5	0x00AA      	MOVWF      _MOSdriveState
;demo_simple_8.c,260 :: 		duty_buffer = dutyMin;       // minimum duty cycle
0x01C6	0x301E      	MOVLW      30
0x01C7	0x00A9      	MOVWF      _duty_buffer
;demo_simple_8.c,261 :: 		duty = duty_buffer;
0x01C8	0x0829      	MOVF       _duty_buffer, 0
0x01C9	0x00AB      	MOVWF      _duty
;demo_simple_8.c,262 :: 		overloadState = ovl_normal;
0x01CA	0x01E4      	CLRF       _overloadState
;demo_simple_8.c,263 :: 		overloadcounter = 0;
0x01CB	0x01AC      	CLRF       _overloadcounter
;demo_simple_8.c,264 :: 		mainsStarted = 0;
0x01CC	0x01E1      	CLRF       _mainsStarted
;demo_simple_8.c,265 :: 		Triac = 0;
0x01CD	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,266 :: 		INTE_bit = 0;
0x01CE	0x120B      	BCF        INTE_bit, 4
;demo_simple_8.c,267 :: 		ovThreshold = overloadThreshold;
0x01CF	0x301B      	MOVLW      27
0x01D0	0x00B9      	MOVWF      _ovThreshold
0x01D1	0x3000      	MOVLW      0
0x01D2	0x00BA      	MOVWF      _ovThreshold+1
;demo_simple_8.c,269 :: 		}
0x01D3	0x0008      	RETURN
; end of _initializePWM
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x01D4	0x1283      	BCF        STATUS, 5
0x01D5	0x1303      	BCF        STATUS, 6
0x01D6	0x0866      	MOVF       ___DoICPAddr+1, 0
0x01D7	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x01D8	0x0865      	MOVF       ___DoICPAddr, 0
0x01D9	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
0x01DA	0x0008      	RETURN
; end of _____DoICP
_pad:
;demo_simple_8.c,591 :: 		void pad(char c){
;demo_simple_8.c,592 :: 		for (counter = 0; counter < c; counter++){
0x01DB	0x1283      	BCF        STATUS, 5
0x01DC	0x1303      	BCF        STATUS, 6
0x01DD	0x01B8      	CLRF       _counter
L_pad93:
0x01DE	0x0867      	MOVF       FARG_pad_c, 0
0x01DF	0x0238      	SUBWF      _counter, 0
0x01E0	0x1803      	BTFSC      STATUS, 0
0x01E1	0x29EA      	GOTO       L_pad94
;demo_simple_8.c,593 :: 		LCD_Chr_Cp(' ');
0x01E2	0x3020      	MOVLW      32
0x01E3	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x01E4	0x20E1      	CALL       _Lcd_Chr_CP
;demo_simple_8.c,592 :: 		for (counter = 0; counter < c; counter++){
0x01E5	0x0A38      	INCF       _counter, 0
0x01E6	0x00F0      	MOVWF      R0
0x01E7	0x0870      	MOVF       R0, 0
0x01E8	0x00B8      	MOVWF      _counter
;demo_simple_8.c,594 :: 		}
0x01E9	0x29DE      	GOTO       L_pad93
L_pad94:
;demo_simple_8.c,595 :: 		}
0x01EA	0x0008      	RETURN
; end of _pad
_getOverload:
;demo_simple_8.c,543 :: 		void getOverload(){
;demo_simple_8.c,544 :: 		ADCON1 = 0;
0x01EB	0x1683      	BSF        STATUS, 5
0x01EC	0x1303      	BCF        STATUS, 6
0x01ED	0x019F      	CLRF       ADCON1
;demo_simple_8.c,546 :: 		ADCON0 = (ADCON0 & 0xC5) | (shuntCHANNEL << 3);
0x01EE	0x30C5      	MOVLW      197
0x01EF	0x1283      	BCF        STATUS, 5
0x01F0	0x051F      	ANDWF      ADCON0, 0
0x01F1	0x00F0      	MOVWF      R0
0x01F2	0x3018      	MOVLW      24
0x01F3	0x0470      	IORWF      R0, 0
0x01F4	0x009F      	MOVWF      ADCON0
;demo_simple_8.c,548 :: 		vShunt = 0;
0x01F5	0x01BB      	CLRF       _vShunt
0x01F6	0x01BC      	CLRF       _vShunt+1
;demo_simple_8.c,549 :: 		loopcounter = 0;
0x01F7	0x01A4      	CLRF       _loopcounter
0x01F8	0x01A5      	CLRF       _loopcounter+1
;demo_simple_8.c,550 :: 		TMR1H = 0; TMR1L = 0;
0x01F9	0x018F      	CLRF       TMR1H
0x01FA	0x018E      	CLRF       TMR1L
;demo_simple_8.c,551 :: 		TMR1IF_bit = 0;
0x01FB	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,553 :: 		while (TMR1IF_bit == 0){
L_getOverload83:
0x01FC	0x180C      	BTFSC      TMR1IF_bit, 0
0x01FD	0x2A38      	GOTO       L_getOverload84
;demo_simple_8.c,554 :: 		adTemp = 0;
0x01FE	0x01B6      	CLRF       _adTemp
0x01FF	0x01B7      	CLRF       _adTemp+1
;demo_simple_8.c,555 :: 		for (counter = 0; counter < 64; counter++){
0x0200	0x01B8      	CLRF       _counter
L_getOverload85:
0x0201	0x3040      	MOVLW      64
0x0202	0x0238      	SUBWF      _counter, 0
0x0203	0x1803      	BTFSC      STATUS, 0
0x0204	0x2A13      	GOTO       L_getOverload86
;demo_simple_8.c,556 :: 		adTemp += ADC_Get_Sample(shuntCHANNEL);
0x0205	0x3003      	MOVLW      3
0x0206	0x00A1      	MOVWF      FARG_ADC_Get_Sample_channel
0x0207	0x2158      	CALL       _ADC_Get_Sample
0x0208	0x0870      	MOVF       R0, 0
0x0209	0x07B6      	ADDWF      _adTemp, 1
0x020A	0x0871      	MOVF       R0+1, 0
0x020B	0x1803      	BTFSC      STATUS, 0
0x020C	0x3E01      	ADDLW      1
0x020D	0x07B7      	ADDWF      _adTemp+1, 1
;demo_simple_8.c,555 :: 		for (counter = 0; counter < 64; counter++){
0x020E	0x0A38      	INCF       _counter, 0
0x020F	0x00F0      	MOVWF      R0
0x0210	0x0870      	MOVF       R0, 0
0x0211	0x00B8      	MOVWF      _counter
;demo_simple_8.c,557 :: 		}
0x0212	0x2A01      	GOTO       L_getOverload85
L_getOverload86:
;demo_simple_8.c,559 :: 		loopcounter++;
0x0213	0x0824      	MOVF       _loopcounter, 0
0x0214	0x3E01      	ADDLW      1
0x0215	0x00F0      	MOVWF      R0
0x0216	0x3000      	MOVLW      0
0x0217	0x1803      	BTFSC      STATUS, 0
0x0218	0x3E01      	ADDLW      1
0x0219	0x0725      	ADDWF      _loopcounter+1, 0
0x021A	0x00F1      	MOVWF      R0+1
0x021B	0x0870      	MOVF       R0, 0
0x021C	0x00A4      	MOVWF      _loopcounter
0x021D	0x0871      	MOVF       R0+1, 0
0x021E	0x00A5      	MOVWF      _loopcounter+1
;demo_simple_8.c,560 :: 		adTemp = adTemp >> 6;  // average. (>>6 = /64)
0x021F	0x3006      	MOVLW      6
0x0220	0x00F2      	MOVWF      R2
0x0221	0x0836      	MOVF       _adTemp, 0
0x0222	0x00F0      	MOVWF      R0
0x0223	0x0837      	MOVF       _adTemp+1, 0
0x0224	0x00F1      	MOVWF      R0+1
0x0225	0x0872      	MOVF       R2, 0
L__getOverload186:
0x0226	0x1903      	BTFSC      STATUS, 2
0x0227	0x2A2D      	GOTO       L__getOverload187
0x0228	0x0CF1      	RRF        R0+1, 1
0x0229	0x0CF0      	RRF        R0, 1
0x022A	0x13F1      	BCF        R0+1, 7
0x022B	0x3EFF      	ADDLW      255
0x022C	0x2A26      	GOTO       L__getOverload186
L__getOverload187:
0x022D	0x0870      	MOVF       R0, 0
0x022E	0x00B6      	MOVWF      _adTemp
0x022F	0x0871      	MOVF       R0+1, 0
0x0230	0x00B7      	MOVWF      _adTemp+1
;demo_simple_8.c,561 :: 		vShunt += adTemp;
0x0231	0x0836      	MOVF       _adTemp, 0
0x0232	0x07BB      	ADDWF      _vShunt, 1
0x0233	0x0837      	MOVF       _adTemp+1, 0
0x0234	0x1803      	BTFSC      STATUS, 0
0x0235	0x3E01      	ADDLW      1
0x0236	0x07BC      	ADDWF      _vShunt+1, 1
;demo_simple_8.c,562 :: 		}
0x0237	0x29FC      	GOTO       L_getOverload83
L_getOverload84:
;demo_simple_8.c,563 :: 		vShunt /= loopcounter;
0x0238	0x0824      	MOVF       _loopcounter, 0
0x0239	0x00F4      	MOVWF      R4
0x023A	0x0825      	MOVF       _loopcounter+1, 0
0x023B	0x00F5      	MOVWF      R4+1
0x023C	0x083B      	MOVF       _vShunt, 0
0x023D	0x00F0      	MOVWF      R0
0x023E	0x083C      	MOVF       _vShunt+1, 0
0x023F	0x00F1      	MOVWF      R0+1
0x0240	0x2199      	CALL       _Div_16x16_U
0x0241	0x0870      	MOVF       R0, 0
0x0242	0x00BB      	MOVWF      _vShunt
0x0243	0x0871      	MOVF       R0+1, 0
0x0244	0x00BC      	MOVWF      _vShunt+1
;demo_simple_8.c,565 :: 		ovThreshold = (overloadThreshold * 120)/vBat;  // recalculate current for current V
0x0245	0x0840      	MOVF       _vBat, 0
0x0246	0x00F4      	MOVWF      R4
0x0247	0x0841      	MOVF       _vBat+1, 0
0x0248	0x00F5      	MOVWF      R4+1
0x0249	0x30A8      	MOVLW      168
0x024A	0x00F0      	MOVWF      R0
0x024B	0x300C      	MOVLW      12
0x024C	0x00F1      	MOVWF      R0+1
0x024D	0x2199      	CALL       _Div_16x16_U
0x024E	0x0870      	MOVF       R0, 0
0x024F	0x00B9      	MOVWF      _ovThreshold
0x0250	0x0871      	MOVF       R0+1, 0
0x0251	0x00BA      	MOVWF      _ovThreshold+1
;demo_simple_8.c,567 :: 		if (vShunt > (ovThreshold * 3)){
0x0252	0x0839      	MOVF       _ovThreshold, 0
0x0253	0x00F0      	MOVWF      R0
0x0254	0x083A      	MOVF       _ovThreshold+1, 0
0x0255	0x00F1      	MOVWF      R0+1
0x0256	0x3003      	MOVLW      3
0x0257	0x00F4      	MOVWF      R4
0x0258	0x3000      	MOVLW      0
0x0259	0x00F5      	MOVWF      R4+1
0x025A	0x216E      	CALL       _Mul_16x16_U
0x025B	0x083C      	MOVF       _vShunt+1, 0
0x025C	0x0271      	SUBWF      R0+1, 0
0x025D	0x1D03      	BTFSS      STATUS, 2
0x025E	0x2A61      	GOTO       L__getOverload188
0x025F	0x083B      	MOVF       _vShunt, 0
0x0260	0x0270      	SUBWF      R0, 0
L__getOverload188:
0x0261	0x1803      	BTFSC      STATUS, 0
0x0262	0x2A66      	GOTO       L_getOverload88
;demo_simple_8.c,568 :: 		overloadState = ovl_overload;
0x0263	0x3001      	MOVLW      1
0x0264	0x00E4      	MOVWF      _overloadState
;demo_simple_8.c,569 :: 		}
0x0265	0x2A7A      	GOTO       L_getOverload89
L_getOverload88:
;demo_simple_8.c,571 :: 		if (vShunt > ovThreshold){
0x0266	0x083C      	MOVF       _vShunt+1, 0
0x0267	0x023A      	SUBWF      _ovThreshold+1, 0
0x0268	0x1D03      	BTFSS      STATUS, 2
0x0269	0x2A6C      	GOTO       L__getOverload189
0x026A	0x083B      	MOVF       _vShunt, 0
0x026B	0x0239      	SUBWF      _ovThreshold, 0
L__getOverload189:
0x026C	0x1803      	BTFSC      STATUS, 0
0x026D	0x2A79      	GOTO       L_getOverload90
;demo_simple_8.c,572 :: 		overloadcounter++;
0x026E	0x0A2C      	INCF       _overloadcounter, 0
0x026F	0x00F0      	MOVWF      R0
0x0270	0x0870      	MOVF       R0, 0
0x0271	0x00AC      	MOVWF      _overloadcounter
;demo_simple_8.c,573 :: 		if (overloadcounter >= 7){
0x0272	0x3007      	MOVLW      7
0x0273	0x022C      	SUBWF      _overloadcounter, 0
0x0274	0x1C03      	BTFSS      STATUS, 0
0x0275	0x2A78      	GOTO       L_getOverload91
;demo_simple_8.c,574 :: 		overloadState = ovl_overload;
0x0276	0x3001      	MOVLW      1
0x0277	0x00E4      	MOVWF      _overloadState
;demo_simple_8.c,575 :: 		}
L_getOverload91:
;demo_simple_8.c,576 :: 		}
0x0278	0x2A7A      	GOTO       L_getOverload92
L_getOverload90:
;demo_simple_8.c,578 :: 		overloadcounter = 0;
0x0279	0x01AC      	CLRF       _overloadcounter
;demo_simple_8.c,579 :: 		}
L_getOverload92:
;demo_simple_8.c,580 :: 		}
L_getOverload89:
;demo_simple_8.c,582 :: 		ADCON1 = 7;
0x027A	0x3007      	MOVLW      7
0x027B	0x1683      	BSF        STATUS, 5
0x027C	0x009F      	MOVWF      ADCON1
;demo_simple_8.c,583 :: 		}
0x027D	0x0008      	RETURN
; end of _getOverload
_initializeIO:
;demo_simple_8.c,285 :: 		void initializeIO(){
;demo_simple_8.c,286 :: 		TRISA = 0x2F;
0x027E	0x302F      	MOVLW      47
0x027F	0x1683      	BSF        STATUS, 5
0x0280	0x1303      	BCF        STATUS, 6
0x0281	0x0085      	MOVWF      TRISA
;demo_simple_8.c,287 :: 		TRISB = 0x21;
0x0282	0x3021      	MOVLW      33
0x0283	0x0086      	MOVWF      TRISB
;demo_simple_8.c,288 :: 		TRISC = 0;
0x0284	0x0187      	CLRF       TRISC
;demo_simple_8.c,289 :: 		PORTA = 0;
0x0285	0x1283      	BCF        STATUS, 5
0x0286	0x0185      	CLRF       PORTA
;demo_simple_8.c,290 :: 		PORTB = 0;
0x0287	0x0186      	CLRF       PORTB
;demo_simple_8.c,291 :: 		PORTC = 0;
0x0288	0x0187      	CLRF       PORTC
;demo_simple_8.c,292 :: 		ADCON1 = 7;
0x0289	0x3007      	MOVLW      7
0x028A	0x1683      	BSF        STATUS, 5
0x028B	0x009F      	MOVWF      ADCON1
;demo_simple_8.c,293 :: 		}
0x028C	0x0008      	RETURN
; end of _initializeIO
_doFeedback:
;demo_simple_8.c,516 :: 		void doFeedback(){
;demo_simple_8.c,517 :: 		ADCON1 = 0;
0x028D	0x1683      	BSF        STATUS, 5
0x028E	0x1303      	BCF        STATUS, 6
0x028F	0x019F      	CLRF       ADCON1
;demo_simple_8.c,519 :: 		ADCON0 = (ADCON0 & 0xC5) | (feedbackCHANNEL << 3);
0x0290	0x30C5      	MOVLW      197
0x0291	0x1283      	BCF        STATUS, 5
0x0292	0x051F      	ANDWF      ADCON0, 0
0x0293	0x00F0      	MOVWF      R0
0x0294	0x3008      	MOVLW      8
0x0295	0x0470      	IORWF      R0, 0
0x0296	0x009F      	MOVWF      ADCON0
;demo_simple_8.c,521 :: 		vFb = 0;
0x0297	0x01D2      	CLRF       _vFb
0x0298	0x01D3      	CLRF       _vFb+1
;demo_simple_8.c,523 :: 		for (loopcounter = 0; loopcounter < 4; loopcounter++){
0x0299	0x01A4      	CLRF       _loopcounter
0x029A	0x01A5      	CLRF       _loopcounter+1
L_doFeedback75:
0x029B	0x3000      	MOVLW      0
0x029C	0x0225      	SUBWF      _loopcounter+1, 0
0x029D	0x1D03      	BTFSS      STATUS, 2
0x029E	0x2AA1      	GOTO       L__doFeedback183
0x029F	0x3004      	MOVLW      4
0x02A0	0x0224      	SUBWF      _loopcounter, 0
L__doFeedback183:
0x02A1	0x1803      	BTFSC      STATUS, 0
0x02A2	0x2AB9      	GOTO       L_doFeedback76
;demo_simple_8.c,524 :: 		vFb += ADC_Get_Sample(feedbackCHANNEL);
0x02A3	0x3001      	MOVLW      1
0x02A4	0x00A1      	MOVWF      FARG_ADC_Get_Sample_channel
0x02A5	0x2158      	CALL       _ADC_Get_Sample
0x02A6	0x0870      	MOVF       R0, 0
0x02A7	0x07D2      	ADDWF      _vFb, 1
0x02A8	0x0871      	MOVF       R0+1, 0
0x02A9	0x1803      	BTFSC      STATUS, 0
0x02AA	0x3E01      	ADDLW      1
0x02AB	0x07D3      	ADDWF      _vFb+1, 1
;demo_simple_8.c,523 :: 		for (loopcounter = 0; loopcounter < 4; loopcounter++){
0x02AC	0x0824      	MOVF       _loopcounter, 0
0x02AD	0x3E01      	ADDLW      1
0x02AE	0x00F0      	MOVWF      R0
0x02AF	0x3000      	MOVLW      0
0x02B0	0x1803      	BTFSC      STATUS, 0
0x02B1	0x3E01      	ADDLW      1
0x02B2	0x0725      	ADDWF      _loopcounter+1, 0
0x02B3	0x00F1      	MOVWF      R0+1
0x02B4	0x0870      	MOVF       R0, 0
0x02B5	0x00A4      	MOVWF      _loopcounter
0x02B6	0x0871      	MOVF       R0+1, 0
0x02B7	0x00A5      	MOVWF      _loopcounter+1
;demo_simple_8.c,525 :: 		}
0x02B8	0x2A9B      	GOTO       L_doFeedback75
L_doFeedback76:
;demo_simple_8.c,527 :: 		vFb = vFb >> 2;   // average
0x02B9	0x0852      	MOVF       _vFb, 0
0x02BA	0x00F0      	MOVWF      R0
0x02BB	0x0853      	MOVF       _vFb+1, 0
0x02BC	0x00F1      	MOVWF      R0+1
0x02BD	0x0CF1      	RRF        R0+1, 1
0x02BE	0x0CF0      	RRF        R0, 1
0x02BF	0x13F1      	BCF        R0+1, 7
0x02C0	0x0CF1      	RRF        R0+1, 1
0x02C1	0x0CF0      	RRF        R0, 1
0x02C2	0x13F1      	BCF        R0+1, 7
0x02C3	0x0870      	MOVF       R0, 0
0x02C4	0x00D2      	MOVWF      _vFb
0x02C5	0x0871      	MOVF       R0+1, 0
0x02C6	0x00D3      	MOVWF      _vFb+1
;demo_simple_8.c,529 :: 		if (vFb < (feedbackThreshold )){
0x02C7	0x3000      	MOVLW      0
0x02C8	0x0253      	SUBWF      _vFb+1, 0
0x02C9	0x1D03      	BTFSS      STATUS, 2
0x02CA	0x2ACD      	GOTO       L__doFeedback184
0x02CB	0x3030      	MOVLW      48
0x02CC	0x0252      	SUBWF      _vFb, 0
L__doFeedback184:
0x02CD	0x1803      	BTFSC      STATUS, 0
0x02CE	0x2AD8      	GOTO       L_doFeedback78
;demo_simple_8.c,530 :: 		if (duty_buffer < dutyMax){
0x02CF	0x302F      	MOVLW      47
0x02D0	0x0229      	SUBWF      _duty_buffer, 0
0x02D1	0x1803      	BTFSC      STATUS, 0
0x02D2	0x2AD7      	GOTO       L_doFeedback79
;demo_simple_8.c,531 :: 		duty_buffer++;
0x02D3	0x0A29      	INCF       _duty_buffer, 0
0x02D4	0x00F0      	MOVWF      R0
0x02D5	0x0870      	MOVF       R0, 0
0x02D6	0x00A9      	MOVWF      _duty_buffer
;demo_simple_8.c,532 :: 		}
L_doFeedback79:
;demo_simple_8.c,533 :: 		}
0x02D7	0x2AE8      	GOTO       L_doFeedback80
L_doFeedback78:
;demo_simple_8.c,534 :: 		else if (vFb > (feedbackThreshold + 1)){
0x02D8	0x0853      	MOVF       _vFb+1, 0
0x02D9	0x3C00      	SUBLW      0
0x02DA	0x1D03      	BTFSS      STATUS, 2
0x02DB	0x2ADE      	GOTO       L__doFeedback185
0x02DC	0x0852      	MOVF       _vFb, 0
0x02DD	0x3C31      	SUBLW      49
L__doFeedback185:
0x02DE	0x1803      	BTFSC      STATUS, 0
0x02DF	0x2AE8      	GOTO       L_doFeedback81
;demo_simple_8.c,535 :: 		if (duty_buffer > dutyMin){
0x02E0	0x0829      	MOVF       _duty_buffer, 0
0x02E1	0x3C1E      	SUBLW      30
0x02E2	0x1803      	BTFSC      STATUS, 0
0x02E3	0x2AE8      	GOTO       L_doFeedback82
;demo_simple_8.c,536 :: 		duty_buffer--;
0x02E4	0x0329      	DECF       _duty_buffer, 0
0x02E5	0x00F0      	MOVWF      R0
0x02E6	0x0870      	MOVF       R0, 0
0x02E7	0x00A9      	MOVWF      _duty_buffer
;demo_simple_8.c,537 :: 		}
L_doFeedback82:
;demo_simple_8.c,538 :: 		}
L_doFeedback81:
L_doFeedback80:
;demo_simple_8.c,540 :: 		ADCON1 = 7;
0x02E8	0x3007      	MOVLW      7
0x02E9	0x1683      	BSF        STATUS, 5
0x02EA	0x009F      	MOVWF      ADCON1
;demo_simple_8.c,541 :: 		}
0x02EB	0x0008      	RETURN
; end of _doFeedback
_batteryIcon:
;demo_simple_8.c,217 :: 		void batteryIcon(char pos_row, char pos_char) {
;demo_simple_8.c,218 :: 		Lcd_Cmd(64);
0x02EC	0x3040      	MOVLW      64
0x02ED	0x1283      	BCF        STATUS, 5
0x02EE	0x1303      	BCF        STATUS, 6
0x02EF	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x02F0	0x20A1      	CALL       _Lcd_Cmd
;demo_simple_8.c,219 :: 		for (loopcounter = 0; loopcounter <= 7; loopcounter++){
0x02F1	0x01A4      	CLRF       _loopcounter
0x02F2	0x01A5      	CLRF       _loopcounter+1
L_batteryIcon19:
0x02F3	0x0825      	MOVF       _loopcounter+1, 0
0x02F4	0x3C00      	SUBLW      0
0x02F5	0x1D03      	BTFSS      STATUS, 2
0x02F6	0x2AF9      	GOTO       L__batteryIcon176
0x02F7	0x0824      	MOVF       _loopcounter, 0
0x02F8	0x3C07      	SUBLW      7
L__batteryIcon176:
0x02F9	0x1C03      	BTFSS      STATUS, 0
0x02FA	0x2B75      	GOTO       L_batteryIcon20
;demo_simple_8.c,220 :: 		switch (batlv){
0x02FB	0x2B51      	GOTO       L_batteryIcon22
;demo_simple_8.c,221 :: 		case 1:
L_batteryIcon24:
;demo_simple_8.c,222 :: 		character = batlv1[loopcounter];
0x02FC	0x0824      	MOVF       _loopcounter, 0
0x02FD	0x3E46      	ADDLW      _batlv1
0x02FE	0x00F0      	MOVWF      R0
0x02FF	0x3006      	MOVLW      hi_addr(_batlv1)
0x0300	0x1803      	BTFSC      STATUS, 0
0x0301	0x3E01      	ADDLW      1
0x0302	0x0725      	ADDWF      _loopcounter+1, 0
0x0303	0x00F1      	MOVWF      R0+1
0x0304	0x0870      	MOVF       R0, 0
0x0305	0x00E5      	MOVWF      ___DoICPAddr
0x0306	0x0871      	MOVF       R0+1, 0
0x0307	0x00E6      	MOVWF      ___DoICPAddr+1
0x0308	0x21D4      	CALL       _____DoICP
0x0309	0x118A      	BCF        PCLATH, 3
0x030A	0x120A      	BCF        PCLATH, 4
0x030B	0x00D9      	MOVWF      _character
;demo_simple_8.c,223 :: 		break;
0x030C	0x2B65      	GOTO       L_batteryIcon23
;demo_simple_8.c,224 :: 		case 2:
L_batteryIcon25:
;demo_simple_8.c,225 :: 		character = batlv2[loopcounter];
0x030D	0x0824      	MOVF       _loopcounter, 0
0x030E	0x3E4E      	ADDLW      _batlv2
0x030F	0x00F0      	MOVWF      R0
0x0310	0x3006      	MOVLW      hi_addr(_batlv2)
0x0311	0x1803      	BTFSC      STATUS, 0
0x0312	0x3E01      	ADDLW      1
0x0313	0x0725      	ADDWF      _loopcounter+1, 0
0x0314	0x00F1      	MOVWF      R0+1
0x0315	0x0870      	MOVF       R0, 0
0x0316	0x00E5      	MOVWF      ___DoICPAddr
0x0317	0x0871      	MOVF       R0+1, 0
0x0318	0x00E6      	MOVWF      ___DoICPAddr+1
0x0319	0x21D4      	CALL       _____DoICP
0x031A	0x118A      	BCF        PCLATH, 3
0x031B	0x120A      	BCF        PCLATH, 4
0x031C	0x00D9      	MOVWF      _character
;demo_simple_8.c,226 :: 		break;
0x031D	0x2B65      	GOTO       L_batteryIcon23
;demo_simple_8.c,227 :: 		case 3:
L_batteryIcon26:
;demo_simple_8.c,228 :: 		character = batlv3[loopcounter];
0x031E	0x0824      	MOVF       _loopcounter, 0
0x031F	0x3E3E      	ADDLW      _batlv3
0x0320	0x00F0      	MOVWF      R0
0x0321	0x3006      	MOVLW      hi_addr(_batlv3)
0x0322	0x1803      	BTFSC      STATUS, 0
0x0323	0x3E01      	ADDLW      1
0x0324	0x0725      	ADDWF      _loopcounter+1, 0
0x0325	0x00F1      	MOVWF      R0+1
0x0326	0x0870      	MOVF       R0, 0
0x0327	0x00E5      	MOVWF      ___DoICPAddr
0x0328	0x0871      	MOVF       R0+1, 0
0x0329	0x00E6      	MOVWF      ___DoICPAddr+1
0x032A	0x21D4      	CALL       _____DoICP
0x032B	0x118A      	BCF        PCLATH, 3
0x032C	0x120A      	BCF        PCLATH, 4
0x032D	0x00D9      	MOVWF      _character
;demo_simple_8.c,229 :: 		break;
0x032E	0x2B65      	GOTO       L_batteryIcon23
;demo_simple_8.c,230 :: 		case 4:
L_batteryIcon27:
;demo_simple_8.c,231 :: 		character = batlv4[loopcounter];
0x032F	0x0824      	MOVF       _loopcounter, 0
0x0330	0x3E2E      	ADDLW      _batlv4
0x0331	0x00F0      	MOVWF      R0
0x0332	0x3006      	MOVLW      hi_addr(_batlv4)
0x0333	0x1803      	BTFSC      STATUS, 0
0x0334	0x3E01      	ADDLW      1
0x0335	0x0725      	ADDWF      _loopcounter+1, 0
0x0336	0x00F1      	MOVWF      R0+1
0x0337	0x0870      	MOVF       R0, 0
0x0338	0x00E5      	MOVWF      ___DoICPAddr
0x0339	0x0871      	MOVF       R0+1, 0
0x033A	0x00E6      	MOVWF      ___DoICPAddr+1
0x033B	0x21D4      	CALL       _____DoICP
0x033C	0x118A      	BCF        PCLATH, 3
0x033D	0x120A      	BCF        PCLATH, 4
0x033E	0x00D9      	MOVWF      _character
;demo_simple_8.c,232 :: 		break;
0x033F	0x2B65      	GOTO       L_batteryIcon23
;demo_simple_8.c,233 :: 		case 5:
L_batteryIcon28:
;demo_simple_8.c,234 :: 		character = batlv5[loopcounter];
0x0340	0x0824      	MOVF       _loopcounter, 0
0x0341	0x3E36      	ADDLW      _batlv5
0x0342	0x00F0      	MOVWF      R0
0x0343	0x3006      	MOVLW      hi_addr(_batlv5)
0x0344	0x1803      	BTFSC      STATUS, 0
0x0345	0x3E01      	ADDLW      1
0x0346	0x0725      	ADDWF      _loopcounter+1, 0
0x0347	0x00F1      	MOVWF      R0+1
0x0348	0x0870      	MOVF       R0, 0
0x0349	0x00E5      	MOVWF      ___DoICPAddr
0x034A	0x0871      	MOVF       R0+1, 0
0x034B	0x00E6      	MOVWF      ___DoICPAddr+1
0x034C	0x21D4      	CALL       _____DoICP
0x034D	0x118A      	BCF        PCLATH, 3
0x034E	0x120A      	BCF        PCLATH, 4
0x034F	0x00D9      	MOVWF      _character
;demo_simple_8.c,235 :: 		break;
0x0350	0x2B65      	GOTO       L_batteryIcon23
;demo_simple_8.c,236 :: 		}
L_batteryIcon22:
0x0351	0x0858      	MOVF       _batlv, 0
0x0352	0x3A01      	XORLW      1
0x0353	0x1903      	BTFSC      STATUS, 2
0x0354	0x2AFC      	GOTO       L_batteryIcon24
0x0355	0x0858      	MOVF       _batlv, 0
0x0356	0x3A02      	XORLW      2
0x0357	0x1903      	BTFSC      STATUS, 2
0x0358	0x2B0D      	GOTO       L_batteryIcon25
0x0359	0x0858      	MOVF       _batlv, 0
0x035A	0x3A03      	XORLW      3
0x035B	0x1903      	BTFSC      STATUS, 2
0x035C	0x2B1E      	GOTO       L_batteryIcon26
0x035D	0x0858      	MOVF       _batlv, 0
0x035E	0x3A04      	XORLW      4
0x035F	0x1903      	BTFSC      STATUS, 2
0x0360	0x2B2F      	GOTO       L_batteryIcon27
0x0361	0x0858      	MOVF       _batlv, 0
0x0362	0x3A05      	XORLW      5
0x0363	0x1903      	BTFSC      STATUS, 2
0x0364	0x2B40      	GOTO       L_batteryIcon28
L_batteryIcon23:
;demo_simple_8.c,237 :: 		Lcd_Chr_CP(character);
0x0365	0x0859      	MOVF       _character, 0
0x0366	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0367	0x20E1      	CALL       _Lcd_Chr_CP
;demo_simple_8.c,219 :: 		for (loopcounter = 0; loopcounter <= 7; loopcounter++){
0x0368	0x0824      	MOVF       _loopcounter, 0
0x0369	0x3E01      	ADDLW      1
0x036A	0x00F0      	MOVWF      R0
0x036B	0x3000      	MOVLW      0
0x036C	0x1803      	BTFSC      STATUS, 0
0x036D	0x3E01      	ADDLW      1
0x036E	0x0725      	ADDWF      _loopcounter+1, 0
0x036F	0x00F1      	MOVWF      R0+1
0x0370	0x0870      	MOVF       R0, 0
0x0371	0x00A4      	MOVWF      _loopcounter
0x0372	0x0871      	MOVF       R0+1, 0
0x0373	0x00A5      	MOVWF      _loopcounter+1
;demo_simple_8.c,238 :: 		}
0x0374	0x2AF3      	GOTO       L_batteryIcon19
L_batteryIcon20:
;demo_simple_8.c,239 :: 		Lcd_Cmd(_LCD_RETURN_HOME);
0x0375	0x3002      	MOVLW      2
0x0376	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0377	0x20A1      	CALL       _Lcd_Cmd
;demo_simple_8.c,240 :: 		Lcd_Chr(pos_row, pos_char, 0);
0x0378	0x0867      	MOVF       FARG_batteryIcon_pos_row, 0
0x0379	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x037A	0x0868      	MOVF       FARG_batteryIcon_pos_char, 0
0x037B	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x037C	0x01EB      	CLRF       FARG_Lcd_Chr_out_char
0x037D	0x20F7      	CALL       _Lcd_Chr
;demo_simple_8.c,241 :: 		}
0x037E	0x0008      	RETURN
; end of _batteryIcon
_doChecks:
;demo_simple_8.c,393 :: 		void doChecks(){
;demo_simple_8.c,394 :: 		if (acStatus != acNormal){
0x037F	0x1283      	BCF        STATUS, 5
0x0380	0x1303      	BCF        STATUS, 6
0x0381	0x083E      	MOVF       _acStatus, 0
0x0382	0x3A00      	XORLW      0
0x0383	0x1903      	BTFSC      STATUS, 2
0x0384	0x2B87      	GOTO       L_doChecks54
;demo_simple_8.c,395 :: 		mode = mode_inverter;
0x0385	0x01C2      	CLRF       _mode
;demo_simple_8.c,396 :: 		}
0x0386	0x2B8B      	GOTO       L_doChecks55
L_doChecks54:
;demo_simple_8.c,398 :: 		mode = mode_mains;
0x0387	0x3001      	MOVLW      1
0x0388	0x00C2      	MOVWF      _mode
;demo_simple_8.c,399 :: 		inverterState = inv_off;
0x0389	0x3003      	MOVLW      3
0x038A	0x00BF      	MOVWF      _inverterState
;demo_simple_8.c,400 :: 		}
L_doChecks55:
;demo_simple_8.c,402 :: 		if ((batteryState != batteryLow) & (overloadState == ovl_normal)){
0x038B	0x0826      	MOVF       _batteryState, 0
0x038C	0x3A02      	XORLW      2
0x038D	0x3001      	MOVLW      1
0x038E	0x1903      	BTFSC      STATUS, 2
0x038F	0x3000      	MOVLW      0
0x0390	0x00F1      	MOVWF      R1
0x0391	0x0864      	MOVF       _overloadState, 0
0x0392	0x3A00      	XORLW      0
0x0393	0x3001      	MOVLW      1
0x0394	0x1D03      	BTFSS      STATUS, 2
0x0395	0x3000      	MOVLW      0
0x0396	0x00F0      	MOVWF      R0
0x0397	0x0871      	MOVF       R1, 0
0x0398	0x05F0      	ANDWF      R0, 1
0x0399	0x1903      	BTFSC      STATUS, 2
0x039A	0x2BA2      	GOTO       L_doChecks56
;demo_simple_8.c,403 :: 		if (inverterSw == 0){         // inverter switch pressed
0x039B	0x1A86      	BTFSC      RB5_bit, 5
0x039C	0x2B9F      	GOTO       L_doChecks57
;demo_simple_8.c,404 :: 		inverterState = inv_normal;
0x039D	0x01BF      	CLRF       _inverterState
;demo_simple_8.c,405 :: 		}
0x039E	0x2BA1      	GOTO       L_doChecks58
L_doChecks57:
;demo_simple_8.c,407 :: 		inverterState = inv_off;
0x039F	0x3003      	MOVLW      3
0x03A0	0x00BF      	MOVWF      _inverterState
;demo_simple_8.c,408 :: 		}
L_doChecks58:
;demo_simple_8.c,409 :: 		}
0x03A1	0x2BAF      	GOTO       L_doChecks59
L_doChecks56:
;demo_simple_8.c,410 :: 		else if (batteryState == batteryLow){
0x03A2	0x0826      	MOVF       _batteryState, 0
0x03A3	0x3A02      	XORLW      2
0x03A4	0x1D03      	BTFSS      STATUS, 2
0x03A5	0x2BA9      	GOTO       L_doChecks60
;demo_simple_8.c,411 :: 		inverterState = inv_lowbattery;
0x03A6	0x3001      	MOVLW      1
0x03A7	0x00BF      	MOVWF      _inverterState
;demo_simple_8.c,412 :: 		}
0x03A8	0x2BAF      	GOTO       L_doChecks61
L_doChecks60:
;demo_simple_8.c,413 :: 		else if (overloadState == ovl_overload){
0x03A9	0x0864      	MOVF       _overloadState, 0
0x03AA	0x3A01      	XORLW      1
0x03AB	0x1D03      	BTFSS      STATUS, 2
0x03AC	0x2BAF      	GOTO       L_doChecks62
;demo_simple_8.c,414 :: 		inverterState = inv_overload;
0x03AD	0x3002      	MOVLW      2
0x03AE	0x00BF      	MOVWF      _inverterState
;demo_simple_8.c,415 :: 		}
L_doChecks62:
L_doChecks61:
L_doChecks59:
;demo_simple_8.c,417 :: 		if (inverterSw == 1){ // switch unpressed
0x03AF	0x1E86      	BTFSS      RB5_bit, 5
0x03B0	0x2BB3      	GOTO       L_doChecks63
;demo_simple_8.c,418 :: 		inverterState = inv_off;
0x03B1	0x3003      	MOVLW      3
0x03B2	0x00BF      	MOVWF      _inverterState
;demo_simple_8.c,419 :: 		}
L_doChecks63:
;demo_simple_8.c,421 :: 		if (mode == mode_mains){
0x03B3	0x0842      	MOVF       _mode, 0
0x03B4	0x3A01      	XORLW      1
0x03B5	0x1D03      	BTFSS      STATUS, 2
0x03B6	0x2C0F      	GOTO       L_doChecks64
;demo_simple_8.c,422 :: 		if (mainsStarted == 0){
0x03B7	0x0861      	MOVF       _mainsStarted, 0
0x03B8	0x3A00      	XORLW      0
0x03B9	0x1D03      	BTFSS      STATUS, 2
0x03BA	0x2C0E      	GOTO       L_doChecks65
;demo_simple_8.c,427 :: 		chargingEnabled = 0;
0x03BB	0x01A2      	CLRF       _chargingEnabled
0x03BC	0x01A3      	CLRF       _chargingEnabled+1
;demo_simple_8.c,430 :: 		TMR2IF_bit = 0; TMR2IE_bit = 0;
0x03BD	0x108C      	BCF        TMR2IF_bit, 1
0x03BE	0x1683      	BSF        STATUS, 5
0x03BF	0x108C      	BCF        TMR2IE_bit, 1
;demo_simple_8.c,431 :: 		TMR2 = 0;
0x03C0	0x1283      	BCF        STATUS, 5
0x03C1	0x0191      	CLRF       TMR2
;demo_simple_8.c,432 :: 		MOS1 = 0;
0x03C2	0x1307      	BCF        RC6_bit, 6
;demo_simple_8.c,433 :: 		MOS2 = 0;
0x03C3	0x1287      	BCF        RC5_bit, 5
;demo_simple_8.c,434 :: 		MOSdriveState = 0;
0x03C4	0x01AA      	CLRF       _MOSdriveState
;demo_simple_8.c,435 :: 		pwmStarted = 0;
0x03C5	0x01AD      	CLRF       _pwmStarted
;demo_simple_8.c,436 :: 		Triac = 0;
0x03C6	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,437 :: 		INTE_bit = 0;
0x03C7	0x120B      	BCF        INTE_bit, 4
;demo_simple_8.c,439 :: 		inverterState = inv_off;
0x03C8	0x3003      	MOVLW      3
0x03C9	0x00BF      	MOVWF      _inverterState
;demo_simple_8.c,441 :: 		delay_ms(20); // settling time to ensure everything is off
0x03CA	0x3082      	MOVLW      130
0x03CB	0x00FC      	MOVWF      R12
0x03CC	0x30DD      	MOVLW      221
0x03CD	0x00FD      	MOVWF      R13
L_doChecks66:
0x03CE	0x0BFD      	DECFSZ     R13, 1
0x03CF	0x2BCE      	GOTO       L_doChecks66
0x03D0	0x0BFC      	DECFSZ     R12, 1
0x03D1	0x2BCE      	GOTO       L_doChecks66
0x03D2	0x0000      	NOP
0x03D3	0x0000      	NOP
;demo_simple_8.c,442 :: 		outputRelay = 0;
0x03D4	0x1206      	BCF        RB4_bit, 4
;demo_simple_8.c,443 :: 		delay_ms(1000);
0x03D5	0x301A      	MOVLW      26
0x03D6	0x00FB      	MOVWF      R11
0x03D7	0x305E      	MOVLW      94
0x03D8	0x00FC      	MOVWF      R12
0x03D9	0x306E      	MOVLW      110
0x03DA	0x00FD      	MOVWF      R13
L_doChecks67:
0x03DB	0x0BFD      	DECFSZ     R13, 1
0x03DC	0x2BDB      	GOTO       L_doChecks67
0x03DD	0x0BFC      	DECFSZ     R12, 1
0x03DE	0x2BDB      	GOTO       L_doChecks67
0x03DF	0x0BFB      	DECFSZ     R11, 1
0x03E0	0x2BDB      	GOTO       L_doChecks67
0x03E1	0x0000      	NOP
;demo_simple_8.c,445 :: 		INTEDG_bit = 1; // rising edge
0x03E2	0x1683      	BSF        STATUS, 5
0x03E3	0x1701      	BSF        INTEDG_bit, 6
;demo_simple_8.c,446 :: 		INTE_bit = 1;
0x03E4	0x160B      	BSF        INTE_bit, 4
;demo_simple_8.c,447 :: 		INTF_bit = 0;
0x03E5	0x108B      	BCF        INTF_bit, 1
;demo_simple_8.c,448 :: 		mainsStarted = 1;
0x03E6	0x3001      	MOVLW      1
0x03E7	0x1283      	BCF        STATUS, 5
0x03E8	0x00E1      	MOVWF      _mainsStarted
;demo_simple_8.c,450 :: 		T2CON = 5;   // prescaler 1:4, t2 on
0x03E9	0x3005      	MOVLW      5
0x03EA	0x0092      	MOVWF      T2CON
;demo_simple_8.c,451 :: 		PR2 = 249;   // period = 200us, 50 steps
0x03EB	0x30F9      	MOVLW      249
0x03EC	0x1683      	BSF        STATUS, 5
0x03ED	0x0092      	MOVWF      PR2
;demo_simple_8.c,452 :: 		TMR2IF_bit = 0;
0x03EE	0x1283      	BCF        STATUS, 5
0x03EF	0x108C      	BCF        TMR2IF_bit, 1
;demo_simple_8.c,453 :: 		TMR2IE_bit = 1;
0x03F0	0x1683      	BSF        STATUS, 5
0x03F1	0x148C      	BSF        TMR2IE_bit, 1
;demo_simple_8.c,455 :: 		chargingDuty = 40;
0x03F2	0x3028      	MOVLW      40
0x03F3	0x1283      	BCF        STATUS, 5
0x03F4	0x00AE      	MOVWF      _chargingDuty
;demo_simple_8.c,456 :: 		chargingDuty_buffer = chargingDuty;
0x03F5	0x082E      	MOVF       _chargingDuty, 0
0x03F6	0x00B2      	MOVWF      _chargingDuty_buffer
0x03F7	0x01B3      	CLRF       _chargingDuty_buffer+1
;demo_simple_8.c,458 :: 		cdCounter = 0;
0x03F8	0x01B4      	CLRF       _cdCounter
;demo_simple_8.c,460 :: 		Triac = 0;
0x03F9	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,462 :: 		hicutreached = 0;
0x03FA	0x01BD      	CLRF       _hicutreached
;demo_simple_8.c,463 :: 		vShunt = 0;
0x03FB	0x01BB      	CLRF       _vShunt
0x03FC	0x01BC      	CLRF       _vShunt+1
;demo_simple_8.c,464 :: 		chgDelay = 0;
0x03FD	0x01B5      	CLRF       _chgDelay
;demo_simple_8.c,466 :: 		TMR1H = 0; TMR1L = 0;
0x03FE	0x018F      	CLRF       TMR1H
0x03FF	0x018E      	CLRF       TMR1L
;demo_simple_8.c,467 :: 		T1CON = 0x31;  // period ~105ms, t1 on
0x0400	0x3031      	MOVLW      49
0x0401	0x0090      	MOVWF      T1CON
;demo_simple_8.c,468 :: 		TMR1IF_bit = 0;
0x0402	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,470 :: 		firing = 100; // should never start
0x0403	0x3064      	MOVLW      100
0x0404	0x00AF      	MOVWF      _firing
;demo_simple_8.c,471 :: 		chargingEnabled = 0;
0x0405	0x01A2      	CLRF       _chargingEnabled
0x0406	0x01A3      	CLRF       _chargingEnabled+1
;demo_simple_8.c,473 :: 		delayCounter = 0;
0x0407	0x01B0      	CLRF       _delayCounter
;demo_simple_8.c,474 :: 		delayCounter2 = 0;
0x0408	0x01B1      	CLRF       _delayCounter2
;demo_simple_8.c,476 :: 		chlv = 0;
0x0409	0x01D7      	CLRF       _chlv
;demo_simple_8.c,478 :: 		ovThreshold = overloadThreshold;
0x040A	0x301B      	MOVLW      27
0x040B	0x00B9      	MOVWF      _ovThreshold
0x040C	0x3000      	MOVLW      0
0x040D	0x00BA      	MOVWF      _ovThreshold+1
;demo_simple_8.c,480 :: 		}
L_doChecks65:
;demo_simple_8.c,482 :: 		}
0x040E	0x2C42      	GOTO       L_doChecks68
L_doChecks64:
;demo_simple_8.c,483 :: 		else if (mode == mode_inverter){
0x040F	0x0842      	MOVF       _mode, 0
0x0410	0x3A00      	XORLW      0
0x0411	0x1D03      	BTFSS      STATUS, 2
0x0412	0x2C42      	GOTO       L_doChecks69
;demo_simple_8.c,484 :: 		cdCounter = 0;
0x0413	0x01B4      	CLRF       _cdCounter
;demo_simple_8.c,485 :: 		Triac = 0;
0x0414	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,486 :: 		mainsStarted = 0;
0x0415	0x01E1      	CLRF       _mainsStarted
;demo_simple_8.c,487 :: 		if (inverterState == inv_normal){
0x0416	0x083F      	MOVF       _inverterState, 0
0x0417	0x3A00      	XORLW      0
0x0418	0x1D03      	BTFSS      STATUS, 2
0x0419	0x2C23      	GOTO       L_doChecks70
;demo_simple_8.c,488 :: 		if (pwmStarted == 0){
0x041A	0x082D      	MOVF       _pwmStarted, 0
0x041B	0x3A00      	XORLW      0
0x041C	0x1D03      	BTFSS      STATUS, 2
0x041D	0x2C22      	GOTO       L_doChecks71
;demo_simple_8.c,489 :: 		initializePWM();
0x041E	0x21B6      	CALL       _initializePWM
;demo_simple_8.c,490 :: 		pwmStarted = 1;
0x041F	0x3001      	MOVLW      1
0x0420	0x00AD      	MOVWF      _pwmStarted
;demo_simple_8.c,491 :: 		outputRelay = 1;
0x0421	0x1606      	BSF        RB4_bit, 4
;demo_simple_8.c,492 :: 		}
L_doChecks71:
;demo_simple_8.c,493 :: 		}
0x0422	0x2C42      	GOTO       L_doChecks72
L_doChecks70:
;demo_simple_8.c,496 :: 		TMR2IF_bit = 0; TMR2IE_bit = 0;
0x0423	0x108C      	BCF        TMR2IF_bit, 1
0x0424	0x1683      	BSF        STATUS, 5
0x0425	0x108C      	BCF        TMR2IE_bit, 1
;demo_simple_8.c,497 :: 		TMR2 = 0;
0x0426	0x1283      	BCF        STATUS, 5
0x0427	0x0191      	CLRF       TMR2
;demo_simple_8.c,498 :: 		MOS1 = 0;
0x0428	0x1307      	BCF        RC6_bit, 6
;demo_simple_8.c,499 :: 		MOS2 = 0;
0x0429	0x1287      	BCF        RC5_bit, 5
;demo_simple_8.c,500 :: 		MOSdriveState = 0;
0x042A	0x01AA      	CLRF       _MOSdriveState
;demo_simple_8.c,501 :: 		delay_ms(20);
0x042B	0x3082      	MOVLW      130
0x042C	0x00FC      	MOVWF      R12
0x042D	0x30DD      	MOVLW      221
0x042E	0x00FD      	MOVWF      R13
L_doChecks73:
0x042F	0x0BFD      	DECFSZ     R13, 1
0x0430	0x2C2F      	GOTO       L_doChecks73
0x0431	0x0BFC      	DECFSZ     R12, 1
0x0432	0x2C2F      	GOTO       L_doChecks73
0x0433	0x0000      	NOP
0x0434	0x0000      	NOP
;demo_simple_8.c,502 :: 		outputRelay = 0;
0x0435	0x1206      	BCF        RB4_bit, 4
;demo_simple_8.c,503 :: 		pwmStarted = 0;
0x0436	0x01AD      	CLRF       _pwmStarted
;demo_simple_8.c,504 :: 		Triac = 0;
0x0437	0x1186      	BCF        RB3_bit, 3
;demo_simple_8.c,505 :: 		INTE_bit = 0;
0x0438	0x120B      	BCF        INTE_bit, 4
;demo_simple_8.c,507 :: 		if (inverterState == inv_off){
0x0439	0x083F      	MOVF       _inverterState, 0
0x043A	0x3A03      	XORLW      3
0x043B	0x1D03      	BTFSS      STATUS, 2
0x043C	0x2C42      	GOTO       L_doChecks74
;demo_simple_8.c,508 :: 		batteryState = batteryNormal;
0x043D	0x3003      	MOVLW      3
0x043E	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,509 :: 		overloadState = ovl_normal;
0x043F	0x01E4      	CLRF       _overloadState
;demo_simple_8.c,510 :: 		vShunt = 0;
0x0440	0x01BB      	CLRF       _vShunt
0x0441	0x01BC      	CLRF       _vShunt+1
;demo_simple_8.c,511 :: 		}
L_doChecks74:
;demo_simple_8.c,512 :: 		}
L_doChecks72:
;demo_simple_8.c,513 :: 		}
L_doChecks69:
L_doChecks68:
;demo_simple_8.c,514 :: 		}
0x0442	0x0008      	RETURN
; end of _doChecks
_getBatteryVoltage:
;demo_simple_8.c,346 :: 		void getBatteryVoltage(){
;demo_simple_8.c,351 :: 		ADCON1 = 0;
0x0443	0x1683      	BSF        STATUS, 5
0x0444	0x1303      	BCF        STATUS, 6
0x0445	0x019F      	CLRF       ADCON1
;demo_simple_8.c,353 :: 		vBat = 0;
0x0446	0x1283      	BCF        STATUS, 5
0x0447	0x01C0      	CLRF       _vBat
0x0448	0x01C1      	CLRF       _vBat+1
;demo_simple_8.c,354 :: 		ADCON0 = (ADCON0 & 0xC5) | (batteryCHANNEL << 3);
0x0449	0x30C5      	MOVLW      197
0x044A	0x059F      	ANDWF      ADCON0, 1
;demo_simple_8.c,355 :: 		for (counter = 0; counter < 8; counter++){
0x044B	0x01B8      	CLRF       _counter
L_getBatteryVoltage40:
0x044C	0x3008      	MOVLW      8
0x044D	0x0238      	SUBWF      _counter, 0
0x044E	0x1803      	BTFSC      STATUS, 0
0x044F	0x2C5D      	GOTO       L_getBatteryVoltage41
;demo_simple_8.c,356 :: 		vBat = vBat + ADC_Get_Sample(batteryCHANNEL);
0x0450	0x01A1      	CLRF       FARG_ADC_Get_Sample_channel
0x0451	0x2158      	CALL       _ADC_Get_Sample
0x0452	0x0870      	MOVF       R0, 0
0x0453	0x07C0      	ADDWF      _vBat, 1
0x0454	0x0871      	MOVF       R0+1, 0
0x0455	0x1803      	BTFSC      STATUS, 0
0x0456	0x3E01      	ADDLW      1
0x0457	0x07C1      	ADDWF      _vBat+1, 1
;demo_simple_8.c,355 :: 		for (counter = 0; counter < 8; counter++){
0x0458	0x0A38      	INCF       _counter, 0
0x0459	0x00F0      	MOVWF      R0
0x045A	0x0870      	MOVF       R0, 0
0x045B	0x00B8      	MOVWF      _counter
;demo_simple_8.c,357 :: 		}
0x045C	0x2C4C      	GOTO       L_getBatteryVoltage40
L_getBatteryVoltage41:
;demo_simple_8.c,359 :: 		vBat = vBat >> 3; // 8/8 = 1
0x045D	0x0840      	MOVF       _vBat, 0
0x045E	0x00F0      	MOVWF      R0
0x045F	0x0841      	MOVF       _vBat+1, 0
0x0460	0x00F1      	MOVWF      R0+1
0x0461	0x0CF1      	RRF        R0+1, 1
0x0462	0x0CF0      	RRF        R0, 1
0x0463	0x13F1      	BCF        R0+1, 7
0x0464	0x0CF1      	RRF        R0+1, 1
0x0465	0x0CF0      	RRF        R0, 1
0x0466	0x13F1      	BCF        R0+1, 7
0x0467	0x0CF1      	RRF        R0+1, 1
0x0468	0x0CF0      	RRF        R0, 1
0x0469	0x13F1      	BCF        R0+1, 7
0x046A	0x0870      	MOVF       R0, 0
0x046B	0x00C0      	MOVWF      _vBat
0x046C	0x0871      	MOVF       R0+1, 0
0x046D	0x00C1      	MOVWF      _vBat+1
;demo_simple_8.c,363 :: 		if ((batteryState != batteryLow) | (mode == mode_mains)){
0x046E	0x0826      	MOVF       _batteryState, 0
0x046F	0x3A02      	XORLW      2
0x0470	0x3001      	MOVLW      1
0x0471	0x1903      	BTFSC      STATUS, 2
0x0472	0x3000      	MOVLW      0
0x0473	0x00F1      	MOVWF      R1
0x0474	0x0842      	MOVF       _mode, 0
0x0475	0x3A01      	XORLW      1
0x0476	0x3001      	MOVLW      1
0x0477	0x1D03      	BTFSS      STATUS, 2
0x0478	0x3000      	MOVLW      0
0x0479	0x00F0      	MOVWF      R0
0x047A	0x0871      	MOVF       R1, 0
0x047B	0x04F0      	IORWF      R0, 1
0x047C	0x1903      	BTFSC      STATUS, 2
0x047D	0x2CB7      	GOTO       L_getBatteryVoltage43
;demo_simple_8.c,364 :: 		if (vBat < bat_low){
0x047E	0x3000      	MOVLW      0
0x047F	0x0241      	SUBWF      _vBat+1, 0
0x0480	0x1D03      	BTFSS      STATUS, 2
0x0481	0x2C84      	GOTO       L__getBatteryVoltage179
0x0482	0x305F      	MOVLW      95
0x0483	0x0240      	SUBWF      _vBat, 0
L__getBatteryVoltage179:
0x0484	0x1803      	BTFSC      STATUS, 0
0x0485	0x2C8A      	GOTO       L_getBatteryVoltage44
;demo_simple_8.c,365 :: 		batteryState = batteryLow;
0x0486	0x3002      	MOVLW      2
0x0487	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,366 :: 		hicutreached = 0;
0x0488	0x01BD      	CLRF       _hicutreached
;demo_simple_8.c,367 :: 		}
0x0489	0x2CB7      	GOTO       L_getBatteryVoltage45
L_getBatteryVoltage44:
;demo_simple_8.c,368 :: 		else if (vBat < bat_warning){
0x048A	0x3000      	MOVLW      0
0x048B	0x0241      	SUBWF      _vBat+1, 0
0x048C	0x1D03      	BTFSS      STATUS, 2
0x048D	0x2C90      	GOTO       L__getBatteryVoltage180
0x048E	0x3069      	MOVLW      105
0x048F	0x0240      	SUBWF      _vBat, 0
L__getBatteryVoltage180:
0x0490	0x1803      	BTFSC      STATUS, 0
0x0491	0x2C96      	GOTO       L_getBatteryVoltage46
;demo_simple_8.c,369 :: 		batteryState = batteryWarning;
0x0492	0x3001      	MOVLW      1
0x0493	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,370 :: 		hicutreached = 0;
0x0494	0x01BD      	CLRF       _hicutreached
;demo_simple_8.c,371 :: 		}
0x0495	0x2CB7      	GOTO       L_getBatteryVoltage47
L_getBatteryVoltage46:
;demo_simple_8.c,372 :: 		else if (vBat > bat_high){
0x0496	0x0841      	MOVF       _vBat+1, 0
0x0497	0x3C00      	SUBLW      0
0x0498	0x1D03      	BTFSS      STATUS, 2
0x0499	0x2C9C      	GOTO       L__getBatteryVoltage181
0x049A	0x0840      	MOVF       _vBat, 0
0x049B	0x3C8E      	SUBLW      142
L__getBatteryVoltage181:
0x049C	0x1803      	BTFSC      STATUS, 0
0x049D	0x2CA3      	GOTO       L_getBatteryVoltage48
;demo_simple_8.c,373 :: 		hicutreached = 1;
0x049E	0x3001      	MOVLW      1
0x049F	0x00BD      	MOVWF      _hicutreached
;demo_simple_8.c,374 :: 		batteryState = batteryHigh;
0x04A0	0x3004      	MOVLW      4
0x04A1	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,375 :: 		}
0x04A2	0x2CB7      	GOTO       L_getBatteryVoltage49
L_getBatteryVoltage48:
;demo_simple_8.c,376 :: 		else if (vBat > bat_rechg){
0x04A3	0x0841      	MOVF       _vBat+1, 0
0x04A4	0x3C00      	SUBLW      0
0x04A5	0x1D03      	BTFSS      STATUS, 2
0x04A6	0x2CA9      	GOTO       L__getBatteryVoltage182
0x04A7	0x0840      	MOVF       _vBat, 0
0x04A8	0x3C7D      	SUBLW      125
L__getBatteryVoltage182:
0x04A9	0x1803      	BTFSC      STATUS, 0
0x04AA	0x2CB4      	GOTO       L_getBatteryVoltage50
;demo_simple_8.c,377 :: 		if (hicutreached){
0x04AB	0x083D      	MOVF       _hicutreached, 0
0x04AC	0x1903      	BTFSC      STATUS, 2
0x04AD	0x2CB1      	GOTO       L_getBatteryVoltage51
;demo_simple_8.c,378 :: 		batteryState = batteryHigh;
0x04AE	0x3004      	MOVLW      4
0x04AF	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,379 :: 		}
0x04B0	0x2CB3      	GOTO       L_getBatteryVoltage52
L_getBatteryVoltage51:
;demo_simple_8.c,381 :: 		batteryState = batteryPause;
0x04B1	0x3005      	MOVLW      5
0x04B2	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,382 :: 		}
L_getBatteryVoltage52:
;demo_simple_8.c,383 :: 		}
0x04B3	0x2CB7      	GOTO       L_getBatteryVoltage53
L_getBatteryVoltage50:
;demo_simple_8.c,385 :: 		batteryState = batteryNormal;
0x04B4	0x3003      	MOVLW      3
0x04B5	0x00A6      	MOVWF      _batteryState
;demo_simple_8.c,386 :: 		hicutreached = 0;
0x04B6	0x01BD      	CLRF       _hicutreached
;demo_simple_8.c,387 :: 		}
L_getBatteryVoltage53:
L_getBatteryVoltage49:
L_getBatteryVoltage47:
L_getBatteryVoltage45:
;demo_simple_8.c,388 :: 		}
L_getBatteryVoltage43:
;demo_simple_8.c,390 :: 		ADCON1 = 7;
0x04B7	0x3007      	MOVLW      7
0x04B8	0x1683      	BSF        STATUS, 5
0x04B9	0x009F      	MOVWF      ADCON1
;demo_simple_8.c,391 :: 		}
0x04BA	0x0008      	RETURN
; end of _getBatteryVoltage
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x04BB	0x1683      	BSF        STATUS, 5
0x04BC	0x1303      	BCF        STATUS, 6
0x04BD	0x1386      	BCF        LCD_EN_Direction, BitPos(LCD_EN_Direction+0)
;__Lib_Lcd.c,87 :: 		
0x04BE	0x1207      	BCF        LCD_RS_Direction, BitPos(LCD_RS_Direction+0)
;__Lib_Lcd.c,88 :: 		
0x04BF	0x1187      	BCF        LCD_D4_Direction, BitPos(LCD_D4_Direction+0)
;__Lib_Lcd.c,89 :: 		
0x04C0	0x1107      	BCF        LCD_D5_Direction, BitPos(LCD_D5_Direction+0)
;__Lib_Lcd.c,90 :: 		
0x04C1	0x1087      	BCF        LCD_D6_Direction, BitPos(LCD_D6_Direction+0)
;__Lib_Lcd.c,91 :: 		
0x04C2	0x1007      	BCF        LCD_D7_Direction, BitPos(LCD_D7_Direction+0)
;__Lib_Lcd.c,93 :: 		
0x04C3	0x1283      	BCF        STATUS, 5
0x04C4	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,94 :: 		
0x04C5	0x1207      	BCF        LCD_RS, BitPos(LCD_RS+0)
;__Lib_Lcd.c,95 :: 		
0x04C6	0x1007      	BCF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,96 :: 		
0x04C7	0x1087      	BCF        LCD_D6, BitPos(LCD_D6+0)
;__Lib_Lcd.c,97 :: 		
0x04C8	0x1107      	BCF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,98 :: 		
0x04C9	0x1187      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,100 :: 		
0x04CA	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x04CB	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x04CC	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x04CD	0x1507      	BSF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,106 :: 		
0x04CE	0x1587      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,107 :: 		
0x04CF	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,108 :: 		
0x04D0	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x04D1	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,110 :: 		
0x04D2	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x04D3	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,113 :: 		
0x04D4	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x04D5	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,115 :: 		
0x04D6	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x04D7	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,118 :: 		
0x04D8	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x04D9	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,120 :: 		
0x04DA	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x04DB	0x1187      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,124 :: 		
0x04DC	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,125 :: 		
0x04DD	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x04DE	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,127 :: 		
0x04DF	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x04E0	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,131 :: 		
0x04E1	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x04E2	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,134 :: 		
0x04E3	0x1107      	BCF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,135 :: 		
0x04E4	0x1407      	BSF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,136 :: 		
0x04E5	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,137 :: 		
0x04E6	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x04E7	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,139 :: 		
0x04E8	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x04E9	0x1007      	BCF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,143 :: 		
0x04EA	0x1587      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,144 :: 		
0x04EB	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,145 :: 		
0x04EC	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x04ED	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,148 :: 		
0x04EE	0x1187      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,149 :: 		
0x04EF	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,150 :: 		
0x04F0	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x04F1	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,152 :: 		
0x04F2	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x04F3	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,156 :: 		
0x04F4	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x04F5	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,159 :: 		
0x04F6	0x1587      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,160 :: 		
0x04F7	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,161 :: 		
0x04F8	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x04F9	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,163 :: 		
0x04FA	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x04FB	0x1187      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,167 :: 		
0x04FC	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,168 :: 		
0x04FD	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x04FE	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,171 :: 		
0x04FF	0x1407      	BSF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,172 :: 		
0x0500	0x1487      	BSF        LCD_D6, BitPos(LCD_D6+0)
;__Lib_Lcd.c,173 :: 		
0x0501	0x1507      	BSF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,174 :: 		
0x0502	0x1587      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,175 :: 		
0x0503	0x1786      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,176 :: 		
0x0504	0x207F      	CALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x0505	0x1386      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,179 :: 		
0x0506	0x2085      	CALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x0507	0x1450      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,182 :: 		
0x0508	0x0008      	RETURN
; end of _Lcd_Init
___CC2DW:
;__Lib_System.c,24 :: 		
;__Lib_System.c,27 :: 		
_CC2D_Loop1:
;__Lib_System.c,29 :: 		
0x0509	0x21D4      	CALL       _____DoICP
0x050A	0x118A      	BCF        PCLATH, 3
0x050B	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,31 :: 		
0x050C	0x0080      	MOVWF      INDF
;__Lib_System.c,32 :: 		
0x050D	0x0A84      	INCF       FSR, 1
;__Lib_System.c,33 :: 		
0x050E	0x0AE5      	INCF       ___DoICPAddr, 1
;__Lib_System.c,35 :: 		
0x050F	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,36 :: 		
0x0510	0x0AE6      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,37 :: 		
0x0511	0x03F0      	DECF       R0, 1
;__Lib_System.c,39 :: 		
0x0512	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,40 :: 		
0x0513	0x2D09      	GOTO       _CC2D_Loop1
;__Lib_System.c,42 :: 		
0x0514	0x0008      	RETURN
; end of ___CC2DW
_numToOne:
;demo_simple_8.c,585 :: 		void numToOne(){
;demo_simple_8.c,586 :: 		hundreds = num / 100 + 48;
0x0515	0x3064      	MOVLW      100
0x0516	0x1283      	BCF        STATUS, 5
0x0517	0x1303      	BCF        STATUS, 6
0x0518	0x00F4      	MOVWF      R4
0x0519	0x3000      	MOVLW      0
0x051A	0x00F5      	MOVWF      R4+1
0x051B	0x0855      	MOVF       _num, 0
0x051C	0x00F0      	MOVWF      R0
0x051D	0x0856      	MOVF       _num+1, 0
0x051E	0x00F1      	MOVWF      R0+1
0x051F	0x2199      	CALL       _Div_16x16_U
0x0520	0x3030      	MOVLW      48
0x0521	0x0770      	ADDWF      R0, 0
0x0522	0x00D4      	MOVWF      _hundreds
;demo_simple_8.c,587 :: 		tens = ( num / 10 ) % 10 + 48;
0x0523	0x300A      	MOVLW      10
0x0524	0x00F4      	MOVWF      R4
0x0525	0x3000      	MOVLW      0
0x0526	0x00F5      	MOVWF      R4+1
0x0527	0x0855      	MOVF       _num, 0
0x0528	0x00F0      	MOVWF      R0
0x0529	0x0856      	MOVF       _num+1, 0
0x052A	0x00F1      	MOVWF      R0+1
0x052B	0x2199      	CALL       _Div_16x16_U
0x052C	0x300A      	MOVLW      10
0x052D	0x00F4      	MOVWF      R4
0x052E	0x3000      	MOVLW      0
0x052F	0x00F5      	MOVWF      R4+1
0x0530	0x2199      	CALL       _Div_16x16_U
0x0531	0x0878      	MOVF       R8, 0
0x0532	0x00F0      	MOVWF      R0
0x0533	0x0879      	MOVF       R8+1, 0
0x0534	0x00F1      	MOVWF      R0+1
0x0535	0x3030      	MOVLW      48
0x0536	0x0770      	ADDWF      R0, 0
0x0537	0x00DE      	MOVWF      _tens
;demo_simple_8.c,588 :: 		ones = num % 10 + 48;
0x0538	0x300A      	MOVLW      10
0x0539	0x00F4      	MOVWF      R4
0x053A	0x3000      	MOVLW      0
0x053B	0x00F5      	MOVWF      R4+1
0x053C	0x0855      	MOVF       _num, 0
0x053D	0x00F0      	MOVWF      R0
0x053E	0x0856      	MOVF       _num+1, 0
0x053F	0x00F1      	MOVWF      R0+1
0x0540	0x2199      	CALL       _Div_16x16_U
0x0541	0x0878      	MOVF       R8, 0
0x0542	0x00F0      	MOVWF      R0
0x0543	0x0879      	MOVF       R8+1, 0
0x0544	0x00F1      	MOVWF      R0+1
0x0545	0x3030      	MOVLW      48
0x0546	0x0770      	ADDWF      R0, 0
0x0547	0x00DF      	MOVWF      _ones
;demo_simple_8.c,589 :: 		}
0x0548	0x0008      	RETURN
; end of _numToOne
_getMainsVoltage:
;demo_simple_8.c,295 :: 		void getMainsVoltage(){
;demo_simple_8.c,306 :: 		ADCON1 = 0;
0x0549	0x1683      	BSF        STATUS, 5
0x054A	0x1303      	BCF        STATUS, 6
0x054B	0x019F      	CLRF       ADCON1
;demo_simple_8.c,307 :: 		ADCON0 = (ADCON0 & 0xC5) | (mainsCHANNEL << 3);
0x054C	0x30C5      	MOVLW      197
0x054D	0x1283      	BCF        STATUS, 5
0x054E	0x051F      	ANDWF      ADCON0, 0
0x054F	0x00F0      	MOVWF      R0
0x0550	0x3010      	MOVLW      16
0x0551	0x0470      	IORWF      R0, 0
0x0552	0x009F      	MOVWF      ADCON0
;demo_simple_8.c,309 :: 		vAc = 0;
0x0553	0x01DB      	CLRF       _vAc
0x0554	0x01DC      	CLRF       _vAc+1
;demo_simple_8.c,310 :: 		for (counter = 0; counter < 8; counter++){
0x0555	0x01B8      	CLRF       _counter
L_getMainsVoltage29:
0x0556	0x3008      	MOVLW      8
0x0557	0x0238      	SUBWF      _counter, 0
0x0558	0x1803      	BTFSC      STATUS, 0
0x0559	0x2D68      	GOTO       L_getMainsVoltage30
;demo_simple_8.c,311 :: 		vAc = vAc + ADC_Get_Sample(mainsCHANNEL);
0x055A	0x3002      	MOVLW      2
0x055B	0x00A1      	MOVWF      FARG_ADC_Get_Sample_channel
0x055C	0x2158      	CALL       _ADC_Get_Sample
0x055D	0x0870      	MOVF       R0, 0
0x055E	0x07DB      	ADDWF      _vAc, 1
0x055F	0x0871      	MOVF       R0+1, 0
0x0560	0x1803      	BTFSC      STATUS, 0
0x0561	0x3E01      	ADDLW      1
0x0562	0x07DC      	ADDWF      _vAc+1, 1
;demo_simple_8.c,310 :: 		for (counter = 0; counter < 8; counter++){
0x0563	0x0A38      	INCF       _counter, 0
0x0564	0x00F0      	MOVWF      R0
0x0565	0x0870      	MOVF       R0, 0
0x0566	0x00B8      	MOVWF      _counter
;demo_simple_8.c,312 :: 		}
0x0567	0x2D56      	GOTO       L_getMainsVoltage29
L_getMainsVoltage30:
;demo_simple_8.c,314 :: 		vAc = vAc >> 3; // 8/8 = 1
0x0568	0x085B      	MOVF       _vAc, 0
0x0569	0x00F0      	MOVWF      R0
0x056A	0x085C      	MOVF       _vAc+1, 0
0x056B	0x00F1      	MOVWF      R0+1
0x056C	0x0CF1      	RRF        R0+1, 1
0x056D	0x0CF0      	RRF        R0, 1
0x056E	0x13F1      	BCF        R0+1, 7
0x056F	0x0CF1      	RRF        R0+1, 1
0x0570	0x0CF0      	RRF        R0, 1
0x0571	0x13F1      	BCF        R0+1, 7
0x0572	0x0CF1      	RRF        R0+1, 1
0x0573	0x0CF0      	RRF        R0, 1
0x0574	0x13F1      	BCF        R0+1, 7
0x0575	0x0870      	MOVF       R0, 0
0x0576	0x00DB      	MOVWF      _vAc
0x0577	0x0871      	MOVF       R0+1, 0
0x0578	0x00DC      	MOVWF      _vAc+1
;demo_simple_8.c,316 :: 		if (acStatus == acLow){
0x0579	0x083E      	MOVF       _acStatus, 0
0x057A	0x3A01      	XORLW      1
0x057B	0x1D03      	BTFSS      STATUS, 2
0x057C	0x2D80      	GOTO       L_getMainsVoltage32
;demo_simple_8.c,317 :: 		ac_low = acLowLevel + hysteresis;
0x057D	0x3076      	MOVLW      118
0x057E	0x00C6      	MOVWF      _ac_low
;demo_simple_8.c,318 :: 		}
0x057F	0x2D82      	GOTO       L_getMainsVoltage33
L_getMainsVoltage32:
;demo_simple_8.c,320 :: 		ac_low = acLowLevel;
0x0580	0x3072      	MOVLW      114
0x0581	0x00C6      	MOVWF      _ac_low
;demo_simple_8.c,321 :: 		}
L_getMainsVoltage33:
;demo_simple_8.c,323 :: 		if (acStatus == acHigh){
0x0582	0x083E      	MOVF       _acStatus, 0
0x0583	0x3A02      	XORLW      2
0x0584	0x1D03      	BTFSS      STATUS, 2
0x0585	0x2D8A      	GOTO       L_getMainsVoltage34
;demo_simple_8.c,324 :: 		ac_high = acHighLevel - hysteresis;
0x0586	0x30D3      	MOVLW      211
0x0587	0x00CB      	MOVWF      _ac_high
0x0588	0x01CC      	CLRF       _ac_high+1
;demo_simple_8.c,325 :: 		}
0x0589	0x2D8D      	GOTO       L_getMainsVoltage35
L_getMainsVoltage34:
;demo_simple_8.c,327 :: 		ac_high = acHighLevel;
0x058A	0x30D7      	MOVLW      215
0x058B	0x00CB      	MOVWF      _ac_high
0x058C	0x01CC      	CLRF       _ac_high+1
;demo_simple_8.c,328 :: 		}
L_getMainsVoltage35:
;demo_simple_8.c,330 :: 		if (vAc < ac_low){
0x058D	0x3000      	MOVLW      0
0x058E	0x025C      	SUBWF      _vAc+1, 0
0x058F	0x1D03      	BTFSS      STATUS, 2
0x0590	0x2D93      	GOTO       L__getMainsVoltage177
0x0591	0x0846      	MOVF       _ac_low, 0
0x0592	0x025B      	SUBWF      _vAc, 0
L__getMainsVoltage177:
0x0593	0x1803      	BTFSC      STATUS, 0
0x0594	0x2D98      	GOTO       L_getMainsVoltage36
;demo_simple_8.c,331 :: 		acStatus = acLow;
0x0595	0x3001      	MOVLW      1
0x0596	0x00BE      	MOVWF      _acStatus
;demo_simple_8.c,332 :: 		}
0x0597	0x2DA4      	GOTO       L_getMainsVoltage37
L_getMainsVoltage36:
;demo_simple_8.c,333 :: 		else if (vAc > ac_high){
0x0598	0x085C      	MOVF       _vAc+1, 0
0x0599	0x024C      	SUBWF      _ac_high+1, 0
0x059A	0x1D03      	BTFSS      STATUS, 2
0x059B	0x2D9E      	GOTO       L__getMainsVoltage178
0x059C	0x085B      	MOVF       _vAc, 0
0x059D	0x024B      	SUBWF      _ac_high, 0
L__getMainsVoltage178:
0x059E	0x1803      	BTFSC      STATUS, 0
0x059F	0x2DA3      	GOTO       L_getMainsVoltage38
;demo_simple_8.c,334 :: 		acStatus = acHigh;
0x05A0	0x3002      	MOVLW      2
0x05A1	0x00BE      	MOVWF      _acStatus
;demo_simple_8.c,335 :: 		}
0x05A2	0x2DA4      	GOTO       L_getMainsVoltage39
L_getMainsVoltage38:
;demo_simple_8.c,337 :: 		acStatus = acNormal;
0x05A3	0x01BE      	CLRF       _acStatus
;demo_simple_8.c,338 :: 		}
L_getMainsVoltage39:
L_getMainsVoltage37:
;demo_simple_8.c,342 :: 		ADCON1 = 7;
0x05A4	0x3007      	MOVLW      7
0x05A5	0x1683      	BSF        STATUS, 5
0x05A6	0x009F      	MOVWF      ADCON1
;demo_simple_8.c,344 :: 		}
0x05A7	0x0008      	RETURN
; end of _getMainsVoltage
_Mul_8x8_U:
;__Lib_Math.c,103 :: 		
;__Lib_Math.c,108 :: 		
0x05A8	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,109 :: 		
0x05A9	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,110 :: 		
0x05AA	0x0870      	MOVF       R0, 0
;__Lib_Math.c,111 :: 		
0x05AB	0x00F1      	MOVWF      R1
;__Lib_Math.c,112 :: 		
0x05AC	0x01F0      	CLRF       R0
;__Lib_Math.c,113 :: 		
0x05AD	0x3008      	MOVLW      8
;__Lib_Math.c,114 :: 		
0x05AE	0x00FC      	MOVWF      R12
;__Lib_Math.c,115 :: 		
0x05AF	0x0871      	MOVF       R1, 0
;__Lib_Math.c,116 :: 		
0x05B0	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,117 :: 		
0x05B1	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,118 :: 		
0x05B2	0x2DB7      	GOTO       $+5
;__Lib_Math.c,119 :: 		
0x05B3	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,120 :: 		
0x05B4	0x2DB0      	GOTO       $-4
;__Lib_Math.c,121 :: 		
0x05B5	0x01F1      	CLRF       R1
;__Lib_Math.c,122 :: 		
0x05B6	0x3400      	RETLW      0
;__Lib_Math.c,123 :: 		
0x05B7	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,124 :: 		
0x05B8	0x2DBC      	GOTO       $+4
;__Lib_Math.c,125 :: 		
0x05B9	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,126 :: 		
0x05BA	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,127 :: 		
0x05BB	0x07F1      	ADDWF      R1, 1
;__Lib_Math.c,128 :: 		
0x05BC	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,129 :: 		
0x05BD	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,130 :: 		
0x05BE	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,131 :: 		
0x05BF	0x2DB9      	GOTO       $-6
;__Lib_Math.c,133 :: 		
;__Lib_Math.c,134 :: 		
0x05C0	0x0008      	RETURN
; end of _Mul_8x8_U
_Div_16x16_S:
;__Lib_Math.c,479 :: 		
;__Lib_Math.c,487 :: 		
0x05C1	0x1283      	BCF        STATUS, 5
0x05C2	0x1303      	BCF        STATUS, 6
0x05C3	0x0874      	MOVF       R4, 0
0x05C4	0x3A00      	XORLW      0
0x05C5	0x1D03      	BTFSS      STATUS, 2
0x05C6	0x2DD0      	GOTO       L_Div_16x16_S0
;__Lib_Math.c,488 :: 		
0x05C7	0x0875      	MOVF       R5, 0
0x05C8	0x3A00      	XORLW      0
0x05C9	0x1D03      	BTFSS      STATUS, 2
0x05CA	0x2DD0      	GOTO       L_Div_16x16_S1
;__Lib_Math.c,489 :: 		
0x05CB	0x30FF      	MOVLW      255
0x05CC	0x00F0      	MOVWF      R0
;__Lib_Math.c,490 :: 		
0x05CD	0x307F      	MOVLW      127
0x05CE	0x00F1      	MOVWF      R1
;__Lib_Math.c,491 :: 		
0x05CF	0x0008      	RETURN
;__Lib_Math.c,492 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,495 :: 		
0x05D0	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,496 :: 		
0x05D1	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,497 :: 		
0x05D2	0x01FD      	CLRF       R13
;__Lib_Math.c,498 :: 		
0x05D3	0x01F9      	CLRF       R9
;__Lib_Math.c,499 :: 		
0x05D4	0x01F8      	CLRF       R8
;__Lib_Math.c,500 :: 		
0x05D5	0x0871      	MOVF       R1, 0
;__Lib_Math.c,501 :: 		
0x05D6	0x0470      	IORWF      R0, 0
;__Lib_Math.c,502 :: 		
0x05D7	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,503 :: 		
0x05D8	0x3400      	RETLW      0
;__Lib_Math.c,505 :: 		
0x05D9	0x0871      	MOVF       R1, 0
;__Lib_Math.c,506 :: 		
0x05DA	0x0675      	XORWF      R5, 0
;__Lib_Math.c,507 :: 		
0x05DB	0x00FA      	MOVWF      R10
;__Lib_Math.c,508 :: 		
0x05DC	0x1BFA      	BTFSC      R10, 7
;__Lib_Math.c,509 :: 		
0x05DD	0x09FD      	COMF       R13, 1
;__Lib_Math.c,511 :: 		
0x05DE	0x01FB      	CLRF       R11
;__Lib_Math.c,513 :: 		
0x05DF	0x1FF5      	BTFSS      R5, 7
;__Lib_Math.c,514 :: 		
0x05E0	0x2DE6      	GOTO       $+6
;__Lib_Math.c,516 :: 		
0x05E1	0x09F4      	COMF       R4, 1
;__Lib_Math.c,517 :: 		
0x05E2	0x09F5      	COMF       R5, 1
;__Lib_Math.c,518 :: 		
0x05E3	0x0AF4      	INCF       R4, 1
;__Lib_Math.c,519 :: 		
0x05E4	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,520 :: 		
0x05E5	0x0AF5      	INCF       R5, 1
;__Lib_Math.c,522 :: 		
0x05E6	0x1FF1      	BTFSS      R1, 7
;__Lib_Math.c,523 :: 		
0x05E7	0x2DED      	GOTO       $+6
;__Lib_Math.c,525 :: 		
0x05E8	0x09F0      	COMF       R0, 1
;__Lib_Math.c,526 :: 		
0x05E9	0x09F1      	COMF       R1, 1
;__Lib_Math.c,527 :: 		
0x05EA	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,528 :: 		
0x05EB	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,529 :: 		
0x05EC	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,531 :: 		
0x05ED	0x0871      	MOVF       R1, 0
;__Lib_Math.c,532 :: 		
0x05EE	0x0475      	IORWF      R5, 0
;__Lib_Math.c,533 :: 		
0x05EF	0x00FA      	MOVWF      R10
;__Lib_Math.c,534 :: 		
0x05F0	0x1BFA      	BTFSC      R10, 7
;__Lib_Math.c,535 :: 		
0x05F1	0x2E02      	GOTO       $+17
;__Lib_Math.c,537 :: 		
0x05F2	0x212C      	CALL       _Div_16x16_S_L
;__Lib_Math.c,539 :: 		
0x05F3	0x187B      	BTFSC      R11, 0
;__Lib_Math.c,540 :: 		
0x05F4	0x2E15      	GOTO       $+33
;__Lib_Math.c,542 :: 		
0x05F5	0x1FFD      	BTFSS      R13, 7
;__Lib_Math.c,543 :: 		
0x05F6	0x3400      	RETLW      0
;__Lib_Math.c,545 :: 		
0x05F7	0x09F0      	COMF       R0, 1
;__Lib_Math.c,546 :: 		
0x05F8	0x09F1      	COMF       R1, 1
;__Lib_Math.c,547 :: 		
0x05F9	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,548 :: 		
0x05FA	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,549 :: 		
0x05FB	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,551 :: 		
0x05FC	0x09F8      	COMF       R8, 1
;__Lib_Math.c,552 :: 		
0x05FD	0x09F9      	COMF       R9, 1
;__Lib_Math.c,553 :: 		
0x05FE	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,554 :: 		
0x05FF	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,555 :: 		
0x0600	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,557 :: 		
0x0601	0x3400      	RETLW      0
;__Lib_Math.c,559 :: 		
0x0602	0x1FF5      	BTFSS      R5, 7
;__Lib_Math.c,560 :: 		
0x0603	0x2E11      	GOTO       $+14
;__Lib_Math.c,561 :: 		
0x0604	0x1BF1      	BTFSC      R1, 7
;__Lib_Math.c,562 :: 		
0x0605	0x2E0D      	GOTO       $+8
;__Lib_Math.c,563 :: 		
0x0606	0x0871      	MOVF       R1, 0
;__Lib_Math.c,564 :: 		
0x0607	0x00F9      	MOVWF      R9
;__Lib_Math.c,565 :: 		
0x0608	0x0870      	MOVF       R0, 0
;__Lib_Math.c,566 :: 		
0x0609	0x00F8      	MOVWF      R8
;__Lib_Math.c,567 :: 		
0x060A	0x01F1      	CLRF       R1
;__Lib_Math.c,568 :: 		
0x060B	0x01F0      	CLRF       R0
;__Lib_Math.c,569 :: 		
0x060C	0x2DF5      	GOTO       $-23
;__Lib_Math.c,570 :: 		
0x060D	0x01F1      	CLRF       R1
;__Lib_Math.c,571 :: 		
0x060E	0x01F0      	CLRF       R0
;__Lib_Math.c,572 :: 		
0x060F	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,573 :: 		
0x0610	0x3400      	RETLW      0
;__Lib_Math.c,575 :: 		
0x0611	0x09F1      	COMF       R1, 1
;__Lib_Math.c,576 :: 		
0x0612	0x09F0      	COMF       R0, 1
;__Lib_Math.c,577 :: 		
0x0613	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,578 :: 		
0x0614	0x2DF2      	GOTO       $-34
;__Lib_Math.c,580 :: 		
0x0615	0x0AF8      	INCF       R8, 1
;__Lib_Math.c,581 :: 		
0x0616	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,582 :: 		
0x0617	0x0AF9      	INCF       R9, 1
;__Lib_Math.c,583 :: 		
0x0618	0x0874      	MOVF       R4, 0
;__Lib_Math.c,584 :: 		
0x0619	0x0278      	SUBWF      R8, 0
;__Lib_Math.c,585 :: 		
0x061A	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,586 :: 		
0x061B	0x2DF5      	GOTO       $-38
;__Lib_Math.c,587 :: 		
0x061C	0x0875      	MOVF       R5, 0
;__Lib_Math.c,588 :: 		
0x061D	0x0279      	SUBWF      R9, 0
;__Lib_Math.c,589 :: 		
0x061E	0x1D03      	BTFSS      STATUS, 2
;__Lib_Math.c,590 :: 		
0x061F	0x2DF5      	GOTO       $-42
;__Lib_Math.c,591 :: 		
0x0620	0x01F9      	CLRF       R9
;__Lib_Math.c,592 :: 		
0x0621	0x01F8      	CLRF       R8
;__Lib_Math.c,593 :: 		
0x0622	0x0AF0      	INCF       R0, 1
;__Lib_Math.c,594 :: 		
0x0623	0x1903      	BTFSC      STATUS, 2
;__Lib_Math.c,595 :: 		
0x0624	0x0AF1      	INCF       R1, 1
;__Lib_Math.c,596 :: 		
0x0625	0x1FF1      	BTFSS      R1, 7
;__Lib_Math.c,597 :: 		
0x0626	0x2DF5      	GOTO       $-49
;__Lib_Math.c,598 :: 		
0x0627	0x0000      	NOP
;__Lib_Math.c,599 :: 		
0x0628	0x34FF      	RETLW      255
;__Lib_Math.c,601 :: 		
0x0629	0x0008      	RETURN
; end of _Div_16x16_S
_initializePeripherals:
;demo_simple_8.c,243 :: 		void initializePeripherals(){
;demo_simple_8.c,245 :: 		ADC_Init();
0x062A	0x20E9      	CALL       _ADC_Init
;demo_simple_8.c,247 :: 		GIE_bit = 1;
0x062B	0x178B      	BSF        GIE_bit, 7
;demo_simple_8.c,248 :: 		PEIE_bit = 1;
0x062C	0x170B      	BSF        PEIE_bit, 6
;demo_simple_8.c,249 :: 		}
0x062D	0x0008      	RETURN
; end of _initializePeripherals
_main:
0x0800	0x1283      	BCF        STATUS, 5
0x0801	0x1303      	BCF        STATUS, 6
0x0802	0x01A2      	CLRF       _chargingEnabled
0x0803	0x01A3      	CLRF       35
0x0804	0x01A4      	CLRF       _loopcounter
0x0805	0x01A5      	CLRF       37
0x0806	0x3003      	MOVLW      3
0x0807	0x00A6      	MOVWF      _batteryState
0x0808	0x01A7      	CLRF       _dutyCounter
0x0809	0x3032      	MOVLW      50
0x080A	0x00A8      	MOVWF      _period
0x080B	0x301E      	MOVLW      30
0x080C	0x00A9      	MOVWF      _duty_buffer
0x080D	0x01AA      	CLRF       _MOSdriveState
0x080E	0x301E      	MOVLW      30
0x080F	0x00AB      	MOVWF      _duty
0x0810	0x01AC      	CLRF       _overloadcounter
;demo_simple_8.c,597 :: 		void main() {
;demo_simple_8.c,598 :: 		initializePeripherals();
0x0811	0x118A      	BCF        PCLATH, 3
0x0812	0x262A      	CALL       _initializePeripherals
0x0813	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,599 :: 		initializeIO();
0x0814	0x118A      	BCF        PCLATH, 3
0x0815	0x227E      	CALL       _initializeIO
0x0816	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,600 :: 		MOSdriveState = drvMOS1;
0x0817	0x3001      	MOVLW      1
0x0818	0x1283      	BCF        STATUS, 5
0x0819	0x00AA      	MOVWF      _MOSdriveState
;demo_simple_8.c,601 :: 		pwmStarted = 0;
0x081A	0x01AD      	CLRF       _pwmStarted
;demo_simple_8.c,602 :: 		mode = mode_inverter;
0x081B	0x01C2      	CLRF       _mode
;demo_simple_8.c,603 :: 		acStatus = acLow;
0x081C	0x3001      	MOVLW      1
0x081D	0x00BE      	MOVWF      _acStatus
;demo_simple_8.c,604 :: 		mainsStarted = 0;
0x081E	0x01E1      	CLRF       _mainsStarted
;demo_simple_8.c,605 :: 		hicutreached = 0;
0x081F	0x01BD      	CLRF       _hicutreached
;demo_simple_8.c,606 :: 		chgDelay = 0;
0x0820	0x01B5      	CLRF       _chgDelay
;demo_simple_8.c,607 :: 		lcdState = 0;
0x0821	0x01E0      	CLRF       _lcdState
;demo_simple_8.c,608 :: 		lcdCounter = 0;
0x0822	0x01DA      	CLRF       _lcdCounter
;demo_simple_8.c,609 :: 		batlv = 1;
0x0823	0x3001      	MOVLW      1
0x0824	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,611 :: 		LCD_Init();
0x0825	0x118A      	BCF        PCLATH, 3
0x0826	0x24BB      	CALL       _Lcd_Init
0x0827	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,612 :: 		LCD_Cmd(_LCD_CLEAR);
0x0828	0x3001      	MOVLW      1
0x0829	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x082A	0x118A      	BCF        PCLATH, 3
0x082B	0x20A1      	CALL       _Lcd_Cmd
0x082C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,613 :: 		LCD_Cmd(_LCD_CURSOR_OFF);
0x082D	0x300C      	MOVLW      12
0x082E	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x082F	0x118A      	BCF        PCLATH, 3
0x0830	0x20A1      	CALL       _Lcd_Cmd
0x0831	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,615 :: 		T1CON = 0x31;   // period = 105ms, t1 on
0x0832	0x3031      	MOVLW      49
0x0833	0x0090      	MOVWF      T1CON
;demo_simple_8.c,617 :: 		while (1){
L_main96:
;demo_simple_8.c,618 :: 		getMainsVoltage();
0x0834	0x118A      	BCF        PCLATH, 3
0x0835	0x2549      	CALL       _getMainsVoltage
0x0836	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,619 :: 		getBatteryVoltage();
0x0837	0x118A      	BCF        PCLATH, 3
0x0838	0x2443      	CALL       _getBatteryVoltage
0x0839	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,620 :: 		doChecks();
0x083A	0x118A      	BCF        PCLATH, 3
0x083B	0x237F      	CALL       _doChecks
0x083C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,622 :: 		if (mode == mode_inverter){
0x083D	0x0842      	MOVF       _mode, 0
0x083E	0x3A00      	XORLW      0
0x083F	0x1D03      	BTFSS      STATUS, 2
0x0840	0x285C      	GOTO       L_main98
;demo_simple_8.c,623 :: 		chargingEnabled = 0;
0x0841	0x01A2      	CLRF       _chargingEnabled
0x0842	0x01A3      	CLRF       _chargingEnabled+1
;demo_simple_8.c,624 :: 		if (inverterState == inv_normal){
0x0843	0x083F      	MOVF       _inverterState, 0
0x0844	0x3A00      	XORLW      0
0x0845	0x1D03      	BTFSS      STATUS, 2
0x0846	0x2854      	GOTO       L_main99
;demo_simple_8.c,625 :: 		getOverload();
0x0847	0x118A      	BCF        PCLATH, 3
0x0848	0x21EB      	CALL       _getOverload
0x0849	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,627 :: 		doFeedback();
0x084A	0x118A      	BCF        PCLATH, 3
0x084B	0x228D      	CALL       _doFeedback
0x084C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,628 :: 		TMR1IF_bit = 0;
0x084D	0x1283      	BCF        STATUS, 5
0x084E	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,629 :: 		lcdCounter++;
0x084F	0x0A5A      	INCF       _lcdCounter, 0
0x0850	0x00F0      	MOVWF      R0
0x0851	0x0870      	MOVF       R0, 0
0x0852	0x00DA      	MOVWF      _lcdCounter
;demo_simple_8.c,631 :: 		}
0x0853	0x285B      	GOTO       L_main100
L_main99:
;demo_simple_8.c,633 :: 		if (TMR1IF_bit){
0x0854	0x1C0C      	BTFSS      TMR1IF_bit, 0
0x0855	0x285B      	GOTO       L_main101
;demo_simple_8.c,634 :: 		lcdCounter++;
0x0856	0x0A5A      	INCF       _lcdCounter, 0
0x0857	0x00F0      	MOVWF      R0
0x0858	0x0870      	MOVF       R0, 0
0x0859	0x00DA      	MOVWF      _lcdCounter
;demo_simple_8.c,635 :: 		TMR1IF_bit = 0;
0x085A	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,636 :: 		}
L_main101:
;demo_simple_8.c,637 :: 		}
L_main100:
;demo_simple_8.c,638 :: 		}
0x085B	0x28FF      	GOTO       L_main102
L_main98:
;demo_simple_8.c,640 :: 		if (mainsStarted == 1){
0x085C	0x0861      	MOVF       _mainsStarted, 0
0x085D	0x3A01      	XORLW      1
0x085E	0x1D03      	BTFSS      STATUS, 2
0x085F	0x28F8      	GOTO       L_main103
;demo_simple_8.c,641 :: 		if (chgDelay == 0){
0x0860	0x0835      	MOVF       _chgDelay, 0
0x0861	0x3A00      	XORLW      0
0x0862	0x1D03      	BTFSS      STATUS, 2
0x0863	0x28DA      	GOTO       L_main104
;demo_simple_8.c,642 :: 		if (TMR1IF_bit){
0x0864	0x1C0C      	BTFSS      TMR1IF_bit, 0
0x0865	0x28D9      	GOTO       L_main105
;demo_simple_8.c,643 :: 		lcdCounter++;
0x0866	0x0A5A      	INCF       _lcdCounter, 0
0x0867	0x00F0      	MOVWF      R0
0x0868	0x0870      	MOVF       R0, 0
0x0869	0x00DA      	MOVWF      _lcdCounter
;demo_simple_8.c,644 :: 		delayCounter2++;
0x086A	0x0A31      	INCF       _delayCounter2, 0
0x086B	0x00F0      	MOVWF      R0
0x086C	0x0870      	MOVF       R0, 0
0x086D	0x00B1      	MOVWF      _delayCounter2
;demo_simple_8.c,645 :: 		if (delayCounter2 == 2){
0x086E	0x0831      	MOVF       _delayCounter2, 0
0x086F	0x3A02      	XORLW      2
0x0870	0x1D03      	BTFSS      STATUS, 2
0x0871	0x28D8      	GOTO       L_main106
;demo_simple_8.c,646 :: 		delayCounter++;
0x0872	0x0A30      	INCF       _delayCounter, 0
0x0873	0x00F0      	MOVWF      R0
0x0874	0x0870      	MOVF       R0, 0
0x0875	0x00B0      	MOVWF      _delayCounter
;demo_simple_8.c,647 :: 		chargingDuty_buffer = (vAc * 32) / 184;
0x0876	0x3005      	MOVLW      5
0x0877	0x00F2      	MOVWF      R2
0x0878	0x085B      	MOVF       _vAc, 0
0x0879	0x00F0      	MOVWF      R0
0x087A	0x085C      	MOVF       _vAc+1, 0
0x087B	0x00F1      	MOVWF      R0+1
0x087C	0x0872      	MOVF       R2, 0
L__main190:
0x087D	0x1903      	BTFSC      STATUS, 2
0x087E	0x2884      	GOTO       L__main191
0x087F	0x0DF0      	RLF        R0, 1
0x0880	0x0DF1      	RLF        R0+1, 1
0x0881	0x1070      	BCF        R0, 0
0x0882	0x3EFF      	ADDLW      255
0x0883	0x287D      	GOTO       L__main190
L__main191:
0x0884	0x30B8      	MOVLW      184
0x0885	0x00F4      	MOVWF      R4
0x0886	0x01F5      	CLRF       R4+1
0x0887	0x118A      	BCF        PCLATH, 3
0x0888	0x2199      	CALL       _Div_16x16_U
0x0889	0x158A      	BSF        PCLATH, 3
0x088A	0x0870      	MOVF       R0, 0
0x088B	0x00B2      	MOVWF      _chargingDuty_buffer
0x088C	0x0871      	MOVF       R0+1, 0
0x088D	0x00B3      	MOVWF      _chargingDuty_buffer+1
;demo_simple_8.c,648 :: 		if (delayCounter > 100){    // after 20 seconds go to normal
0x088E	0x0830      	MOVF       _delayCounter, 0
0x088F	0x3C64      	SUBLW      100
0x0890	0x1803      	BTFSC      STATUS, 0
0x0891	0x2899      	GOTO       L_main107
;demo_simple_8.c,649 :: 		chgDelay = 1;
0x0892	0x3001      	MOVLW      1
0x0893	0x00B5      	MOVWF      _chgDelay
;demo_simple_8.c,650 :: 		chargingEnabled = 1;
0x0894	0x3001      	MOVLW      1
0x0895	0x00A2      	MOVWF      _chargingEnabled
0x0896	0x3000      	MOVLW      0
0x0897	0x00A3      	MOVWF      _chargingEnabled+1
;demo_simple_8.c,652 :: 		}
0x0898	0x28D6      	GOTO       L_main108
L_main107:
;demo_simple_8.c,653 :: 		else if (delayCounter > 50){    // initial 10 seconds delay
0x0899	0x0830      	MOVF       _delayCounter, 0
0x089A	0x3C32      	SUBLW      50
0x089B	0x1803      	BTFSC      STATUS, 0
0x089C	0x28D4      	GOTO       L_main109
;demo_simple_8.c,655 :: 		adTemp = chargingDuty_buffer;
0x089D	0x0832      	MOVF       _chargingDuty_buffer, 0
0x089E	0x00B6      	MOVWF      _adTemp
0x089F	0x0833      	MOVF       _chargingDuty_buffer+1, 0
0x08A0	0x00B7      	MOVWF      _adTemp+1
;demo_simple_8.c,656 :: 		adTemp = 16 - (delayCounter - 50) + adTemp;
0x08A1	0x3032      	MOVLW      50
0x08A2	0x0230      	SUBWF      _delayCounter, 0
0x08A3	0x00F0      	MOVWF      R0
0x08A4	0x01F1      	CLRF       R0+1
0x08A5	0x1C03      	BTFSS      STATUS, 0
0x08A6	0x03F1      	DECF       R0+1, 1
0x08A7	0x0870      	MOVF       R0, 0
0x08A8	0x3C10      	SUBLW      16
0x08A9	0x00F0      	MOVWF      R0
0x08AA	0x0871      	MOVF       R0+1, 0
0x08AB	0x1C03      	BTFSS      STATUS, 0
0x08AC	0x3E01      	ADDLW      1
0x08AD	0x01F1      	CLRF       R0+1
0x08AE	0x02F1      	SUBWF      R0+1, 1
0x08AF	0x0870      	MOVF       R0, 0
0x08B0	0x07B6      	ADDWF      _adTemp, 1
0x08B1	0x0871      	MOVF       R0+1, 0
0x08B2	0x1803      	BTFSC      STATUS, 0
0x08B3	0x3E01      	ADDLW      1
0x08B4	0x07B7      	ADDWF      _adTemp+1, 1
;demo_simple_8.c,657 :: 		if (adTemp >= chargingDuty_buffer){
0x08B5	0x0833      	MOVF       _chargingDuty_buffer+1, 0
0x08B6	0x0237      	SUBWF      _adTemp+1, 0
0x08B7	0x1D03      	BTFSS      STATUS, 2
0x08B8	0x28BB      	GOTO       L__main192
0x08B9	0x0832      	MOVF       _chargingDuty_buffer, 0
0x08BA	0x0236      	SUBWF      _adTemp, 0
L__main192:
0x08BB	0x1C03      	BTFSS      STATUS, 0
0x08BC	0x28C1      	GOTO       L_main110
;demo_simple_8.c,658 :: 		chargingDuty_buffer = adTemp;
0x08BD	0x0836      	MOVF       _adTemp, 0
0x08BE	0x00B2      	MOVWF      _chargingDuty_buffer
0x08BF	0x0837      	MOVF       _adTemp+1, 0
0x08C0	0x00B3      	MOVWF      _chargingDuty_buffer+1
;demo_simple_8.c,659 :: 		}
L_main110:
;demo_simple_8.c,660 :: 		if (adTemp >= 46){
0x08C1	0x3000      	MOVLW      0
0x08C2	0x0237      	SUBWF      _adTemp+1, 0
0x08C3	0x1D03      	BTFSS      STATUS, 2
0x08C4	0x28C7      	GOTO       L__main193
0x08C5	0x302E      	MOVLW      46
0x08C6	0x0236      	SUBWF      _adTemp, 0
L__main193:
0x08C7	0x1C03      	BTFSS      STATUS, 0
0x08C8	0x28CD      	GOTO       L_main111
;demo_simple_8.c,661 :: 		chargingDuty_buffer = 46;
0x08C9	0x302E      	MOVLW      46
0x08CA	0x00B2      	MOVWF      _chargingDuty_buffer
0x08CB	0x3000      	MOVLW      0
0x08CC	0x00B3      	MOVWF      _chargingDuty_buffer+1
;demo_simple_8.c,662 :: 		}
L_main111:
;demo_simple_8.c,664 :: 		firing = chargingDuty_buffer;
0x08CD	0x0832      	MOVF       _chargingDuty_buffer, 0
0x08CE	0x00AF      	MOVWF      _firing
;demo_simple_8.c,665 :: 		chargingEnabled = 1;
0x08CF	0x3001      	MOVLW      1
0x08D0	0x00A2      	MOVWF      _chargingEnabled
0x08D1	0x3000      	MOVLW      0
0x08D2	0x00A3      	MOVWF      _chargingEnabled+1
;demo_simple_8.c,666 :: 		}
0x08D3	0x28D6      	GOTO       L_main112
L_main109:
;demo_simple_8.c,668 :: 		chargingEnabled = 0;
0x08D4	0x01A2      	CLRF       _chargingEnabled
0x08D5	0x01A3      	CLRF       _chargingEnabled+1
;demo_simple_8.c,669 :: 		}
L_main112:
L_main108:
;demo_simple_8.c,670 :: 		delayCounter2 = 0;
0x08D6	0x01B1      	CLRF       _delayCounter2
;demo_simple_8.c,671 :: 		}
0x08D7	0x28D8      	GOTO       L_main113
L_main106:
;demo_simple_8.c,674 :: 		}
L_main113:
;demo_simple_8.c,675 :: 		TMR1IF_bit = 0;
0x08D8	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,676 :: 		}
L_main105:
;demo_simple_8.c,677 :: 		}
0x08D9	0x28F7      	GOTO       L_main114
L_main104:
;demo_simple_8.c,679 :: 		firing = (vAc * 32)/184;    // 184 -> 220VAC
0x08DA	0x3005      	MOVLW      5
0x08DB	0x00F2      	MOVWF      R2
0x08DC	0x085B      	MOVF       _vAc, 0
0x08DD	0x00F0      	MOVWF      R0
0x08DE	0x085C      	MOVF       _vAc+1, 0
0x08DF	0x00F1      	MOVWF      R0+1
0x08E0	0x0872      	MOVF       R2, 0
L__main194:
0x08E1	0x1903      	BTFSC      STATUS, 2
0x08E2	0x28E8      	GOTO       L__main195
0x08E3	0x0DF0      	RLF        R0, 1
0x08E4	0x0DF1      	RLF        R0+1, 1
0x08E5	0x1070      	BCF        R0, 0
0x08E6	0x3EFF      	ADDLW      255
0x08E7	0x28E1      	GOTO       L__main194
L__main195:
0x08E8	0x30B8      	MOVLW      184
0x08E9	0x00F4      	MOVWF      R4
0x08EA	0x01F5      	CLRF       R4+1
0x08EB	0x118A      	BCF        PCLATH, 3
0x08EC	0x2199      	CALL       _Div_16x16_U
0x08ED	0x158A      	BSF        PCLATH, 3
0x08EE	0x0870      	MOVF       R0, 0
0x08EF	0x00AF      	MOVWF      _firing
;demo_simple_8.c,680 :: 		if (TMR1IF_bit){
0x08F0	0x1C0C      	BTFSS      TMR1IF_bit, 0
0x08F1	0x28F7      	GOTO       L_main115
;demo_simple_8.c,681 :: 		lcdCounter++;
0x08F2	0x0A5A      	INCF       _lcdCounter, 0
0x08F3	0x00F0      	MOVWF      R0
0x08F4	0x0870      	MOVF       R0, 0
0x08F5	0x00DA      	MOVWF      _lcdCounter
;demo_simple_8.c,682 :: 		TMR1IF_bit = 0;
0x08F6	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,683 :: 		}
L_main115:
;demo_simple_8.c,684 :: 		}
L_main114:
;demo_simple_8.c,685 :: 		}
0x08F7	0x28FF      	GOTO       L_main116
L_main103:
;demo_simple_8.c,687 :: 		if (TMR1IF_bit){
0x08F8	0x1C0C      	BTFSS      TMR1IF_bit, 0
0x08F9	0x28FF      	GOTO       L_main117
;demo_simple_8.c,688 :: 		lcdCounter++;
0x08FA	0x0A5A      	INCF       _lcdCounter, 0
0x08FB	0x00F0      	MOVWF      R0
0x08FC	0x0870      	MOVF       R0, 0
0x08FD	0x00DA      	MOVWF      _lcdCounter
;demo_simple_8.c,689 :: 		TMR1IF_bit = 0;
0x08FE	0x100C      	BCF        TMR1IF_bit, 0
;demo_simple_8.c,690 :: 		}
L_main117:
;demo_simple_8.c,691 :: 		}
L_main116:
;demo_simple_8.c,692 :: 		}
L_main102:
;demo_simple_8.c,695 :: 		if (T1CON == 0x11){
0x08FF	0x0810      	MOVF       T1CON, 0
0x0900	0x3A11      	XORLW      17
0x0901	0x1D03      	BTFSS      STATUS, 2
0x0902	0x2906      	GOTO       L_main118
;demo_simple_8.c,696 :: 		t1pr = 90;
0x0903	0x305A      	MOVLW      90
0x0904	0x00DD      	MOVWF      _t1pr
;demo_simple_8.c,697 :: 		}
0x0905	0x290F      	GOTO       L_main119
L_main118:
;demo_simple_8.c,698 :: 		else if (T1CON == 0x31){
0x0906	0x0810      	MOVF       T1CON, 0
0x0907	0x3A31      	XORLW      49
0x0908	0x1D03      	BTFSS      STATUS, 2
0x0909	0x290D      	GOTO       L_main120
;demo_simple_8.c,699 :: 		t1pr = 30;
0x090A	0x301E      	MOVLW      30
0x090B	0x00DD      	MOVWF      _t1pr
;demo_simple_8.c,700 :: 		}
0x090C	0x290F      	GOTO       L_main121
L_main120:
;demo_simple_8.c,702 :: 		t1pr = 60;
0x090D	0x303C      	MOVLW      60
0x090E	0x00DD      	MOVWF      _t1pr
;demo_simple_8.c,703 :: 		}
L_main121:
L_main119:
;demo_simple_8.c,705 :: 		if (lcdCounter == t1pr){
0x090F	0x085A      	MOVF       _lcdCounter, 0
0x0910	0x065D      	XORWF      _t1pr, 0
0x0911	0x1D03      	BTFSS      STATUS, 2
0x0912	0x2923      	GOTO       L_main122
;demo_simple_8.c,706 :: 		lcdState++;
0x0913	0x0A60      	INCF       _lcdState, 0
0x0914	0x00F0      	MOVWF      R0
0x0915	0x0870      	MOVF       R0, 0
0x0916	0x00E0      	MOVWF      _lcdState
;demo_simple_8.c,707 :: 		LCD_Cmd(_LCD_CLEAR);
0x0917	0x3001      	MOVLW      1
0x0918	0x00EC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0919	0x118A      	BCF        PCLATH, 3
0x091A	0x20A1      	CALL       _Lcd_Cmd
0x091B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,708 :: 		chgDot = 0;
0x091C	0x01D1      	CLRF       _chgDot
;demo_simple_8.c,709 :: 		if (lcdState >= maxLCDstates){
0x091D	0x3007      	MOVLW      7
0x091E	0x0260      	SUBWF      _lcdState, 0
0x091F	0x1C03      	BTFSS      STATUS, 0
0x0920	0x2922      	GOTO       L_main123
;demo_simple_8.c,710 :: 		lcdState = 0;
0x0921	0x01E0      	CLRF       _lcdState
;demo_simple_8.c,711 :: 		}
L_main123:
;demo_simple_8.c,712 :: 		lcdCounter = 0;
0x0922	0x01DA      	CLRF       _lcdCounter
;demo_simple_8.c,713 :: 		}
L_main122:
;demo_simple_8.c,715 :: 		switch (lcdState){
0x0923	0x2E2D      	GOTO       L_main124
;demo_simple_8.c,716 :: 		case 0:    // show company name
L_main126:
;demo_simple_8.c,717 :: 		case 1:
L_main127:
;demo_simple_8.c,719 :: 		LCD_Chr(1, 5, 'M');
0x0924	0x3001      	MOVLW      1
0x0925	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0926	0x3005      	MOVLW      5
0x0927	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0928	0x304D      	MOVLW      77
0x0929	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x092A	0x118A      	BCF        PCLATH, 3
0x092B	0x20F7      	CALL       _Lcd_Chr
0x092C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,720 :: 		LCD_Chr_Cp(' ');
0x092D	0x3020      	MOVLW      32
0x092E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x092F	0x118A      	BCF        PCLATH, 3
0x0930	0x20E1      	CALL       _Lcd_Chr_CP
0x0931	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,721 :: 		LCD_Chr_Cp('M');
0x0932	0x304D      	MOVLW      77
0x0933	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0934	0x118A      	BCF        PCLATH, 3
0x0935	0x20E1      	CALL       _Lcd_Chr_CP
0x0936	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,722 :: 		LCD_Chr_Cp('i');
0x0937	0x3069      	MOVLW      105
0x0938	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0939	0x118A      	BCF        PCLATH, 3
0x093A	0x20E1      	CALL       _Lcd_Chr_CP
0x093B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,723 :: 		LCD_Chr_Cp('c');
0x093C	0x3063      	MOVLW      99
0x093D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x093E	0x118A      	BCF        PCLATH, 3
0x093F	0x20E1      	CALL       _Lcd_Chr_CP
0x0940	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,724 :: 		LCD_Chr_Cp('r');
0x0941	0x3072      	MOVLW      114
0x0942	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0943	0x118A      	BCF        PCLATH, 3
0x0944	0x20E1      	CALL       _Lcd_Chr_CP
0x0945	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,725 :: 		LCD_Chr_Cp('o');
0x0946	0x306F      	MOVLW      111
0x0947	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0948	0x118A      	BCF        PCLATH, 3
0x0949	0x20E1      	CALL       _Lcd_Chr_CP
0x094A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,727 :: 		LCD_Chr(2, 4, 'S');
0x094B	0x3002      	MOVLW      2
0x094C	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x094D	0x3004      	MOVLW      4
0x094E	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x094F	0x3053      	MOVLW      83
0x0950	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0951	0x118A      	BCF        PCLATH, 3
0x0952	0x20F7      	CALL       _Lcd_Chr
0x0953	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,728 :: 		LCD_Chr_Cp('o');
0x0954	0x306F      	MOVLW      111
0x0955	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0956	0x118A      	BCF        PCLATH, 3
0x0957	0x20E1      	CALL       _Lcd_Chr_CP
0x0958	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,729 :: 		LCD_Chr_Cp('l');
0x0959	0x306C      	MOVLW      108
0x095A	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x095B	0x118A      	BCF        PCLATH, 3
0x095C	0x20E1      	CALL       _Lcd_Chr_CP
0x095D	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,730 :: 		LCD_Chr_Cp('u');
0x095E	0x3075      	MOVLW      117
0x095F	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0960	0x118A      	BCF        PCLATH, 3
0x0961	0x20E1      	CALL       _Lcd_Chr_CP
0x0962	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,731 :: 		LCD_Chr_Cp('t');
0x0963	0x3074      	MOVLW      116
0x0964	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0965	0x118A      	BCF        PCLATH, 3
0x0966	0x20E1      	CALL       _Lcd_Chr_CP
0x0967	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,732 :: 		LCD_Chr_Cp('i');
0x0968	0x3069      	MOVLW      105
0x0969	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x096A	0x118A      	BCF        PCLATH, 3
0x096B	0x20E1      	CALL       _Lcd_Chr_CP
0x096C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,733 :: 		LCD_Chr_Cp('o');
0x096D	0x306F      	MOVLW      111
0x096E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x096F	0x118A      	BCF        PCLATH, 3
0x0970	0x20E1      	CALL       _Lcd_Chr_CP
0x0971	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,734 :: 		LCD_Chr_Cp('n');
0x0972	0x306E      	MOVLW      110
0x0973	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0974	0x118A      	BCF        PCLATH, 3
0x0975	0x20E1      	CALL       _Lcd_Chr_CP
0x0976	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,735 :: 		LCD_Chr_Cp('s');
0x0977	0x3073      	MOVLW      115
0x0978	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0979	0x118A      	BCF        PCLATH, 3
0x097A	0x20E1      	CALL       _Lcd_Chr_CP
0x097B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,737 :: 		break;
0x097C	0x2E49      	GOTO       L_main125
;demo_simple_8.c,738 :: 		case 2:    // show mains state
L_main128:
;demo_simple_8.c,739 :: 		LCD_Chr(1, 1, 'M');
0x097D	0x3001      	MOVLW      1
0x097E	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x097F	0x3001      	MOVLW      1
0x0980	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0981	0x304D      	MOVLW      77
0x0982	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0983	0x118A      	BCF        PCLATH, 3
0x0984	0x20F7      	CALL       _Lcd_Chr
0x0985	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,740 :: 		LCD_Chr_Cp('a');
0x0986	0x3061      	MOVLW      97
0x0987	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0988	0x118A      	BCF        PCLATH, 3
0x0989	0x20E1      	CALL       _Lcd_Chr_CP
0x098A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,741 :: 		LCD_Chr_Cp('i');
0x098B	0x3069      	MOVLW      105
0x098C	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x098D	0x118A      	BCF        PCLATH, 3
0x098E	0x20E1      	CALL       _Lcd_Chr_CP
0x098F	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,742 :: 		LCD_Chr_Cp('n');
0x0990	0x306E      	MOVLW      110
0x0991	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0992	0x118A      	BCF        PCLATH, 3
0x0993	0x20E1      	CALL       _Lcd_Chr_CP
0x0994	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,743 :: 		LCD_Chr_Cp('s');
0x0995	0x3073      	MOVLW      115
0x0996	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0997	0x118A      	BCF        PCLATH, 3
0x0998	0x20E1      	CALL       _Lcd_Chr_CP
0x0999	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,744 :: 		LCD_Chr_Cp(' ');
0x099A	0x3020      	MOVLW      32
0x099B	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x099C	0x118A      	BCF        PCLATH, 3
0x099D	0x20E1      	CALL       _Lcd_Chr_CP
0x099E	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,745 :: 		LCD_Chr_Cp('V');
0x099F	0x3056      	MOVLW      86
0x09A0	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09A1	0x118A      	BCF        PCLATH, 3
0x09A2	0x20E1      	CALL       _Lcd_Chr_CP
0x09A3	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,746 :: 		LCD_Chr_Cp(':');
0x09A4	0x303A      	MOVLW      58
0x09A5	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09A6	0x118A      	BCF        PCLATH, 3
0x09A7	0x20E1      	CALL       _Lcd_Chr_CP
0x09A8	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,748 :: 		num = (vAc * 220) / 184;
0x09A9	0x085B      	MOVF       _vAc, 0
0x09AA	0x00F0      	MOVWF      R0
0x09AB	0x085C      	MOVF       _vAc+1, 0
0x09AC	0x00F1      	MOVWF      R0+1
0x09AD	0x30DC      	MOVLW      220
0x09AE	0x00F4      	MOVWF      R4
0x09AF	0x01F5      	CLRF       R4+1
0x09B0	0x118A      	BCF        PCLATH, 3
0x09B1	0x216E      	CALL       _Mul_16x16_U
0x09B2	0x158A      	BSF        PCLATH, 3
0x09B3	0x30B8      	MOVLW      184
0x09B4	0x00F4      	MOVWF      R4
0x09B5	0x01F5      	CLRF       R4+1
0x09B6	0x118A      	BCF        PCLATH, 3
0x09B7	0x2199      	CALL       _Div_16x16_U
0x09B8	0x158A      	BSF        PCLATH, 3
0x09B9	0x0870      	MOVF       R0, 0
0x09BA	0x00D5      	MOVWF      _num
0x09BB	0x0871      	MOVF       R0+1, 0
0x09BC	0x00D6      	MOVWF      _num+1
;demo_simple_8.c,749 :: 		numToOne();
0x09BD	0x118A      	BCF        PCLATH, 3
0x09BE	0x2515      	CALL       _numToOne
0x09BF	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,751 :: 		LCD_Chr(1, 12, '~');
0x09C0	0x3001      	MOVLW      1
0x09C1	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x09C2	0x300C      	MOVLW      12
0x09C3	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x09C4	0x307E      	MOVLW      126
0x09C5	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x09C6	0x118A      	BCF        PCLATH, 3
0x09C7	0x20F7      	CALL       _Lcd_Chr
0x09C8	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,752 :: 		LCD_Chr_Cp(hundreds);
0x09C9	0x0854      	MOVF       _hundreds, 0
0x09CA	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09CB	0x118A      	BCF        PCLATH, 3
0x09CC	0x20E1      	CALL       _Lcd_Chr_CP
0x09CD	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,753 :: 		LCD_Chr_Cp(tens);
0x09CE	0x085E      	MOVF       _tens, 0
0x09CF	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09D0	0x118A      	BCF        PCLATH, 3
0x09D1	0x20E1      	CALL       _Lcd_Chr_CP
0x09D2	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,754 :: 		LCD_Chr_Cp(ones);
0x09D3	0x085F      	MOVF       _ones, 0
0x09D4	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09D5	0x118A      	BCF        PCLATH, 3
0x09D6	0x20E1      	CALL       _Lcd_Chr_CP
0x09D7	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,755 :: 		LCD_Chr_Cp('V');
0x09D8	0x3056      	MOVLW      86
0x09D9	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09DA	0x118A      	BCF        PCLATH, 3
0x09DB	0x20E1      	CALL       _Lcd_Chr_CP
0x09DC	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,757 :: 		LCD_Chr(2, 3, 'M');
0x09DD	0x3002      	MOVLW      2
0x09DE	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x09DF	0x3003      	MOVLW      3
0x09E0	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x09E1	0x304D      	MOVLW      77
0x09E2	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x09E3	0x118A      	BCF        PCLATH, 3
0x09E4	0x20F7      	CALL       _Lcd_Chr
0x09E5	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,758 :: 		LCD_Chr_Cp('a');
0x09E6	0x3061      	MOVLW      97
0x09E7	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09E8	0x118A      	BCF        PCLATH, 3
0x09E9	0x20E1      	CALL       _Lcd_Chr_CP
0x09EA	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,759 :: 		LCD_Chr_Cp('i');
0x09EB	0x3069      	MOVLW      105
0x09EC	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09ED	0x118A      	BCF        PCLATH, 3
0x09EE	0x20E1      	CALL       _Lcd_Chr_CP
0x09EF	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,760 :: 		LCD_Chr_Cp('n');
0x09F0	0x306E      	MOVLW      110
0x09F1	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09F2	0x118A      	BCF        PCLATH, 3
0x09F3	0x20E1      	CALL       _Lcd_Chr_CP
0x09F4	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,761 :: 		LCD_Chr_Cp('s');
0x09F5	0x3073      	MOVLW      115
0x09F6	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09F7	0x118A      	BCF        PCLATH, 3
0x09F8	0x20E1      	CALL       _Lcd_Chr_CP
0x09F9	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,762 :: 		LCD_Chr_Cp(' ');
0x09FA	0x3020      	MOVLW      32
0x09FB	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x09FC	0x118A      	BCF        PCLATH, 3
0x09FD	0x20E1      	CALL       _Lcd_Chr_CP
0x09FE	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,764 :: 		if (acStatus == acNormal){
0x09FF	0x083E      	MOVF       _acStatus, 0
0x0A00	0x3A00      	XORLW      0
0x0A01	0x1D03      	BTFSS      STATUS, 2
0x0A02	0x2A13      	GOTO       L_main129
;demo_simple_8.c,765 :: 		LCD_Chr_Cp('O');
0x0A03	0x304F      	MOVLW      79
0x0A04	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A05	0x118A      	BCF        PCLATH, 3
0x0A06	0x20E1      	CALL       _Lcd_Chr_CP
0x0A07	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,766 :: 		LCD_Chr_Cp('k');
0x0A08	0x306B      	MOVLW      107
0x0A09	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A0A	0x118A      	BCF        PCLATH, 3
0x0A0B	0x20E1      	CALL       _Lcd_Chr_CP
0x0A0C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,767 :: 		pad(6);
0x0A0D	0x3006      	MOVLW      6
0x0A0E	0x00E7      	MOVWF      FARG_pad_c
0x0A0F	0x118A      	BCF        PCLATH, 3
0x0A10	0x21DB      	CALL       _pad
0x0A11	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,768 :: 		}
0x0A12	0x2A58      	GOTO       L_main130
L_main129:
;demo_simple_8.c,769 :: 		else if (acStatus == acLow){
0x0A13	0x083E      	MOVF       _acStatus, 0
0x0A14	0x3A01      	XORLW      1
0x0A15	0x1D03      	BTFSS      STATUS, 2
0x0A16	0x2A3B      	GOTO       L_main131
;demo_simple_8.c,770 :: 		LCD_Chr_Cp('L');
0x0A17	0x304C      	MOVLW      76
0x0A18	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A19	0x118A      	BCF        PCLATH, 3
0x0A1A	0x20E1      	CALL       _Lcd_Chr_CP
0x0A1B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,771 :: 		LCD_Chr_Cp('o');
0x0A1C	0x306F      	MOVLW      111
0x0A1D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A1E	0x118A      	BCF        PCLATH, 3
0x0A1F	0x20E1      	CALL       _Lcd_Chr_CP
0x0A20	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,772 :: 		LCD_Chr_Cp('w');
0x0A21	0x3077      	MOVLW      119
0x0A22	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A23	0x118A      	BCF        PCLATH, 3
0x0A24	0x20E1      	CALL       _Lcd_Chr_CP
0x0A25	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,773 :: 		LCD_Chr_Cp('/');
0x0A26	0x302F      	MOVLW      47
0x0A27	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A28	0x118A      	BCF        PCLATH, 3
0x0A29	0x20E1      	CALL       _Lcd_Chr_CP
0x0A2A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,774 :: 		LCD_Chr_Cp('O');
0x0A2B	0x304F      	MOVLW      79
0x0A2C	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A2D	0x118A      	BCF        PCLATH, 3
0x0A2E	0x20E1      	CALL       _Lcd_Chr_CP
0x0A2F	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,775 :: 		LCD_Chr_Cp('f');
0x0A30	0x3066      	MOVLW      102
0x0A31	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A32	0x118A      	BCF        PCLATH, 3
0x0A33	0x20E1      	CALL       _Lcd_Chr_CP
0x0A34	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,776 :: 		LCD_Chr_Cp('f');
0x0A35	0x3066      	MOVLW      102
0x0A36	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A37	0x118A      	BCF        PCLATH, 3
0x0A38	0x20E1      	CALL       _Lcd_Chr_CP
0x0A39	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,777 :: 		}
0x0A3A	0x2A58      	GOTO       L_main132
L_main131:
;demo_simple_8.c,778 :: 		else if (acStatus == acHigh){
0x0A3B	0x083E      	MOVF       _acStatus, 0
0x0A3C	0x3A02      	XORLW      2
0x0A3D	0x1D03      	BTFSS      STATUS, 2
0x0A3E	0x2A58      	GOTO       L_main133
;demo_simple_8.c,779 :: 		LCD_Chr_Cp('H');
0x0A3F	0x3048      	MOVLW      72
0x0A40	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A41	0x118A      	BCF        PCLATH, 3
0x0A42	0x20E1      	CALL       _Lcd_Chr_CP
0x0A43	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,780 :: 		LCD_Chr_Cp('i');
0x0A44	0x3069      	MOVLW      105
0x0A45	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A46	0x118A      	BCF        PCLATH, 3
0x0A47	0x20E1      	CALL       _Lcd_Chr_CP
0x0A48	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,781 :: 		LCD_Chr_Cp('g');
0x0A49	0x3067      	MOVLW      103
0x0A4A	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A4B	0x118A      	BCF        PCLATH, 3
0x0A4C	0x20E1      	CALL       _Lcd_Chr_CP
0x0A4D	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,782 :: 		LCD_Chr_Cp('h');
0x0A4E	0x3068      	MOVLW      104
0x0A4F	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A50	0x118A      	BCF        PCLATH, 3
0x0A51	0x20E1      	CALL       _Lcd_Chr_CP
0x0A52	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,783 :: 		pad(4);
0x0A53	0x3004      	MOVLW      4
0x0A54	0x00E7      	MOVWF      FARG_pad_c
0x0A55	0x118A      	BCF        PCLATH, 3
0x0A56	0x21DB      	CALL       _pad
0x0A57	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,784 :: 		}
L_main133:
L_main132:
L_main130:
;demo_simple_8.c,785 :: 		break;
0x0A58	0x2E49      	GOTO       L_main125
;demo_simple_8.c,786 :: 		case 3:    // show inverter state
L_main134:
;demo_simple_8.c,787 :: 		LCD_Chr(1, 3, 'I');
0x0A59	0x3001      	MOVLW      1
0x0A5A	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0A5B	0x3003      	MOVLW      3
0x0A5C	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0A5D	0x3049      	MOVLW      73
0x0A5E	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0A5F	0x118A      	BCF        PCLATH, 3
0x0A60	0x20F7      	CALL       _Lcd_Chr
0x0A61	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,788 :: 		LCD_Chr_Cp('n');
0x0A62	0x306E      	MOVLW      110
0x0A63	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A64	0x118A      	BCF        PCLATH, 3
0x0A65	0x20E1      	CALL       _Lcd_Chr_CP
0x0A66	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,789 :: 		LCD_Chr_Cp('v');
0x0A67	0x3076      	MOVLW      118
0x0A68	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A69	0x118A      	BCF        PCLATH, 3
0x0A6A	0x20E1      	CALL       _Lcd_Chr_CP
0x0A6B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,790 :: 		LCD_Chr_Cp('e');
0x0A6C	0x3065      	MOVLW      101
0x0A6D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A6E	0x118A      	BCF        PCLATH, 3
0x0A6F	0x20E1      	CALL       _Lcd_Chr_CP
0x0A70	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,791 :: 		LCD_Chr_Cp('r');
0x0A71	0x3072      	MOVLW      114
0x0A72	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A73	0x118A      	BCF        PCLATH, 3
0x0A74	0x20E1      	CALL       _Lcd_Chr_CP
0x0A75	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,792 :: 		LCD_Chr_Cp('t');
0x0A76	0x3074      	MOVLW      116
0x0A77	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A78	0x118A      	BCF        PCLATH, 3
0x0A79	0x20E1      	CALL       _Lcd_Chr_CP
0x0A7A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,793 :: 		LCD_Chr_Cp('e');
0x0A7B	0x3065      	MOVLW      101
0x0A7C	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A7D	0x118A      	BCF        PCLATH, 3
0x0A7E	0x20E1      	CALL       _Lcd_Chr_CP
0x0A7F	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,794 :: 		LCD_Chr_Cp('r');
0x0A80	0x3072      	MOVLW      114
0x0A81	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A82	0x118A      	BCF        PCLATH, 3
0x0A83	0x20E1      	CALL       _Lcd_Chr_CP
0x0A84	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,795 :: 		LCD_Chr_Cp(' ');
0x0A85	0x3020      	MOVLW      32
0x0A86	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A87	0x118A      	BCF        PCLATH, 3
0x0A88	0x20E1      	CALL       _Lcd_Chr_CP
0x0A89	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,796 :: 		if ((inverterState == inv_normal) & (mode == mode_inverter)){
0x0A8A	0x083F      	MOVF       _inverterState, 0
0x0A8B	0x3A00      	XORLW      0
0x0A8C	0x3001      	MOVLW      1
0x0A8D	0x1D03      	BTFSS      STATUS, 2
0x0A8E	0x3000      	MOVLW      0
0x0A8F	0x00F1      	MOVWF      R1
0x0A90	0x0842      	MOVF       _mode, 0
0x0A91	0x3A00      	XORLW      0
0x0A92	0x3001      	MOVLW      1
0x0A93	0x1D03      	BTFSS      STATUS, 2
0x0A94	0x3000      	MOVLW      0
0x0A95	0x00F0      	MOVWF      R0
0x0A96	0x0871      	MOVF       R1, 0
0x0A97	0x05F0      	ANDWF      R0, 1
0x0A98	0x1903      	BTFSC      STATUS, 2
0x0A99	0x2AAA      	GOTO       L_main135
;demo_simple_8.c,797 :: 		LCD_Chr_Cp('O');
0x0A9A	0x304F      	MOVLW      79
0x0A9B	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0A9C	0x118A      	BCF        PCLATH, 3
0x0A9D	0x20E1      	CALL       _Lcd_Chr_CP
0x0A9E	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,798 :: 		LCD_Chr_Cp('n');
0x0A9F	0x306E      	MOVLW      110
0x0AA0	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AA1	0x118A      	BCF        PCLATH, 3
0x0AA2	0x20E1      	CALL       _Lcd_Chr_CP
0x0AA3	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,799 :: 		pad(3);
0x0AA4	0x3003      	MOVLW      3
0x0AA5	0x00E7      	MOVWF      FARG_pad_c
0x0AA6	0x118A      	BCF        PCLATH, 3
0x0AA7	0x21DB      	CALL       _pad
0x0AA8	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,800 :: 		}
0x0AA9	0x2BA5      	GOTO       L_main136
L_main135:
;demo_simple_8.c,801 :: 		else if ((inverterState == inv_off) | (mode == mode_mains)){
0x0AAA	0x083F      	MOVF       _inverterState, 0
0x0AAB	0x3A03      	XORLW      3
0x0AAC	0x3001      	MOVLW      1
0x0AAD	0x1D03      	BTFSS      STATUS, 2
0x0AAE	0x3000      	MOVLW      0
0x0AAF	0x00F1      	MOVWF      R1
0x0AB0	0x0842      	MOVF       _mode, 0
0x0AB1	0x3A01      	XORLW      1
0x0AB2	0x3001      	MOVLW      1
0x0AB3	0x1D03      	BTFSS      STATUS, 2
0x0AB4	0x3000      	MOVLW      0
0x0AB5	0x00F0      	MOVWF      R0
0x0AB6	0x0871      	MOVF       R1, 0
0x0AB7	0x04F0      	IORWF      R0, 1
0x0AB8	0x1903      	BTFSC      STATUS, 2
0x0AB9	0x2B17      	GOTO       L_main137
;demo_simple_8.c,802 :: 		LCD_Chr_Cp('O');
0x0ABA	0x304F      	MOVLW      79
0x0ABB	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0ABC	0x118A      	BCF        PCLATH, 3
0x0ABD	0x20E1      	CALL       _Lcd_Chr_CP
0x0ABE	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,803 :: 		LCD_Chr_Cp('f');
0x0ABF	0x3066      	MOVLW      102
0x0AC0	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AC1	0x118A      	BCF        PCLATH, 3
0x0AC2	0x20E1      	CALL       _Lcd_Chr_CP
0x0AC3	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,804 :: 		LCD_Chr_Cp('f');
0x0AC4	0x3066      	MOVLW      102
0x0AC5	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AC6	0x118A      	BCF        PCLATH, 3
0x0AC7	0x20E1      	CALL       _Lcd_Chr_CP
0x0AC8	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,805 :: 		pad(2);
0x0AC9	0x3002      	MOVLW      2
0x0ACA	0x00E7      	MOVWF      FARG_pad_c
0x0ACB	0x118A      	BCF        PCLATH, 3
0x0ACC	0x21DB      	CALL       _pad
0x0ACD	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,806 :: 		LCD_Chr(2, 4, 'S');
0x0ACE	0x3002      	MOVLW      2
0x0ACF	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0AD0	0x3004      	MOVLW      4
0x0AD1	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0AD2	0x3053      	MOVLW      83
0x0AD3	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0AD4	0x118A      	BCF        PCLATH, 3
0x0AD5	0x20F7      	CALL       _Lcd_Chr
0x0AD6	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,807 :: 		LCD_Chr_Cp('w');
0x0AD7	0x3077      	MOVLW      119
0x0AD8	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AD9	0x118A      	BCF        PCLATH, 3
0x0ADA	0x20E1      	CALL       _Lcd_Chr_CP
0x0ADB	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,808 :: 		LCD_Chr_Cp('i');
0x0ADC	0x3069      	MOVLW      105
0x0ADD	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0ADE	0x118A      	BCF        PCLATH, 3
0x0ADF	0x20E1      	CALL       _Lcd_Chr_CP
0x0AE0	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,809 :: 		LCD_Chr_Cp('t');
0x0AE1	0x3074      	MOVLW      116
0x0AE2	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AE3	0x118A      	BCF        PCLATH, 3
0x0AE4	0x20E1      	CALL       _Lcd_Chr_CP
0x0AE5	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,810 :: 		LCD_Chr_Cp('c');
0x0AE6	0x3063      	MOVLW      99
0x0AE7	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AE8	0x118A      	BCF        PCLATH, 3
0x0AE9	0x20E1      	CALL       _Lcd_Chr_CP
0x0AEA	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,811 :: 		LCD_Chr_Cp('h');
0x0AEB	0x3068      	MOVLW      104
0x0AEC	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AED	0x118A      	BCF        PCLATH, 3
0x0AEE	0x20E1      	CALL       _Lcd_Chr_CP
0x0AEF	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,812 :: 		LCD_Chr_Cp(' ');
0x0AF0	0x3020      	MOVLW      32
0x0AF1	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AF2	0x118A      	BCF        PCLATH, 3
0x0AF3	0x20E1      	CALL       _Lcd_Chr_CP
0x0AF4	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,813 :: 		if (inverterSw == 1){
0x0AF5	0x1E86      	BTFSS      RB5_bit, 5
0x0AF6	0x2B07      	GOTO       L_main138
;demo_simple_8.c,814 :: 		LCD_Chr_Cp('O');
0x0AF7	0x304F      	MOVLW      79
0x0AF8	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AF9	0x118A      	BCF        PCLATH, 3
0x0AFA	0x20E1      	CALL       _Lcd_Chr_CP
0x0AFB	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,815 :: 		LCD_Chr_Cp('f');
0x0AFC	0x3066      	MOVLW      102
0x0AFD	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0AFE	0x118A      	BCF        PCLATH, 3
0x0AFF	0x20E1      	CALL       _Lcd_Chr_CP
0x0B00	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,816 :: 		LCD_Chr_Cp('f');
0x0B01	0x3066      	MOVLW      102
0x0B02	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B03	0x118A      	BCF        PCLATH, 3
0x0B04	0x20E1      	CALL       _Lcd_Chr_CP
0x0B05	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,817 :: 		}
0x0B06	0x2B16      	GOTO       L_main139
L_main138:
;demo_simple_8.c,819 :: 		LCD_Chr_Cp('O');
0x0B07	0x304F      	MOVLW      79
0x0B08	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B09	0x118A      	BCF        PCLATH, 3
0x0B0A	0x20E1      	CALL       _Lcd_Chr_CP
0x0B0B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,820 :: 		LCD_Chr_Cp('n');
0x0B0C	0x306E      	MOVLW      110
0x0B0D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B0E	0x118A      	BCF        PCLATH, 3
0x0B0F	0x20E1      	CALL       _Lcd_Chr_CP
0x0B10	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,821 :: 		pad(2);
0x0B11	0x3002      	MOVLW      2
0x0B12	0x00E7      	MOVWF      FARG_pad_c
0x0B13	0x118A      	BCF        PCLATH, 3
0x0B14	0x21DB      	CALL       _pad
0x0B15	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,822 :: 		}
L_main139:
;demo_simple_8.c,823 :: 		}
0x0B16	0x2BA5      	GOTO       L_main140
L_main137:
;demo_simple_8.c,825 :: 		LCD_Chr_Cp('O');
0x0B17	0x304F      	MOVLW      79
0x0B18	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B19	0x118A      	BCF        PCLATH, 3
0x0B1A	0x20E1      	CALL       _Lcd_Chr_CP
0x0B1B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,826 :: 		LCD_Chr_Cp('f');
0x0B1C	0x3066      	MOVLW      102
0x0B1D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B1E	0x118A      	BCF        PCLATH, 3
0x0B1F	0x20E1      	CALL       _Lcd_Chr_CP
0x0B20	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,827 :: 		LCD_Chr_Cp('f');
0x0B21	0x3066      	MOVLW      102
0x0B22	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B23	0x118A      	BCF        PCLATH, 3
0x0B24	0x20E1      	CALL       _Lcd_Chr_CP
0x0B25	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,828 :: 		pad(2);
0x0B26	0x3002      	MOVLW      2
0x0B27	0x00E7      	MOVWF      FARG_pad_c
0x0B28	0x118A      	BCF        PCLATH, 3
0x0B29	0x21DB      	CALL       _pad
0x0B2A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,830 :: 		if (inverterState == inv_lowbattery){
0x0B2B	0x083F      	MOVF       _inverterState, 0
0x0B2C	0x3A01      	XORLW      1
0x0B2D	0x1D03      	BTFSS      STATUS, 2
0x0B2E	0x2B6B      	GOTO       L_main141
;demo_simple_8.c,831 :: 		LCD_Chr(2, 1, 'B');
0x0B2F	0x3002      	MOVLW      2
0x0B30	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0B31	0x3001      	MOVLW      1
0x0B32	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0B33	0x3042      	MOVLW      66
0x0B34	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0B35	0x118A      	BCF        PCLATH, 3
0x0B36	0x20F7      	CALL       _Lcd_Chr
0x0B37	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,832 :: 		LCD_Chr_Cp('a');
0x0B38	0x3061      	MOVLW      97
0x0B39	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B3A	0x118A      	BCF        PCLATH, 3
0x0B3B	0x20E1      	CALL       _Lcd_Chr_CP
0x0B3C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,833 :: 		LCD_Chr_Cp('t');
0x0B3D	0x3074      	MOVLW      116
0x0B3E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B3F	0x118A      	BCF        PCLATH, 3
0x0B40	0x20E1      	CALL       _Lcd_Chr_CP
0x0B41	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,834 :: 		LCD_Chr_Cp('t');
0x0B42	0x3074      	MOVLW      116
0x0B43	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B44	0x118A      	BCF        PCLATH, 3
0x0B45	0x20E1      	CALL       _Lcd_Chr_CP
0x0B46	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,835 :: 		LCD_Chr_Cp('e');
0x0B47	0x3065      	MOVLW      101
0x0B48	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B49	0x118A      	BCF        PCLATH, 3
0x0B4A	0x20E1      	CALL       _Lcd_Chr_CP
0x0B4B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,836 :: 		LCD_Chr_Cp('r');
0x0B4C	0x3072      	MOVLW      114
0x0B4D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B4E	0x118A      	BCF        PCLATH, 3
0x0B4F	0x20E1      	CALL       _Lcd_Chr_CP
0x0B50	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,837 :: 		LCD_Chr_Cp('y');
0x0B51	0x3079      	MOVLW      121
0x0B52	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B53	0x118A      	BCF        PCLATH, 3
0x0B54	0x20E1      	CALL       _Lcd_Chr_CP
0x0B55	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,838 :: 		LCD_Chr_Cp(' ');
0x0B56	0x3020      	MOVLW      32
0x0B57	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B58	0x118A      	BCF        PCLATH, 3
0x0B59	0x20E1      	CALL       _Lcd_Chr_CP
0x0B5A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,839 :: 		LCD_Chr_Cp('L');
0x0B5B	0x304C      	MOVLW      76
0x0B5C	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B5D	0x118A      	BCF        PCLATH, 3
0x0B5E	0x20E1      	CALL       _Lcd_Chr_CP
0x0B5F	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,840 :: 		LCD_Chr_Cp('o');
0x0B60	0x306F      	MOVLW      111
0x0B61	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B62	0x118A      	BCF        PCLATH, 3
0x0B63	0x20E1      	CALL       _Lcd_Chr_CP
0x0B64	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,841 :: 		LCD_Chr_Cp('w');
0x0B65	0x3077      	MOVLW      119
0x0B66	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B67	0x118A      	BCF        PCLATH, 3
0x0B68	0x20E1      	CALL       _Lcd_Chr_CP
0x0B69	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,842 :: 		}
0x0B6A	0x2BA5      	GOTO       L_main142
L_main141:
;demo_simple_8.c,843 :: 		else if (inverterState == inv_overload){
0x0B6B	0x083F      	MOVF       _inverterState, 0
0x0B6C	0x3A02      	XORLW      2
0x0B6D	0x1D03      	BTFSS      STATUS, 2
0x0B6E	0x2BA5      	GOTO       L_main143
;demo_simple_8.c,844 :: 		LCD_Chr(2, 1, ' ');
0x0B6F	0x3002      	MOVLW      2
0x0B70	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0B71	0x3001      	MOVLW      1
0x0B72	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0B73	0x3020      	MOVLW      32
0x0B74	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0B75	0x118A      	BCF        PCLATH, 3
0x0B76	0x20F7      	CALL       _Lcd_Chr
0x0B77	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,845 :: 		pad(4);
0x0B78	0x3004      	MOVLW      4
0x0B79	0x00E7      	MOVWF      FARG_pad_c
0x0B7A	0x118A      	BCF        PCLATH, 3
0x0B7B	0x21DB      	CALL       _pad
0x0B7C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,846 :: 		LCD_Chr_Cp('O');
0x0B7D	0x304F      	MOVLW      79
0x0B7E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B7F	0x118A      	BCF        PCLATH, 3
0x0B80	0x20E1      	CALL       _Lcd_Chr_CP
0x0B81	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,847 :: 		LCD_Chr_Cp('v');
0x0B82	0x3076      	MOVLW      118
0x0B83	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B84	0x118A      	BCF        PCLATH, 3
0x0B85	0x20E1      	CALL       _Lcd_Chr_CP
0x0B86	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,848 :: 		LCD_Chr_Cp('e');
0x0B87	0x3065      	MOVLW      101
0x0B88	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B89	0x118A      	BCF        PCLATH, 3
0x0B8A	0x20E1      	CALL       _Lcd_Chr_CP
0x0B8B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,849 :: 		LCD_Chr_Cp('r');
0x0B8C	0x3072      	MOVLW      114
0x0B8D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B8E	0x118A      	BCF        PCLATH, 3
0x0B8F	0x20E1      	CALL       _Lcd_Chr_CP
0x0B90	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,850 :: 		LCD_Chr_Cp('l');
0x0B91	0x306C      	MOVLW      108
0x0B92	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B93	0x118A      	BCF        PCLATH, 3
0x0B94	0x20E1      	CALL       _Lcd_Chr_CP
0x0B95	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,851 :: 		LCD_Chr_Cp('o');
0x0B96	0x306F      	MOVLW      111
0x0B97	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B98	0x118A      	BCF        PCLATH, 3
0x0B99	0x20E1      	CALL       _Lcd_Chr_CP
0x0B9A	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,852 :: 		LCD_Chr_Cp('a');
0x0B9B	0x3061      	MOVLW      97
0x0B9C	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0B9D	0x118A      	BCF        PCLATH, 3
0x0B9E	0x20E1      	CALL       _Lcd_Chr_CP
0x0B9F	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,853 :: 		LCD_Chr_Cp('d');
0x0BA0	0x3064      	MOVLW      100
0x0BA1	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BA2	0x118A      	BCF        PCLATH, 3
0x0BA3	0x20E1      	CALL       _Lcd_Chr_CP
0x0BA4	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,854 :: 		}
L_main143:
L_main142:
;demo_simple_8.c,855 :: 		}
L_main140:
L_main136:
;demo_simple_8.c,856 :: 		break;
0x0BA5	0x2E49      	GOTO       L_main125
;demo_simple_8.c,857 :: 		case 4:    // show battery state
L_main144:
;demo_simple_8.c,858 :: 		LCD_Chr(1, 1, 'B');
0x0BA6	0x3001      	MOVLW      1
0x0BA7	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0BA8	0x3001      	MOVLW      1
0x0BA9	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0BAA	0x3042      	MOVLW      66
0x0BAB	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0BAC	0x118A      	BCF        PCLATH, 3
0x0BAD	0x20F7      	CALL       _Lcd_Chr
0x0BAE	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,859 :: 		LCD_Chr_Cp('a');
0x0BAF	0x3061      	MOVLW      97
0x0BB0	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BB1	0x118A      	BCF        PCLATH, 3
0x0BB2	0x20E1      	CALL       _Lcd_Chr_CP
0x0BB3	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,860 :: 		LCD_Chr_Cp('t');
0x0BB4	0x3074      	MOVLW      116
0x0BB5	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BB6	0x118A      	BCF        PCLATH, 3
0x0BB7	0x20E1      	CALL       _Lcd_Chr_CP
0x0BB8	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,861 :: 		LCD_Chr_Cp('t');
0x0BB9	0x3074      	MOVLW      116
0x0BBA	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BBB	0x118A      	BCF        PCLATH, 3
0x0BBC	0x20E1      	CALL       _Lcd_Chr_CP
0x0BBD	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,862 :: 		LCD_Chr_Cp('e');
0x0BBE	0x3065      	MOVLW      101
0x0BBF	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BC0	0x118A      	BCF        PCLATH, 3
0x0BC1	0x20E1      	CALL       _Lcd_Chr_CP
0x0BC2	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,863 :: 		LCD_Chr_Cp('r');
0x0BC3	0x3072      	MOVLW      114
0x0BC4	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BC5	0x118A      	BCF        PCLATH, 3
0x0BC6	0x20E1      	CALL       _Lcd_Chr_CP
0x0BC7	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,864 :: 		LCD_Chr_Cp('y');
0x0BC8	0x3079      	MOVLW      121
0x0BC9	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BCA	0x118A      	BCF        PCLATH, 3
0x0BCB	0x20E1      	CALL       _Lcd_Chr_CP
0x0BCC	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,865 :: 		LCD_Chr_Cp(' ');
0x0BCD	0x3020      	MOVLW      32
0x0BCE	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BCF	0x118A      	BCF        PCLATH, 3
0x0BD0	0x20E1      	CALL       _Lcd_Chr_CP
0x0BD1	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,866 :: 		LCD_Chr_Cp('V');
0x0BD2	0x3056      	MOVLW      86
0x0BD3	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BD4	0x118A      	BCF        PCLATH, 3
0x0BD5	0x20E1      	CALL       _Lcd_Chr_CP
0x0BD6	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,867 :: 		LCD_Chr_Cp(':');
0x0BD7	0x303A      	MOVLW      58
0x0BD8	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BD9	0x118A      	BCF        PCLATH, 3
0x0BDA	0x20E1      	CALL       _Lcd_Chr_CP
0x0BDB	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,869 :: 		num = vBat;
0x0BDC	0x0840      	MOVF       _vBat, 0
0x0BDD	0x00D5      	MOVWF      _num
0x0BDE	0x0841      	MOVF       _vBat+1, 0
0x0BDF	0x00D6      	MOVWF      _num+1
;demo_simple_8.c,870 :: 		numToOne();
0x0BE0	0x118A      	BCF        PCLATH, 3
0x0BE1	0x2515      	CALL       _numToOne
0x0BE2	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,871 :: 		LCD_Chr(1, 12, hundreds);
0x0BE3	0x3001      	MOVLW      1
0x0BE4	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0BE5	0x300C      	MOVLW      12
0x0BE6	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0BE7	0x0854      	MOVF       _hundreds, 0
0x0BE8	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0BE9	0x118A      	BCF        PCLATH, 3
0x0BEA	0x20F7      	CALL       _Lcd_Chr
0x0BEB	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,872 :: 		LCD_Chr_Cp( tens);
0x0BEC	0x085E      	MOVF       _tens, 0
0x0BED	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BEE	0x118A      	BCF        PCLATH, 3
0x0BEF	0x20E1      	CALL       _Lcd_Chr_CP
0x0BF0	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,873 :: 		LCD_Chr_Cp('.');
0x0BF1	0x302E      	MOVLW      46
0x0BF2	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BF3	0x118A      	BCF        PCLATH, 3
0x0BF4	0x20E1      	CALL       _Lcd_Chr_CP
0x0BF5	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,874 :: 		LCD_Chr_Cp( ones);
0x0BF6	0x085F      	MOVF       _ones, 0
0x0BF7	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BF8	0x118A      	BCF        PCLATH, 3
0x0BF9	0x20E1      	CALL       _Lcd_Chr_CP
0x0BFA	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,875 :: 		LCD_Chr_Cp('V');
0x0BFB	0x3056      	MOVLW      86
0x0BFC	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0BFD	0x118A      	BCF        PCLATH, 3
0x0BFE	0x20E1      	CALL       _Lcd_Chr_CP
0x0BFF	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,877 :: 		LCD_Chr(2, 1, 'B');
0x0C00	0x3002      	MOVLW      2
0x0C01	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0C02	0x3001      	MOVLW      1
0x0C03	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0C04	0x3042      	MOVLW      66
0x0C05	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0C06	0x118A      	BCF        PCLATH, 3
0x0C07	0x20F7      	CALL       _Lcd_Chr
0x0C08	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,878 :: 		LCD_Chr_Cp('a');
0x0C09	0x3061      	MOVLW      97
0x0C0A	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C0B	0x118A      	BCF        PCLATH, 3
0x0C0C	0x20E1      	CALL       _Lcd_Chr_CP
0x0C0D	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,879 :: 		LCD_Chr_Cp('t');
0x0C0E	0x3074      	MOVLW      116
0x0C0F	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C10	0x118A      	BCF        PCLATH, 3
0x0C11	0x20E1      	CALL       _Lcd_Chr_CP
0x0C12	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,880 :: 		LCD_Chr_Cp('t');
0x0C13	0x3074      	MOVLW      116
0x0C14	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C15	0x118A      	BCF        PCLATH, 3
0x0C16	0x20E1      	CALL       _Lcd_Chr_CP
0x0C17	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,881 :: 		LCD_Chr_Cp('e');
0x0C18	0x3065      	MOVLW      101
0x0C19	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C1A	0x118A      	BCF        PCLATH, 3
0x0C1B	0x20E1      	CALL       _Lcd_Chr_CP
0x0C1C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,882 :: 		LCD_Chr_Cp('r');
0x0C1D	0x3072      	MOVLW      114
0x0C1E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C1F	0x118A      	BCF        PCLATH, 3
0x0C20	0x20E1      	CALL       _Lcd_Chr_CP
0x0C21	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,883 :: 		LCD_Chr_Cp('y');
0x0C22	0x3079      	MOVLW      121
0x0C23	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C24	0x118A      	BCF        PCLATH, 3
0x0C25	0x20E1      	CALL       _Lcd_Chr_CP
0x0C26	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,884 :: 		LCD_Chr_Cp(' ');
0x0C27	0x3020      	MOVLW      32
0x0C28	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C29	0x118A      	BCF        PCLATH, 3
0x0C2A	0x20E1      	CALL       _Lcd_Chr_CP
0x0C2B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,886 :: 		if (batteryState == batteryLow){
0x0C2C	0x0826      	MOVF       _batteryState, 0
0x0C2D	0x3A02      	XORLW      2
0x0C2E	0x1D03      	BTFSS      STATUS, 2
0x0C2F	0x2C45      	GOTO       L_main145
;demo_simple_8.c,887 :: 		LCD_Chr_Cp('L');
0x0C30	0x304C      	MOVLW      76
0x0C31	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C32	0x118A      	BCF        PCLATH, 3
0x0C33	0x20E1      	CALL       _Lcd_Chr_CP
0x0C34	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,888 :: 		LCD_Chr_Cp('o');
0x0C35	0x306F      	MOVLW      111
0x0C36	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C37	0x118A      	BCF        PCLATH, 3
0x0C38	0x20E1      	CALL       _Lcd_Chr_CP
0x0C39	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,889 :: 		LCD_Chr_Cp('w');
0x0C3A	0x3077      	MOVLW      119
0x0C3B	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C3C	0x118A      	BCF        PCLATH, 3
0x0C3D	0x20E1      	CALL       _Lcd_Chr_CP
0x0C3E	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,890 :: 		pad(1);
0x0C3F	0x3001      	MOVLW      1
0x0C40	0x00E7      	MOVWF      FARG_pad_c
0x0C41	0x118A      	BCF        PCLATH, 3
0x0C42	0x21DB      	CALL       _pad
0x0C43	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,891 :: 		}
0x0C44	0x2C91      	GOTO       L_main146
L_main145:
;demo_simple_8.c,892 :: 		else if ((batteryState == batteryHigh) | (batteryState == batteryPause)) {
0x0C45	0x0826      	MOVF       _batteryState, 0
0x0C46	0x3A04      	XORLW      4
0x0C47	0x3001      	MOVLW      1
0x0C48	0x1D03      	BTFSS      STATUS, 2
0x0C49	0x3000      	MOVLW      0
0x0C4A	0x00F1      	MOVWF      R1
0x0C4B	0x0826      	MOVF       _batteryState, 0
0x0C4C	0x3A05      	XORLW      5
0x0C4D	0x3001      	MOVLW      1
0x0C4E	0x1D03      	BTFSS      STATUS, 2
0x0C4F	0x3000      	MOVLW      0
0x0C50	0x00F0      	MOVWF      R0
0x0C51	0x0871      	MOVF       R1, 0
0x0C52	0x04F0      	IORWF      R0, 1
0x0C53	0x1903      	BTFSC      STATUS, 2
0x0C54	0x2C82      	GOTO       L_main147
;demo_simple_8.c,893 :: 		if (hicutreached){
0x0C55	0x083D      	MOVF       _hicutreached, 0
0x0C56	0x1903      	BTFSC      STATUS, 2
0x0C57	0x2C72      	GOTO       L_main148
;demo_simple_8.c,894 :: 		LCD_Chr_Cp('F');
0x0C58	0x3046      	MOVLW      70
0x0C59	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C5A	0x118A      	BCF        PCLATH, 3
0x0C5B	0x20E1      	CALL       _Lcd_Chr_CP
0x0C5C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,895 :: 		LCD_Chr_Cp('u');
0x0C5D	0x3075      	MOVLW      117
0x0C5E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C5F	0x118A      	BCF        PCLATH, 3
0x0C60	0x20E1      	CALL       _Lcd_Chr_CP
0x0C61	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,896 :: 		LCD_Chr_Cp('l');
0x0C62	0x306C      	MOVLW      108
0x0C63	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C64	0x118A      	BCF        PCLATH, 3
0x0C65	0x20E1      	CALL       _Lcd_Chr_CP
0x0C66	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,897 :: 		LCD_Chr_Cp('l');
0x0C67	0x306C      	MOVLW      108
0x0C68	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C69	0x118A      	BCF        PCLATH, 3
0x0C6A	0x20E1      	CALL       _Lcd_Chr_CP
0x0C6B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,898 :: 		pad(2);
0x0C6C	0x3002      	MOVLW      2
0x0C6D	0x00E7      	MOVWF      FARG_pad_c
0x0C6E	0x118A      	BCF        PCLATH, 3
0x0C6F	0x21DB      	CALL       _pad
0x0C70	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,899 :: 		}
0x0C71	0x2C81      	GOTO       L_main149
L_main148:
;demo_simple_8.c,901 :: 		LCD_Chr_Cp('O');
0x0C72	0x304F      	MOVLW      79
0x0C73	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C74	0x118A      	BCF        PCLATH, 3
0x0C75	0x20E1      	CALL       _Lcd_Chr_CP
0x0C76	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,902 :: 		LCD_Chr_Cp('K');
0x0C77	0x304B      	MOVLW      75
0x0C78	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C79	0x118A      	BCF        PCLATH, 3
0x0C7A	0x20E1      	CALL       _Lcd_Chr_CP
0x0C7B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,903 :: 		pad(4);
0x0C7C	0x3004      	MOVLW      4
0x0C7D	0x00E7      	MOVWF      FARG_pad_c
0x0C7E	0x118A      	BCF        PCLATH, 3
0x0C7F	0x21DB      	CALL       _pad
0x0C80	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,904 :: 		}
L_main149:
;demo_simple_8.c,905 :: 		}
0x0C81	0x2C91      	GOTO       L_main150
L_main147:
;demo_simple_8.c,907 :: 		LCD_Chr_Cp('O');
0x0C82	0x304F      	MOVLW      79
0x0C83	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C84	0x118A      	BCF        PCLATH, 3
0x0C85	0x20E1      	CALL       _Lcd_Chr_CP
0x0C86	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,908 :: 		LCD_Chr_Cp('K');
0x0C87	0x304B      	MOVLW      75
0x0C88	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0C89	0x118A      	BCF        PCLATH, 3
0x0C8A	0x20E1      	CALL       _Lcd_Chr_CP
0x0C8B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,909 :: 		pad(4);
0x0C8C	0x3004      	MOVLW      4
0x0C8D	0x00E7      	MOVWF      FARG_pad_c
0x0C8E	0x118A      	BCF        PCLATH, 3
0x0C8F	0x21DB      	CALL       _pad
0x0C90	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,910 :: 		}
L_main150:
L_main146:
;demo_simple_8.c,912 :: 		if (inverterState == inv_normal){
0x0C91	0x083F      	MOVF       _inverterState, 0
0x0C92	0x3A00      	XORLW      0
0x0C93	0x1D03      	BTFSS      STATUS, 2
0x0C94	0x2C9E      	GOTO       L_main151
;demo_simple_8.c,913 :: 		lv1 = 104;
0x0C95	0x3068      	MOVLW      104
0x0C96	0x00C7      	MOVWF      _lv1
;demo_simple_8.c,914 :: 		lv2 = 108;
0x0C97	0x306C      	MOVLW      108
0x0C98	0x00C8      	MOVWF      _lv2
;demo_simple_8.c,915 :: 		lv3 = 113;
0x0C99	0x3071      	MOVLW      113
0x0C9A	0x00C9      	MOVWF      _lv3
;demo_simple_8.c,916 :: 		lv4 = 117;
0x0C9B	0x3075      	MOVLW      117
0x0C9C	0x00C3      	MOVWF      _lv4
;demo_simple_8.c,917 :: 		}
0x0C9D	0x2CBF      	GOTO       L_main152
L_main151:
;demo_simple_8.c,918 :: 		else if (mode == mode_mains){
0x0C9E	0x0842      	MOVF       _mode, 0
0x0C9F	0x3A01      	XORLW      1
0x0CA0	0x1D03      	BTFSS      STATUS, 2
0x0CA1	0x2CB7      	GOTO       L_main153
;demo_simple_8.c,919 :: 		if (hicutreached){
0x0CA2	0x083D      	MOVF       _hicutreached, 0
0x0CA3	0x1903      	BTFSC      STATUS, 2
0x0CA4	0x2CAE      	GOTO       L_main154
;demo_simple_8.c,920 :: 		lv1 = 104;
0x0CA5	0x3068      	MOVLW      104
0x0CA6	0x00C7      	MOVWF      _lv1
;demo_simple_8.c,921 :: 		lv2 = 108;
0x0CA7	0x306C      	MOVLW      108
0x0CA8	0x00C8      	MOVWF      _lv2
;demo_simple_8.c,922 :: 		lv3 = 113;
0x0CA9	0x3071      	MOVLW      113
0x0CAA	0x00C9      	MOVWF      _lv3
;demo_simple_8.c,923 :: 		lv4 = 117;
0x0CAB	0x3075      	MOVLW      117
0x0CAC	0x00C3      	MOVWF      _lv4
;demo_simple_8.c,925 :: 		}
0x0CAD	0x2CB6      	GOTO       L_main155
L_main154:
;demo_simple_8.c,927 :: 		lv1 = 113;
0x0CAE	0x3071      	MOVLW      113
0x0CAF	0x00C7      	MOVWF      _lv1
;demo_simple_8.c,928 :: 		lv2 = 120;
0x0CB0	0x3078      	MOVLW      120
0x0CB1	0x00C8      	MOVWF      _lv2
;demo_simple_8.c,929 :: 		lv3 = 125;
0x0CB2	0x307D      	MOVLW      125
0x0CB3	0x00C9      	MOVWF      _lv3
;demo_simple_8.c,930 :: 		lv4 = 135;
0x0CB4	0x3087      	MOVLW      135
0x0CB5	0x00C3      	MOVWF      _lv4
;demo_simple_8.c,931 :: 		}
L_main155:
;demo_simple_8.c,932 :: 		}
0x0CB6	0x2CBF      	GOTO       L_main156
L_main153:
;demo_simple_8.c,934 :: 		lv1 = 115;
0x0CB7	0x3073      	MOVLW      115
0x0CB8	0x00C7      	MOVWF      _lv1
;demo_simple_8.c,935 :: 		lv2 = 118;
0x0CB9	0x3076      	MOVLW      118
0x0CBA	0x00C8      	MOVWF      _lv2
;demo_simple_8.c,936 :: 		lv3 = 121;
0x0CBB	0x3079      	MOVLW      121
0x0CBC	0x00C9      	MOVWF      _lv3
;demo_simple_8.c,937 :: 		lv4 = 123;
0x0CBD	0x307B      	MOVLW      123
0x0CBE	0x00C3      	MOVWF      _lv4
;demo_simple_8.c,938 :: 		}
L_main156:
L_main152:
;demo_simple_8.c,940 :: 		if (vBat < lv1){
0x0CBF	0x3000      	MOVLW      0
0x0CC0	0x0241      	SUBWF      _vBat+1, 0
0x0CC1	0x1D03      	BTFSS      STATUS, 2
0x0CC2	0x2CC5      	GOTO       L__main196
0x0CC3	0x0847      	MOVF       _lv1, 0
0x0CC4	0x0240      	SUBWF      _vBat, 0
L__main196:
0x0CC5	0x1803      	BTFSC      STATUS, 0
0x0CC6	0x2CCA      	GOTO       L_main157
;demo_simple_8.c,941 :: 		batlv = 1;
0x0CC7	0x3001      	MOVLW      1
0x0CC8	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,942 :: 		}
0x0CC9	0x2CED      	GOTO       L_main158
L_main157:
;demo_simple_8.c,943 :: 		else if (vBat < lv2){
0x0CCA	0x3000      	MOVLW      0
0x0CCB	0x0241      	SUBWF      _vBat+1, 0
0x0CCC	0x1D03      	BTFSS      STATUS, 2
0x0CCD	0x2CD0      	GOTO       L__main197
0x0CCE	0x0848      	MOVF       _lv2, 0
0x0CCF	0x0240      	SUBWF      _vBat, 0
L__main197:
0x0CD0	0x1803      	BTFSC      STATUS, 0
0x0CD1	0x2CD5      	GOTO       L_main159
;demo_simple_8.c,944 :: 		batlv = 2;
0x0CD2	0x3002      	MOVLW      2
0x0CD3	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,945 :: 		}
0x0CD4	0x2CED      	GOTO       L_main160
L_main159:
;demo_simple_8.c,946 :: 		else if (vBat < lv3){
0x0CD5	0x3000      	MOVLW      0
0x0CD6	0x0241      	SUBWF      _vBat+1, 0
0x0CD7	0x1D03      	BTFSS      STATUS, 2
0x0CD8	0x2CDB      	GOTO       L__main198
0x0CD9	0x0849      	MOVF       _lv3, 0
0x0CDA	0x0240      	SUBWF      _vBat, 0
L__main198:
0x0CDB	0x1803      	BTFSC      STATUS, 0
0x0CDC	0x2CE0      	GOTO       L_main161
;demo_simple_8.c,947 :: 		batlv = 3;
0x0CDD	0x3003      	MOVLW      3
0x0CDE	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,948 :: 		}
0x0CDF	0x2CED      	GOTO       L_main162
L_main161:
;demo_simple_8.c,949 :: 		else if (vBat < lv4){
0x0CE0	0x3000      	MOVLW      0
0x0CE1	0x0241      	SUBWF      _vBat+1, 0
0x0CE2	0x1D03      	BTFSS      STATUS, 2
0x0CE3	0x2CE6      	GOTO       L__main199
0x0CE4	0x0843      	MOVF       _lv4, 0
0x0CE5	0x0240      	SUBWF      _vBat, 0
L__main199:
0x0CE6	0x1803      	BTFSC      STATUS, 0
0x0CE7	0x2CEB      	GOTO       L_main163
;demo_simple_8.c,950 :: 		batlv = 4;
0x0CE8	0x3004      	MOVLW      4
0x0CE9	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,951 :: 		}
0x0CEA	0x2CED      	GOTO       L_main164
L_main163:
;demo_simple_8.c,953 :: 		batlv = 5;
0x0CEB	0x3005      	MOVLW      5
0x0CEC	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,954 :: 		}
L_main164:
L_main162:
L_main160:
L_main158:
;demo_simple_8.c,956 :: 		batteryIcon(2,15);
0x0CED	0x3002      	MOVLW      2
0x0CEE	0x00E7      	MOVWF      FARG_batteryIcon_pos_row
0x0CEF	0x300F      	MOVLW      15
0x0CF0	0x00E8      	MOVWF      FARG_batteryIcon_pos_char
0x0CF1	0x118A      	BCF        PCLATH, 3
0x0CF2	0x22EC      	CALL       _batteryIcon
0x0CF3	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,958 :: 		break;
0x0CF4	0x2E49      	GOTO       L_main125
;demo_simple_8.c,960 :: 		case 5:    // show charging state
L_main165:
;demo_simple_8.c,961 :: 		LCD_Chr(1, 2, 'C');
0x0CF5	0x3001      	MOVLW      1
0x0CF6	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0CF7	0x3002      	MOVLW      2
0x0CF8	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0CF9	0x3043      	MOVLW      67
0x0CFA	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0CFB	0x118A      	BCF        PCLATH, 3
0x0CFC	0x20F7      	CALL       _Lcd_Chr
0x0CFD	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,962 :: 		LCD_Chr_Cp('h');
0x0CFE	0x3068      	MOVLW      104
0x0CFF	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D00	0x118A      	BCF        PCLATH, 3
0x0D01	0x20E1      	CALL       _Lcd_Chr_CP
0x0D02	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,963 :: 		LCD_Chr_Cp('a');
0x0D03	0x3061      	MOVLW      97
0x0D04	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D05	0x118A      	BCF        PCLATH, 3
0x0D06	0x20E1      	CALL       _Lcd_Chr_CP
0x0D07	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,964 :: 		LCD_Chr_Cp('r');
0x0D08	0x3072      	MOVLW      114
0x0D09	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D0A	0x118A      	BCF        PCLATH, 3
0x0D0B	0x20E1      	CALL       _Lcd_Chr_CP
0x0D0C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,965 :: 		LCD_Chr_Cp('g');
0x0D0D	0x3067      	MOVLW      103
0x0D0E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D0F	0x118A      	BCF        PCLATH, 3
0x0D10	0x20E1      	CALL       _Lcd_Chr_CP
0x0D11	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,966 :: 		LCD_Chr_Cp('i');
0x0D12	0x3069      	MOVLW      105
0x0D13	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D14	0x118A      	BCF        PCLATH, 3
0x0D15	0x20E1      	CALL       _Lcd_Chr_CP
0x0D16	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,967 :: 		LCD_Chr_Cp('n');
0x0D17	0x306E      	MOVLW      110
0x0D18	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D19	0x118A      	BCF        PCLATH, 3
0x0D1A	0x20E1      	CALL       _Lcd_Chr_CP
0x0D1B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,968 :: 		LCD_Chr_Cp('g');
0x0D1C	0x3067      	MOVLW      103
0x0D1D	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D1E	0x118A      	BCF        PCLATH, 3
0x0D1F	0x20E1      	CALL       _Lcd_Chr_CP
0x0D20	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,969 :: 		LCD_Chr_Cp(' ');
0x0D21	0x3020      	MOVLW      32
0x0D22	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D23	0x118A      	BCF        PCLATH, 3
0x0D24	0x20E1      	CALL       _Lcd_Chr_CP
0x0D25	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,971 :: 		if (mode == mode_inverter){
0x0D26	0x0842      	MOVF       _mode, 0
0x0D27	0x3A00      	XORLW      0
0x0D28	0x1D03      	BTFSS      STATUS, 2
0x0D29	0x2D4D      	GOTO       L_main166
;demo_simple_8.c,972 :: 		LCD_Chr_Cp('O');
0x0D2A	0x304F      	MOVLW      79
0x0D2B	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D2C	0x118A      	BCF        PCLATH, 3
0x0D2D	0x20E1      	CALL       _Lcd_Chr_CP
0x0D2E	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,973 :: 		LCD_Chr_Cp('f');
0x0D2F	0x3066      	MOVLW      102
0x0D30	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D31	0x118A      	BCF        PCLATH, 3
0x0D32	0x20E1      	CALL       _Lcd_Chr_CP
0x0D33	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,974 :: 		LCD_Chr_Cp('f');
0x0D34	0x3066      	MOVLW      102
0x0D35	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D36	0x118A      	BCF        PCLATH, 3
0x0D37	0x20E1      	CALL       _Lcd_Chr_CP
0x0D38	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,975 :: 		pad(2);
0x0D39	0x3002      	MOVLW      2
0x0D3A	0x00E7      	MOVWF      FARG_pad_c
0x0D3B	0x118A      	BCF        PCLATH, 3
0x0D3C	0x21DB      	CALL       _pad
0x0D3D	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,976 :: 		LCD_Chr(2, 1, ' ');
0x0D3E	0x3002      	MOVLW      2
0x0D3F	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0D40	0x3001      	MOVLW      1
0x0D41	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0D42	0x3020      	MOVLW      32
0x0D43	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0D44	0x118A      	BCF        PCLATH, 3
0x0D45	0x20F7      	CALL       _Lcd_Chr
0x0D46	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,977 :: 		pad(13);
0x0D47	0x300D      	MOVLW      13
0x0D48	0x00E7      	MOVWF      FARG_pad_c
0x0D49	0x118A      	BCF        PCLATH, 3
0x0D4A	0x21DB      	CALL       _pad
0x0D4B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,978 :: 		}
0x0D4C	0x2D96      	GOTO       L_main167
L_main166:
;demo_simple_8.c,980 :: 		if (hicutreached){
0x0D4D	0x083D      	MOVF       _hicutreached, 0
0x0D4E	0x1903      	BTFSC      STATUS, 2
0x0D4F	0x2D73      	GOTO       L_main168
;demo_simple_8.c,981 :: 		LCD_Chr_Cp('F');
0x0D50	0x3046      	MOVLW      70
0x0D51	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D52	0x118A      	BCF        PCLATH, 3
0x0D53	0x20E1      	CALL       _Lcd_Chr_CP
0x0D54	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,982 :: 		LCD_Chr_Cp('u');
0x0D55	0x3075      	MOVLW      117
0x0D56	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D57	0x118A      	BCF        PCLATH, 3
0x0D58	0x20E1      	CALL       _Lcd_Chr_CP
0x0D59	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,983 :: 		LCD_Chr_Cp('l');
0x0D5A	0x306C      	MOVLW      108
0x0D5B	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D5C	0x118A      	BCF        PCLATH, 3
0x0D5D	0x20E1      	CALL       _Lcd_Chr_CP
0x0D5E	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,984 :: 		LCD_Chr_Cp('l');
0x0D5F	0x306C      	MOVLW      108
0x0D60	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0D61	0x118A      	BCF        PCLATH, 3
0x0D62	0x20E1      	CALL       _Lcd_Chr_CP
0x0D63	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,985 :: 		LCD_Chr(2, 1, ' ');
0x0D64	0x3002      	MOVLW      2
0x0D65	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0D66	0x3001      	MOVLW      1
0x0D67	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0D68	0x3020      	MOVLW      32
0x0D69	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0D6A	0x118A      	BCF        PCLATH, 3
0x0D6B	0x20F7      	CALL       _Lcd_Chr
0x0D6C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,986 :: 		pad(13);
0x0D6D	0x300D      	MOVLW      13
0x0D6E	0x00E7      	MOVWF      FARG_pad_c
0x0D6F	0x118A      	BCF        PCLATH, 3
0x0D70	0x21DB      	CALL       _pad
0x0D71	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,987 :: 		}
0x0D72	0x2D96      	GOTO       L_main169
L_main168:
;demo_simple_8.c,989 :: 		batlv = (lcdCounter * 10) / t1pr + 1;
0x0D73	0x085A      	MOVF       _lcdCounter, 0
0x0D74	0x00F0      	MOVWF      R0
0x0D75	0x300A      	MOVLW      10
0x0D76	0x00F4      	MOVWF      R4
0x0D77	0x118A      	BCF        PCLATH, 3
0x0D78	0x25A8      	CALL       _Mul_8x8_U
0x0D79	0x158A      	BSF        PCLATH, 3
0x0D7A	0x085D      	MOVF       _t1pr, 0
0x0D7B	0x00F4      	MOVWF      R4
0x0D7C	0x01F5      	CLRF       R4+1
0x0D7D	0x118A      	BCF        PCLATH, 3
0x0D7E	0x25C1      	CALL       _Div_16x16_S
0x0D7F	0x158A      	BSF        PCLATH, 3
0x0D80	0x0A70      	INCF       R0, 0
0x0D81	0x00F1      	MOVWF      R1
0x0D82	0x0871      	MOVF       R1, 0
0x0D83	0x00D8      	MOVWF      _batlv
;demo_simple_8.c,990 :: 		if (batlv > 5) batlv = batlv - 5;
0x0D84	0x0871      	MOVF       R1, 0
0x0D85	0x3C05      	SUBLW      5
0x0D86	0x1803      	BTFSC      STATUS, 0
0x0D87	0x2D8A      	GOTO       L_main170
0x0D88	0x3005      	MOVLW      5
0x0D89	0x02D8      	SUBWF      _batlv, 1
L_main170:
;demo_simple_8.c,991 :: 		batteryIcon(1, 11);
0x0D8A	0x3001      	MOVLW      1
0x0D8B	0x00E7      	MOVWF      FARG_batteryIcon_pos_row
0x0D8C	0x300B      	MOVLW      11
0x0D8D	0x00E8      	MOVWF      FARG_batteryIcon_pos_char
0x0D8E	0x118A      	BCF        PCLATH, 3
0x0D8F	0x22EC      	CALL       _batteryIcon
0x0D90	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,992 :: 		pad(6);
0x0D91	0x3006      	MOVLW      6
0x0D92	0x00E7      	MOVWF      FARG_pad_c
0x0D93	0x118A      	BCF        PCLATH, 3
0x0D94	0x21DB      	CALL       _pad
0x0D95	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,993 :: 		}
L_main169:
;demo_simple_8.c,994 :: 		}
L_main167:
;demo_simple_8.c,995 :: 		break;
0x0D96	0x2E49      	GOTO       L_main125
;demo_simple_8.c,996 :: 		case 6:    // show load percentage
L_main171:
;demo_simple_8.c,998 :: 		loadpc = (vShunt * 100) / ovThreshold;
0x0D97	0x083B      	MOVF       _vShunt, 0
0x0D98	0x00F0      	MOVWF      R0
0x0D99	0x083C      	MOVF       _vShunt+1, 0
0x0D9A	0x00F1      	MOVWF      R0+1
0x0D9B	0x3064      	MOVLW      100
0x0D9C	0x00F4      	MOVWF      R4
0x0D9D	0x3000      	MOVLW      0
0x0D9E	0x00F5      	MOVWF      R4+1
0x0D9F	0x118A      	BCF        PCLATH, 3
0x0DA0	0x216E      	CALL       _Mul_16x16_U
0x0DA1	0x158A      	BSF        PCLATH, 3
0x0DA2	0x0839      	MOVF       _ovThreshold, 0
0x0DA3	0x00F4      	MOVWF      R4
0x0DA4	0x083A      	MOVF       _ovThreshold+1, 0
0x0DA5	0x00F5      	MOVWF      R4+1
0x0DA6	0x118A      	BCF        PCLATH, 3
0x0DA7	0x2199      	CALL       _Div_16x16_U
0x0DA8	0x158A      	BSF        PCLATH, 3
0x0DA9	0x0870      	MOVF       R0, 0
0x0DAA	0x00C4      	MOVWF      _loadpc
0x0DAB	0x0871      	MOVF       R0+1, 0
0x0DAC	0x00C5      	MOVWF      _loadpc+1
;demo_simple_8.c,999 :: 		num = loadpc;
0x0DAD	0x0844      	MOVF       _loadpc, 0
0x0DAE	0x00D5      	MOVWF      _num
0x0DAF	0x0845      	MOVF       _loadpc+1, 0
0x0DB0	0x00D6      	MOVWF      _num+1
;demo_simple_8.c,1000 :: 		numToOne();
0x0DB1	0x118A      	BCF        PCLATH, 3
0x0DB2	0x2515      	CALL       _numToOne
0x0DB3	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1001 :: 		if (loadpc > 99) loadpc = 99;
0x0DB4	0x0845      	MOVF       _loadpc+1, 0
0x0DB5	0x3C00      	SUBLW      0
0x0DB6	0x1D03      	BTFSS      STATUS, 2
0x0DB7	0x2DBA      	GOTO       L__main200
0x0DB8	0x0844      	MOVF       _loadpc, 0
0x0DB9	0x3C63      	SUBLW      99
L__main200:
0x0DBA	0x1803      	BTFSC      STATUS, 0
0x0DBB	0x2DC0      	GOTO       L_main172
0x0DBC	0x3063      	MOVLW      99
0x0DBD	0x00C4      	MOVWF      _loadpc
0x0DBE	0x3000      	MOVLW      0
0x0DBF	0x00C5      	MOVWF      _loadpc+1
L_main172:
;demo_simple_8.c,1003 :: 		LCD_Chr(1, 1, 'I');
0x0DC0	0x3001      	MOVLW      1
0x0DC1	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0DC2	0x3001      	MOVLW      1
0x0DC3	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0DC4	0x3049      	MOVLW      73
0x0DC5	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0DC6	0x118A      	BCF        PCLATH, 3
0x0DC7	0x20F7      	CALL       _Lcd_Chr
0x0DC8	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1004 :: 		LCD_Chr_Cp('n');
0x0DC9	0x306E      	MOVLW      110
0x0DCA	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DCB	0x118A      	BCF        PCLATH, 3
0x0DCC	0x20E1      	CALL       _Lcd_Chr_CP
0x0DCD	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1005 :: 		LCD_Chr_Cp('v');
0x0DCE	0x3076      	MOVLW      118
0x0DCF	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DD0	0x118A      	BCF        PCLATH, 3
0x0DD1	0x20E1      	CALL       _Lcd_Chr_CP
0x0DD2	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1006 :: 		LCD_Chr_Cp('e');
0x0DD3	0x3065      	MOVLW      101
0x0DD4	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DD5	0x118A      	BCF        PCLATH, 3
0x0DD6	0x20E1      	CALL       _Lcd_Chr_CP
0x0DD7	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1007 :: 		LCD_Chr_Cp('r');
0x0DD8	0x3072      	MOVLW      114
0x0DD9	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DDA	0x118A      	BCF        PCLATH, 3
0x0DDB	0x20E1      	CALL       _Lcd_Chr_CP
0x0DDC	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1008 :: 		LCD_Chr_Cp('t');
0x0DDD	0x3074      	MOVLW      116
0x0DDE	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DDF	0x118A      	BCF        PCLATH, 3
0x0DE0	0x20E1      	CALL       _Lcd_Chr_CP
0x0DE1	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1009 :: 		LCD_Chr_Cp('e');
0x0DE2	0x3065      	MOVLW      101
0x0DE3	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DE4	0x118A      	BCF        PCLATH, 3
0x0DE5	0x20E1      	CALL       _Lcd_Chr_CP
0x0DE6	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1010 :: 		LCD_Chr_Cp('r');
0x0DE7	0x3072      	MOVLW      114
0x0DE8	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DE9	0x118A      	BCF        PCLATH, 3
0x0DEA	0x20E1      	CALL       _Lcd_Chr_CP
0x0DEB	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1011 :: 		LCD_Chr_Cp(' ');
0x0DEC	0x3020      	MOVLW      32
0x0DED	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DEE	0x118A      	BCF        PCLATH, 3
0x0DEF	0x20E1      	CALL       _Lcd_Chr_CP
0x0DF0	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1012 :: 		LCD_Chr_Cp('L');
0x0DF1	0x304C      	MOVLW      76
0x0DF2	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DF3	0x118A      	BCF        PCLATH, 3
0x0DF4	0x20E1      	CALL       _Lcd_Chr_CP
0x0DF5	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1013 :: 		LCD_Chr_Cp('o');
0x0DF6	0x306F      	MOVLW      111
0x0DF7	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DF8	0x118A      	BCF        PCLATH, 3
0x0DF9	0x20E1      	CALL       _Lcd_Chr_CP
0x0DFA	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1014 :: 		LCD_Chr_Cp('a');
0x0DFB	0x3061      	MOVLW      97
0x0DFC	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0DFD	0x118A      	BCF        PCLATH, 3
0x0DFE	0x20E1      	CALL       _Lcd_Chr_CP
0x0DFF	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1015 :: 		LCD_Chr_Cp('d');
0x0E00	0x3064      	MOVLW      100
0x0E01	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E02	0x118A      	BCF        PCLATH, 3
0x0E03	0x20E1      	CALL       _Lcd_Chr_CP
0x0E04	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1016 :: 		LCD_Chr_Cp(':');
0x0E05	0x303A      	MOVLW      58
0x0E06	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E07	0x118A      	BCF        PCLATH, 3
0x0E08	0x20E1      	CALL       _Lcd_Chr_CP
0x0E09	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1018 :: 		LCD_Chr(2, 5, '(');
0x0E0A	0x3002      	MOVLW      2
0x0E0B	0x00E9      	MOVWF      FARG_Lcd_Chr_row
0x0E0C	0x3005      	MOVLW      5
0x0E0D	0x00EA      	MOVWF      FARG_Lcd_Chr_column
0x0E0E	0x3028      	MOVLW      40
0x0E0F	0x00EB      	MOVWF      FARG_Lcd_Chr_out_char
0x0E10	0x118A      	BCF        PCLATH, 3
0x0E11	0x20F7      	CALL       _Lcd_Chr
0x0E12	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1019 :: 		LCD_Chr_Cp( tens );
0x0E13	0x085E      	MOVF       _tens, 0
0x0E14	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E15	0x118A      	BCF        PCLATH, 3
0x0E16	0x20E1      	CALL       _Lcd_Chr_CP
0x0E17	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1020 :: 		LCD_Chr_Cp( ones );
0x0E18	0x085F      	MOVF       _ones, 0
0x0E19	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E1A	0x118A      	BCF        PCLATH, 3
0x0E1B	0x20E1      	CALL       _Lcd_Chr_CP
0x0E1C	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1021 :: 		LCD_Chr_Cp(' ');
0x0E1D	0x3020      	MOVLW      32
0x0E1E	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E1F	0x118A      	BCF        PCLATH, 3
0x0E20	0x20E1      	CALL       _Lcd_Chr_CP
0x0E21	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1022 :: 		LCD_Chr_Cp('%');
0x0E22	0x3025      	MOVLW      37
0x0E23	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E24	0x118A      	BCF        PCLATH, 3
0x0E25	0x20E1      	CALL       _Lcd_Chr_CP
0x0E26	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1023 :: 		LCD_Chr_Cp(')');
0x0E27	0x3029      	MOVLW      41
0x0E28	0x00E9      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0E29	0x118A      	BCF        PCLATH, 3
0x0E2A	0x20E1      	CALL       _Lcd_Chr_CP
0x0E2B	0x158A      	BSF        PCLATH, 3
;demo_simple_8.c,1025 :: 		break;
0x0E2C	0x2E49      	GOTO       L_main125
;demo_simple_8.c,1030 :: 		}
L_main124:
0x0E2D	0x0860      	MOVF       _lcdState, 0
0x0E2E	0x3A00      	XORLW      0
0x0E2F	0x1903      	BTFSC      STATUS, 2
0x0E30	0x2924      	GOTO       L_main126
0x0E31	0x0860      	MOVF       _lcdState, 0
0x0E32	0x3A01      	XORLW      1
0x0E33	0x1903      	BTFSC      STATUS, 2
0x0E34	0x2924      	GOTO       L_main127
0x0E35	0x0860      	MOVF       _lcdState, 0
0x0E36	0x3A02      	XORLW      2
0x0E37	0x1903      	BTFSC      STATUS, 2
0x0E38	0x297D      	GOTO       L_main128
0x0E39	0x0860      	MOVF       _lcdState, 0
0x0E3A	0x3A03      	XORLW      3
0x0E3B	0x1903      	BTFSC      STATUS, 2
0x0E3C	0x2A59      	GOTO       L_main134
0x0E3D	0x0860      	MOVF       _lcdState, 0
0x0E3E	0x3A04      	XORLW      4
0x0E3F	0x1903      	BTFSC      STATUS, 2
0x0E40	0x2BA6      	GOTO       L_main144
0x0E41	0x0860      	MOVF       _lcdState, 0
0x0E42	0x3A05      	XORLW      5
0x0E43	0x1903      	BTFSC      STATUS, 2
0x0E44	0x2CF5      	GOTO       L_main165
0x0E45	0x0860      	MOVF       _lcdState, 0
0x0E46	0x3A06      	XORLW      6
0x0E47	0x1903      	BTFSC      STATUS, 2
0x0E48	0x2D97      	GOTO       L_main171
L_main125:
;demo_simple_8.c,1032 :: 		}
0x0E49	0x2834      	GOTO       L_main96
;demo_simple_8.c,1033 :: 		}
0x0E4A	0x2E4A      	GOTO       $+0
; end of _main
;demo_simple_8.c,64 :: _batlv4
0x062E	0x340E ;_batlv4+0
0x062F	0x341B ;_batlv4+1
0x0630	0x3411 ;_batlv4+2
0x0631	0x341F ;_batlv4+3
0x0632	0x341F ;_batlv4+4
0x0633	0x341F ;_batlv4+5
0x0634	0x341F ;_batlv4+6
0x0635	0x341F ;_batlv4+7
; end of _batlv4
;demo_simple_8.c,65 :: _batlv5
0x0636	0x340E ;_batlv5+0
0x0637	0x341F ;_batlv5+1
0x0638	0x341F ;_batlv5+2
0x0639	0x341F ;_batlv5+3
0x063A	0x341F ;_batlv5+4
0x063B	0x341F ;_batlv5+5
0x063C	0x341F ;_batlv5+6
0x063D	0x341F ;_batlv5+7
; end of _batlv5
;demo_simple_8.c,63 :: _batlv3
0x063E	0x340E ;_batlv3+0
0x063F	0x341B ;_batlv3+1
0x0640	0x3411 ;_batlv3+2
0x0641	0x3411 ;_batlv3+3
0x0642	0x341F ;_batlv3+4
0x0643	0x341F ;_batlv3+5
0x0644	0x341F ;_batlv3+6
0x0645	0x341F ;_batlv3+7
; end of _batlv3
;demo_simple_8.c,61 :: _batlv1
0x0646	0x340E ;_batlv1+0
0x0647	0x341B ;_batlv1+1
0x0648	0x3411 ;_batlv1+2
0x0649	0x3411 ;_batlv1+3
0x064A	0x3411 ;_batlv1+4
0x064B	0x3411 ;_batlv1+5
0x064C	0x341F ;_batlv1+6
0x064D	0x341F ;_batlv1+7
; end of _batlv1
;demo_simple_8.c,62 :: _batlv2
0x064E	0x340E ;_batlv2+0
0x064F	0x341B ;_batlv2+1
0x0650	0x3411 ;_batlv2+2
0x0651	0x3411 ;_batlv2+3
0x0652	0x3411 ;_batlv2+4
0x0653	0x341F ;_batlv2+5
0x0654	0x341F ;_batlv2+6
0x0655	0x341F ;_batlv2+7
; end of _batlv2
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [123]    _interrupt
0x007F       [6]    _Delay_1us
0x0085      [13]    _Delay_5500us
0x0092       [7]    _Delay_50us
0x0099       [8]    _Delay_22us
0x00A1      [64]    _Lcd_Cmd
0x00E1       [8]    _Lcd_Chr_CP
0x00E9      [14]    _ADC_Init
0x00F7      [53]    _Lcd_Chr
0x012C      [44]    _Div_16x16_S_L
0x0158      [22]    _ADC_Get_Sample
0x016E      [43]    _Mul_16x16_U
0x0199      [29]    _Div_16x16_U
0x01B6      [30]    _initializePWM
0x01D4       [7]    _____DoICP
0x01DB      [16]    _pad
0x01EB     [147]    _getOverload
0x027E      [15]    _initializeIO
0x028D      [95]    _doFeedback
0x02EC     [147]    _batteryIcon
0x037F     [196]    _doChecks
0x0443     [120]    _getBatteryVoltage
0x04BB      [78]    _Lcd_Init
0x0509      [12]    ___CC2DW
0x0515      [52]    _numToOne
0x0549      [95]    _getMainsVoltage
0x05A8      [25]    _Mul_8x8_U
0x05C1     [105]    _Div_16x16_S
0x062A       [4]    _initializePeripherals
0x0800    [1611]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [0]    DC_bit
0x0003       [0]    C_bit
0x0003       [0]    Z_bit
0x0003       [1]    STATUS
0x0003       [0]    IRP_bit
0x0003       [0]    NOT_PD_bit
0x0003       [0]    NOT_TO_bit
0x0003       [0]    RP1_bit
0x0003       [0]    RP0_bit
0x0004       [1]    FSR
0x0004       [1]    FSRPTR
0x0005       [1]    PORTA
0x0005       [0]    RA2_bit
0x0005       [0]    RA3_bit
0x0005       [0]    RA0_bit
0x0005       [0]    RA1_bit
0x0005       [0]    RA5_bit
0x0005       [0]    RA4_bit
0x0006       [0]    RB4_bit
0x0006       [0]    RB6_bit
0x0006       [0]    RB5_bit
0x0006       [0]    RB2_bit
0x0006       [0]    RB1_bit
0x0006       [0]    RB0_bit
0x0006       [1]    PORTB
0x0006       [0]    RB7_bit
0x0006       [0]    RB3_bit
0x0006       [0]    Triac
0x0006       [0]    LCD_EN
0x0006       [0]    outputRelay
0x0006       [0]    inverterSw
0x0007       [0]    RC3_bit
0x0007       [0]    RC2_bit
0x0007       [0]    RC0_bit
0x0007       [0]    RC1_bit
0x0007       [0]    RC6_bit
0x0007       [0]    RC7_bit
0x0007       [0]    RC4_bit
0x0007       [0]    RC5_bit
0x0007       [0]    LCD_D6
0x0007       [0]    LCD_D7
0x0007       [0]    LCD_D4
0x0007       [0]    LCD_D5
0x0007       [0]    LCD_RS
0x0007       [0]    MOS1
0x0007       [0]    MOS2
0x0007       [1]    PORTC
0x000A       [1]    PCLATH
0x000B       [0]    INTF_bit
0x000B       [0]    PEIE_bit
0x000B       [0]    T0IF_bit
0x000B       [1]    INTCON
0x000B       [0]    INTE_bit
0x000B       [0]    T0IE_bit
0x000B       [0]    RBIE_bit
0x000B       [0]    RBIF_bit
0x000B       [0]    GIE_bit
0x000C       [0]    TMR2IF_bit
0x000C       [1]    PIR1
0x000C       [0]    CCP1IF_bit
0x000C       [0]    TMR1IF_bit
0x000C       [0]    RCIF_bit
0x000C       [0]    SSPIF_bit
0x000C       [0]    TXIF_bit
0x000C       [0]    ADIF_bit
0x000D       [0]    CCP2IF_bit
0x000D       [1]    PIR2
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [0]    NOT_T1SYNC_bit
0x0010       [0]    T1CKPS0_bit
0x0010       [1]    T1CON
0x0010       [0]    TMR1ON_bit
0x0010       [0]    T1CKPS1_bit
0x0010       [0]    T1OSCEN_bit
0x0010       [0]    TMR1CS_bit
0x0010       [0]    T1INSYNC_bit
0x0011       [1]    TMR2
0x0012       [0]    TOUTPS0_bit
0x0012       [0]    TOUTPS1_bit
0x0012       [0]    T2CKPS1_bit
0x0012       [0]    TMR2ON_bit
0x0012       [0]    TOUTPS3_bit
0x0012       [0]    TOUTPS2_bit
0x0012       [0]    T2CKPS0_bit
0x0012       [1]    T2CON
0x0013       [1]    SSPBUF
0x0014       [0]    SSPM2_bit
0x0014       [0]    SSPM3_bit
0x0014       [0]    CKP_bit
0x0014       [0]    WCOL_bit
0x0014       [1]    SSPCON
0x0014       [0]    SSPOV_bit
0x0014       [0]    SSPEN_bit
0x0014       [0]    SSPM1_bit
0x0014       [0]    SSPM0_bit
0x0015       [1]    CCPR1L
0x0015       [2]    CCPR1
0x0016       [1]    CCPR1H
0x0017       [1]    CCP1CON
0x0017       [0]    CCP1M0_bit
0x0017       [0]    CCP1M1_bit
0x0017       [0]    CCP1M2_bit
0x0017       [0]    CCP1M3_bit
0x0017       [0]    CCP1X_bit
0x0017       [0]    CCP1Y_bit
0x0018       [0]    SPEN_bit
0x0018       [0]    NOT_RC8_bit
0x0018       [0]    RX9_bit
0x0018       [0]    RX9D_bit
0x0018       [0]    FERR_bit
0x0018       [0]    RCD8_bit
0x0018       [0]    RC8_9_bit
0x0018       [0]    CREN_bit
0x0018       [0]    SREN_bit
0x0018       [1]    RCSTA
0x0018       [0]    OERR_bit
0x0018       [0]    RC9_bit
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001B       [1]    CCPR2L
0x001B       [2]    CCPR2
0x001C       [1]    CCPR2H
0x001D       [0]    CCP2M1_bit
0x001D       [0]    CCP2M0_bit
0x001D       [0]    CCP2X_bit
0x001D       [1]    CCP2CON
0x001D       [0]    CCP2Y_bit
0x001D       [0]    CCP2M3_bit
0x001D       [0]    CCP2M2_bit
0x001E       [1]    ADRES
0x001F       [0]    CHS2_bit
0x001F       [0]    ADCS0_bit
0x001F       [0]    NOT_DONE_bit
0x001F       [0]    ADON_bit
0x001F       [0]    GO_bit
0x001F       [0]    GO_DONE_bit
0x001F       [0]    ADCS1_bit
0x001F       [0]    CHS1_bit
0x001F       [0]    CHS0_bit
0x001F       [1]    ADCON0
0x0021       [1]    FARG_ADC_Get_Sample_channel
0x0022       [2]    _chargingEnabled
0x0024       [2]    _loopcounter
0x0026       [1]    _batteryState
0x0027       [1]    _dutyCounter
0x0028       [1]    _period
0x0029       [1]    _duty_buffer
0x002A       [1]    _MOSdriveState
0x002B       [1]    _duty
0x002C       [1]    _overloadcounter
0x002D       [1]    _pwmStarted
0x002E       [1]    _chargingDuty
0x002F       [1]    _firing
0x0030       [1]    _delayCounter
0x0031       [1]    _delayCounter2
0x0032       [2]    _chargingDuty_buffer
0x0034       [1]    _cdCounter
0x0035       [1]    _chgDelay
0x0036       [2]    _adTemp
0x0038       [1]    _counter
0x0039       [2]    _ovThreshold
0x003B       [2]    _vShunt
0x003D       [1]    _hicutreached
0x003E       [1]    _acStatus
0x003F       [1]    _inverterState
0x0040       [2]    _vBat
0x0042       [1]    _mode
0x0043       [1]    _lv4
0x0044       [2]    _loadpc
0x0046       [1]    _ac_low
0x0047       [1]    _lv1
0x0048       [1]    _lv2
0x0049       [1]    _lv3
0x004A       [1]    _pulseCounter
0x004B       [2]    _ac_high
0x004D       [3]    _ADC_Get_Sample_Ptr
0x0050       [0]    __Lib_Lcd_cmd_status
0x0051       [1]    _chgDot
0x0052       [2]    _vFb
0x0054       [1]    _hundreds
0x0055       [2]    _num
0x0057       [1]    _chlv
0x0058       [1]    _batlv
0x0059       [1]    _character
0x005A       [1]    _lcdCounter
0x005B       [2]    _vAc
0x005D       [1]    _t1pr
0x005E       [1]    _tens
0x005F       [1]    _ones
0x0060       [1]    _lcdState
0x0061       [1]    _mainsStarted
0x0062       [1]    ___saveSTATUS
0x0063       [1]    ___savePCLATH
0x0064       [1]    _overloadState
0x0065       [2]    ___DoICPAddr
0x0067       [1]    FARG_pad_c
0x0067       [1]    FARG_batteryIcon_pos_row
0x0068       [1]    FARG_batteryIcon_pos_char
0x0069       [1]    FARG_Lcd_Chr_row
0x0069       [1]    FARG_Lcd_Chr_CP_out_char
0x006A       [1]    FARG_Lcd_Chr_column
0x006B       [1]    FARG_Lcd_Chr_out_char
0x006C       [1]    FARG_Lcd_Cmd_out_char
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [0]    T0CS_bit
0x0081       [0]    PSA_bit
0x0081       [0]    NOT_RBPU_bit
0x0081       [0]    T0SE_bit
0x0081       [0]    PS0_bit
0x0081       [0]    PS1_bit
0x0081       [0]    PS2_bit
0x0081       [0]    INTEDG_bit
0x0081       [1]    OPTION_REG
0x0085       [0]    TRISA3_bit
0x0085       [0]    TRISA4_bit
0x0085       [0]    TRISA5_bit
0x0085       [1]    TRISA
0x0085       [0]    TRISA1_bit
0x0085       [0]    TRISA2_bit
0x0085       [0]    TRISA0_bit
0x0086       [0]    TRISB4_bit
0x0086       [0]    TRISB3_bit
0x0086       [0]    TRISB7_bit
0x0086       [0]    TRISB6_bit
0x0086       [0]    TRISB5_bit
0x0086       [0]    TRISB0_bit
0x0086       [1]    TRISB
0x0086       [0]    LCD_EN_Direction
0x0086       [0]    TRISB2_bit
0x0086       [0]    TRISB1_bit
0x0087       [0]    TRISC2_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC4_bit
0x0087       [0]    LCD_D7_Direction
0x0087       [0]    TRISC0_bit
0x0087       [0]    TRISC1_bit
0x0087       [0]    LCD_RS_Direction
0x0087       [1]    TRISC
0x0087       [0]    LCD_D4_Direction
0x0087       [0]    LCD_D5_Direction
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    LCD_D6_Direction
0x0087       [0]    TRISC7_bit
0x008C       [0]    CCP1IE_bit
0x008C       [0]    TMR1IE_bit
0x008C       [0]    ADIE_bit
0x008C       [1]    PIE1
0x008C       [0]    TXIE_bit
0x008C       [0]    TMR2IE_bit
0x008C       [0]    SSPIE_bit
0x008C       [0]    RCIE_bit
0x008D       [1]    PIE2
0x008D       [0]    CCP2IE_bit
0x008E       [0]    NOT_BOR_bit
0x008E       [0]    NOT_POR_bit
0x008E       [1]    PCON
0x008E       [0]    NOT_BO_bit
0x0092       [1]    PR2
0x0093       [1]    SSPADD
0x0094       [1]    SSPSTAT
0x0094       [0]    BF_bit
0x0094       [0]    NOT_A_bit
0x0094       [0]    I2C_STOP__bit
0x0094       [0]    NOT_W_bit
0x0094       [0]    NOT_ADDRESS_bit
0x0094       [0]    I2C_DATA_bit
0x0094       [0]    DATA_ADDRESS_bit
0x0094       [0]    I2C_START__bit
0x0094       [0]    I2C_READ_bit
0x0094       [0]    READ_WRITE_bit
0x0094       [0]    UA_bit
0x0094       [0]    SMP_bit
0x0094       [0]    S_bit
0x0094       [0]    P_bit
0x0094       [0]    NOT_WRITE_bit
0x0094       [0]    R_W_bit
0x0094       [0]    R_bit
0x0094       [0]    D_bit
0x0094       [0]    CKE_bit
0x0094       [0]    D_A_bit
0x0098       [0]    TXD8_bit
0x0098       [0]    TX9D_bit
0x0098       [0]    TX9_bit
0x0098       [0]    NOT_TX8_bit
0x0098       [1]    TXSTA
0x0098       [0]    TXEN_bit
0x0098       [0]    BRGH_bit
0x0098       [0]    CSRC_bit
0x0098       [0]    SYNC_bit
0x0098       [0]    TX8_9_bit
0x0098       [0]    TRMT_bit
0x0099       [1]    SPBRG
0x009F       [0]    PCFG2_bit
0x009F       [0]    PCFG1_bit
0x009F       [0]    PCFG0_bit
0x009F       [1]    ADCON1
0x010C       [1]    PMDATA
0x010D       [1]    PMADR
0x010E       [1]    PMDATH
0x010F       [1]    PMADRH
0x018C       [1]    PMCON1
0x018C       [0]    RD_bit
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x062E       [8]    _batlv4
0x0636       [8]    _batlv5
0x063E       [8]    _batlv3
0x0646       [8]    _batlv1
0x064E       [8]    _batlv2
//** Label List: ** 
//----------------------------------------------
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  L_batteryIcon19
  L_batteryIcon20
  L_batteryIcon21
  L_batteryIcon22
  L_batteryIcon23
  L_batteryIcon24
  L_batteryIcon25
  L_batteryIcon26
  L_batteryIcon27
  L_batteryIcon28
  L_getMainsVoltage29
  L_getMainsVoltage30
  L_getMainsVoltage31
  L_getMainsVoltage32
  L_getMainsVoltage33
  L_getMainsVoltage34
  L_getMainsVoltage35
  L_getMainsVoltage36
  L_getMainsVoltage37
  L_getMainsVoltage38
  L_getMainsVoltage39
  L_getBatteryVoltage40
  L_getBatteryVoltage41
  L_getBatteryVoltage42
  L_getBatteryVoltage43
  L_getBatteryVoltage44
  L_getBatteryVoltage45
  L_getBatteryVoltage46
  L_getBatteryVoltage47
  L_getBatteryVoltage48
  L_getBatteryVoltage49
  L_getBatteryVoltage50
  L_getBatteryVoltage51
  L_getBatteryVoltage52
  L_getBatteryVoltage53
  L_doChecks54
  L_doChecks55
  L_doChecks56
  L_doChecks57
  L_doChecks58
  L_doChecks59
  L_doChecks60
  L_doChecks61
  L_doChecks62
  L_doChecks63
  L_doChecks64
  L_doChecks65
  L_doChecks66
  L_doChecks67
  L_doChecks68
  L_doChecks69
  L_doChecks70
  L_doChecks71
  L_doChecks72
  L_doChecks73
  L_doChecks74
  L_doFeedback75
  L_doFeedback76
  L_doFeedback77
  L_doFeedback78
  L_doFeedback79
  L_doFeedback80
  L_doFeedback81
  L_doFeedback82
  L_getOverload83
  L_getOverload84
  L_getOverload85
  L_getOverload86
  L_getOverload87
  L_getOverload88
  L_getOverload89
  L_getOverload90
  L_getOverload91
  L_getOverload92
  L_pad93
  L_pad94
  L_pad95
  L_main96
  L_main97
  L_main98
  L_main99
  L_main100
  L_main101
  L_main102
  L_main103
  L_main104
  L_main105
  L_main106
  L_main107
  L_main108
  L_main109
  L_main110
  L_main111
  L_main112
  L_main113
  L_main114
  L_main115
  L_main116
  L_main117
  L_main118
  L_main119
  L_main120
  L_main121
  L_main122
  L_main123
  L_main124
  L_main125
  L_main126
  L_main127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L_main141
  L_main142
  L_main143
  L_main144
  L_main145
  L_main146
  L_main147
  L_main148
  L_main149
  L_main150
  L_main151
  L_main152
  L_main153
  L_main154
  L_main155
  L_main156
  L_main157
  L_main158
  L_main159
  L_main160
  L_main161
  L_main162
  L_main163
  L_main164
  L_main165
  L_main166
  L_main167
  L_main168
  L_main169
  L_main170
  L_main171
  L_main172
  L__interrupt173
  _interrupt
  L__interrupt174
  L__interrupt175
  _batteryIcon
  L__batteryIcon176
  _initializePeripherals
  _initializePWM
  _stopPWM
  _initializeIO
  _getMainsVoltage
  L__getMainsVoltage177
  L__getMainsVoltage178
  _getBatteryVoltage
  L__getBatteryVoltage179
  L__getBatteryVoltage180
  L__getBatteryVoltage181
  L__getBatteryVoltage182
  _doChecks
  _doFeedback
  L__doFeedback183
  L__doFeedback184
  L__doFeedback185
  _getOverload
  L__getOverload186
  L__getOverload187
  L__getOverload188
  L__getOverload189
  _numToOne
  _pad
  _main
  L__main190
  L__main191
  L__main192
  L__main193
  L__main194
  L__main195
  L__main196
  L__main197
  L__main198
  L__main199
  L__main200
  L_ADC_Get_Sample0
  L_ADC_Get_Sample1
  L_ADC_Read2
  L_ADC_Read3
  _ADC_Init
  _ADC_Get_Sample
  _ADC_Read
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_10ms9
  L_Delay_100ms10
  L_Delay_1sec11
  L_boot16_Delay_5ms12
  L_Delay_Cyc13
  L_Delay_Cyc14
  L_VDelay_ms15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_Advanced_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  _Get_Fosc_kHz
  _Delay_1us
  _Delay_10us
  _Delay_22us
  _Delay_50us
  _Delay_80us
  _Delay_500us
  _Delay_5500us
  _Delay_1ms
  _Delay_5ms
  _Delay_8ms
  _Delay_10ms
  _Delay_100ms
  _Delay_1sec
  _boot16_Delay_5ms
  _Delay_Cyc
  _VDelay_ms
  L__VDelay_ms21
  L__VDelay_ms22
  L__VDelay_ms23
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms24
  L__VDelay_Advanced_ms25
  L__VDelay_Advanced_ms26
  L_Lcd_Cmd0
  L_Lcd_Cmd1
  L_Lcd_Out_CP2
  L_Lcd_Out_CP3
  L_Lcd_Chr4
  L_Lcd_Chr5
  L_Lcd_Chr6
  L_Lcd_Chr7
  L_Lcd_Chr8
  L_Lcd_Chr9
  L_Lcd_Chr10
  L_Lcd_Out11
  L_Lcd_Out12
  L_Lcd_Out13
  L_Lcd_Out14
  L_Lcd_Out15
  L_Lcd_Out16
  L_Lcd_Out17
  L_Lcd_Out18
  L_Lcd_Out19
  _Lcd_Cmd
  L__Lcd_Cmd20
  L__Lcd_Cmd21
  L__Lcd_Cmd22
  L__Lcd_Cmd23
  L__Lcd_Cmd24
  L__Lcd_Cmd25
  L__Lcd_Cmd26
  L__Lcd_Cmd27
  L__Lcd_Cmd28
  L__Lcd_Cmd29
  L__Lcd_Cmd30
  L__Lcd_Cmd31
  L__Lcd_Cmd32
  L__Lcd_Cmd33
  L__Lcd_Cmd34
  L__Lcd_Cmd35
  L__Lcd_Cmd36
  L__Lcd_Cmd37
  L__Lcd_Cmd38
  L__Lcd_Cmd39
  _Lcd_Chr_CP
  _Lcd_Out_CP
  _Lcd_Chr
  _Lcd_Init
  _Lcd_Out
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  _Mul_8x8_U
  _Mul_16x16_U
  _Div_8x8_U
  _Div_16x16_U
  _Mul_8x8_S
  _Mul_16x16_S
  _Div_16x16_S_L
  _Div_16x16_S
  _Div_8x8_S
  _SDIV3232L
  _COMFREM
  _Div_32x32_S
  _Div_32x32_U
  _Mul_32x32_U
  _Mul_32x32_S
  _CC2D_Loop1
  _____DoICP
  _____DoIFC
  ___CC2DW
  _Swap
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  L_batteryIcon19
  L_batteryIcon20
  L_batteryIcon21
  L_batteryIcon22
  L_batteryIcon23
  L_batteryIcon24
  L_batteryIcon25
  L_batteryIcon26
  L_batteryIcon27
  L_batteryIcon28
  L_getMainsVoltage29
  L_getMainsVoltage30
  L_getMainsVoltage31
  L_getMainsVoltage32
  L_getMainsVoltage33
  L_getMainsVoltage34
  L_getMainsVoltage35
  L_getMainsVoltage36
  L_getMainsVoltage37
  L_getMainsVoltage38
  L_getMainsVoltage39
  L_getBatteryVoltage40
  L_getBatteryVoltage41
  L_getBatteryVoltage42
  L_getBatteryVoltage43
  L_getBatteryVoltage44
  L_getBatteryVoltage45
  L_getBatteryVoltage46
  L_getBatteryVoltage47
  L_getBatteryVoltage48
  L_getBatteryVoltage49
  L_getBatteryVoltage50
  L_getBatteryVoltage51
  L_getBatteryVoltage52
  L_getBatteryVoltage53
  L_doChecks54
  L_doChecks55
  L_doChecks56
  L_doChecks57
  L_doChecks58
  L_doChecks59
  L_doChecks60
  L_doChecks61
  L_doChecks62
  L_doChecks63
  L_doChecks64
  L_doChecks65
  L_doChecks66
  L_doChecks67
  L_doChecks68
  L_doChecks69
  L_doChecks70
  L_doChecks71
  L_doChecks72
  L_doChecks73
  L_doChecks74
  L_doFeedback75
  L_doFeedback76
  L_doFeedback77
  L_doFeedback78
  L_doFeedback79
  L_doFeedback80
  L_doFeedback81
  L_doFeedback82
  L_getOverload83
  L_getOverload84
  L_getOverload85
  L_getOverload86
  L_getOverload87
  L_getOverload88
  L_getOverload89
  L_getOverload90
  L_getOverload91
  L_getOverload92
  L_pad93
  L_pad94
  L_pad95
  L_main96
  L_main97
  L_main98
  L_main99
  L_main100
  L_main101
  L_main102
  L_main103
  L_main104
  L_main105
  L_main106
  L_main107
  L_main108
  L_main109
  L_main110
  L_main111
  L_main112
  L_main113
  L_main114
  L_main115
  L_main116
  L_main117
  L_main118
  L_main119
  L_main120
  L_main121
  L_main122
  L_main123
  L_main124
  L_main125
  L_main126
  L_main127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L_main141
  L_main142
  L_main143
  L_main144
  L_main145
  L_main146
  L_main147
  L_main148
  L_main149
  L_main150
  L_main151
  L_main152
  L_main153
  L_main154
  L_main155
  L_main156
  L_main157
  L_main158
  L_main159
  L_main160
  L_main161
  L_main162
  L_main163
  L_main164
  L_main165
  L_main166
  L_main167
  L_main168
  L_main169
  L_main170
  L_main171
  L_main172
  L__interrupt173
  _interrupt
  L__interrupt174
  L__interrupt175
  _batteryIcon
  L__batteryIcon176
  _initializePeripherals
  _initializePWM
  _stopPWM
  _initializeIO
  _getMainsVoltage
  L__getMainsVoltage177
  L__getMainsVoltage178
  _getBatteryVoltage
  L__getBatteryVoltage179
  L__getBatteryVoltage180
  L__getBatteryVoltage181
  L__getBatteryVoltage182
  _doChecks
  _doFeedback
  L__doFeedback183
  L__doFeedback184
  L__doFeedback185
  _getOverload
  L__getOverload186
  L__getOverload187
  L__getOverload188
  L__getOverload189
  _numToOne
  _pad
  _main
  L__main190
  L__main191
  L__main192
  L__main193
  L__main194
  L__main195
  L__main196
  L__main197
  L__main198
  L__main199
  L__main200
